Issue ID,Title,Body,User,State,Created At,Assignees,Closed At,Closed By,Updated At,Number of Comments,Labels,Milestone Title,Milestone Number
850614616,Backport PR #19847 on branch v3.4.x (Reformat references (part 2)),Backport PR #19847: Reformat references (part 2),meeseeksmachine,closed,2021-04-05 19:46:37,,2021-04-05 21:16:00,timhoffm,2021-04-05 21:16:00,0,,v3.4.2,63
850589923,Allow changing the vertical axis in 3d plots,"Closes #19791

## PR Summary
Add support for 3d plots to align the y axis vertically instead of the z axis.

## PR Checklist

<!-- Please mark any checkboxes that do not apply to this PR as [N/A]. -->

- [ ] Has pytest style unit tests (and `pytest` passes).
- [ ] Is [Flake 8](https://flake8.pycqa.org/en/latest/) compliant (run `flake8` on changed files to check).
- [ ] New features are documented, with examples if plot related.
- [ ] Documentation is sphinx and numpydoc compliant (the docs should [build](https://matplotlib.org/devel/documenting_mpl.html#building-the-docs) without error).
- [ ] Conforms to Matplotlib style conventions (install `flake8-docstrings` and run `flake8 --docstring-convention=all`).
- [ ] New features have an entry in `doc/users/next_whats_new/` (follow instructions in README.rst there).
- [ ] API changes documented in `doc/api/next_api_changes/` (follow instructions in README.rst there).

<!--
Thank you so much for your PR!  To help us review your contribution, please
consider the following points:

- A development guide is available at https://matplotlib.org/devdocs/devel/index.html.

- Help with git and github is available at
  https://matplotlib.org/devel/gitwash/development_workflow.html.

- Do not create the PR out of master, but out of a separate branch.

- The PR title should summarize the changes, for example ""Raise ValueError on
  non-numeric input to set_xlim"".  Avoid non-descriptive titles such as
  ""Addresses issue #8576"".

- The summary should provide at least 1-2 sentences describing the pull request
  in detail (Why is this change required?  What problem does it solve?) and
  link to any relevant issues.

- If you are contributing fixes to docstrings, please pay attention to
  http://matplotlib.org/devel/documenting_mpl.html#formatting.  In particular,
  note the difference between using single backquotes, double backquotes, and
  asterisks in the markup.

We understand that PRs can sometimes be overwhelming, especially as the
reviews start coming in.  Please let us know if the reviews are unclear or
the recommended next step seems overly demanding, if you would like help in
addressing a reviewer's comments, or if you have been waiting too long to hear
back on your PR.
-->
",Illviljan,open,2021-04-05 19:07:40,,,,2021-04-05 19:46:14,0,"status: needs documentation, status: needs tests, topic: mplot3d",,
850578485,Fix unit handling in errorbar for astropy.,"Unfortunately, this bug only triggers with astropy's unit
implementation, but not with either of matplotlib's ""test"" units
(testing.jpl_units and test_units.Quantity).  So I don't have a
self-contained way to add a test...

Closes https://github.com/matplotlib/matplotlib/pull/19526#issuecomment-813423653.

## PR Summary

## PR Checklist

<!-- Please mark any checkboxes that do not apply to this PR as [N/A]. -->

- [ ] Has pytest style unit tests (and `pytest` passes).
- [ ] Is [Flake 8](https://flake8.pycqa.org/en/latest/) compliant (run `flake8` on changed files to check).
- [ ] New features are documented, with examples if plot related.
- [ ] Documentation is sphinx and numpydoc compliant (the docs should [build](https://matplotlib.org/devel/documenting_mpl.html#building-the-docs) without error).
- [ ] Conforms to Matplotlib style conventions (install `flake8-docstrings` and run `flake8 --docstring-convention=all`).
- [ ] New features have an entry in `doc/users/next_whats_new/` (follow instructions in README.rst there).
- [ ] API changes documented in `doc/api/next_api_changes/` (follow instructions in README.rst there).

<!--
Thank you so much for your PR!  To help us review your contribution, please
consider the following points:

- A development guide is available at https://matplotlib.org/devdocs/devel/index.html.

- Help with git and github is available at
  https://matplotlib.org/devel/gitwash/development_workflow.html.

- Do not create the PR out of master, but out of a separate branch.

- The PR title should summarize the changes, for example ""Raise ValueError on
  non-numeric input to set_xlim"".  Avoid non-descriptive titles such as
  ""Addresses issue #8576"".

- The summary should provide at least 1-2 sentences describing the pull request
  in detail (Why is this change required?  What problem does it solve?) and
  link to any relevant issues.

- If you are contributing fixes to docstrings, please pay attention to
  http://matplotlib.org/devel/documenting_mpl.html#formatting.  In particular,
  note the difference between using single backquotes, double backquotes, and
  asterisks in the markup.

We understand that PRs can sometimes be overwhelming, especially as the
reviews start coming in.  Please let us know if the reviews are unclear or
the recommended next step seems overly demanding, if you would like help in
addressing a reviewer's comments, or if you have been waiting too long to hear
back on your PR.
-->
",anntzer,closed,2021-04-05 18:49:57,,2021-04-05 20:44:38,timhoffm,2021-04-05 21:28:15,1,"Release critical, topic: units",v3.5.0,59
850547642,"Matplotlib >= v3.3.3 breaks with pandas.plotting.register_matplotlib_converters(), ax.pcolormesh(), and datetime objects","### Bug report

**Bug summary**

Matplotlib >= v3.3.3 breaks when using `pandas.plotting.register_matplotlib_converters()`, `ax.pcolormesh()`, and and array of `datetime.datetime()` objects as coordinates.

Code was tested using clean conda environments only differing by Matplotlib version. Versions tested:

- mpl v3.3.2: Code works
- mpl v3.3.3: Code breaks
- mpl v3.4.1: Code breaks

**Code for reproduction**
The code below will work if the following lines are commented/removed:
```
from pandas.plotting import register_matplotlib_converters
register_matplotlib_converters()
```

```
#!/usr/bin/env python3
from matplotlib import pyplot as plt
import numpy as np
import datetime

from pandas.plotting import register_matplotlib_converters
register_matplotlib_converters()

fig = plt.figure()
ax  = fig.add_subplot(111)

times   = [datetime.datetime(2021,1,1)]
while len(times) < 721:
    times.append(times[-1]+datetime.timedelta(seconds=120))

y_vals  = np.arange(101)

time_axis, y_axis   = np.meshgrid(times,y_vals)
shape               = (len(y_vals)-1,len(times)-1)
z_data              = np.arange(shape[0]*shape[1])
z_data.shape        = shape

im = ax.pcolormesh(time_axis, y_axis, z_data)
fig.savefig('bug_report.png')
```

**Actual outcome**

This traceback comes from my Matplotlib 3.4.1 conda environment:
```
Traceback (most recent call last):
  File ""./bug_report.py"", line 23, in <module>
    im = ax.pcolormesh(time_axis, y_axis, z_data)
  File ""/home/w2naf/anaconda3/envs/mpl3.4.1/lib/python3.7/site-packages/matplotlib/__init__.py"", line 1352, in inner
    return func(ax, *map(sanitize_sequence, args), **kwargs)
  File ""/home/w2naf/anaconda3/envs/mpl3.4.1/lib/python3.7/site-packages/matplotlib/axes/_axes.py"", line 6163, in pcolormesh
    shading=shading, kwargs=kwargs)
  File ""/home/w2naf/anaconda3/envs/mpl3.4.1/lib/python3.7/site-packages/matplotlib/axes/_axes.py"", line 5655, in _pcolorargs
    Nx = X.shape[-1]
AttributeError: 'list' object has no attribute 'shape'
```
This traceback comes from my Matplotlib 3.3.3 conda environment:
```
Traceback (most recent call last):
  File ""./bug_report.py"", line 23, in <module>
    im = ax.pcolormesh(time_axis, y_axis, z_data)
  File ""/home/w2naf/anaconda3/envs/mpl3.3.3/lib/python3.7/site-packages/matplotlib/__init__.py"", line 1447, in inner
    return func(ax, *map(sanitize_sequence, args), **kwargs)
  File ""/home/w2naf/anaconda3/envs/mpl3.3.3/lib/python3.7/site-packages/matplotlib/axes/_axes.py"", line 6093, in pcolormesh
    shading=shading, kwargs=kwargs)
  File ""/home/w2naf/anaconda3/envs/mpl3.3.3/lib/python3.7/site-packages/matplotlib/axes/_axes.py"", line 5590, in _pcolorargs
    Nx = X.shape[-1]
AttributeError: 'list' object has no attribute 'shape'
```

**Expected outcome**
Output from my Matplotlib 3.3.2 conda environment:
![bug_report](https://user-images.githubusercontent.com/1831182/113606904-9a78ff80-9616-11eb-9dab-fdf8f093681c.png)

**Matplotlib version**
<!--Please specify your platform and versions of the relevant libraries you are using:-->
  * Operating system: Ubuntu 18.04.5 LTS
  * Matplotlib version: Code breaks in v3.3.3 and v3.4.1; Code works in v3.3.2
  * Matplotlib backend: Qt5Agg
  * Python version: 3.7.7
  * Other libraries: Pandas v1.2.3

Matplotlib and python were installed with Anaconda for Linux 64 Bit. (conda 4.9.2)

",w2naf,open,2021-04-05 18:02:15,,,jklymak,2021-04-05 22:43:59,4,"status: downstream fix required, topic: units",v3.4.2,63
850513675,vmin and vmax have no effect for plot_surface(),"<!--To help us understand and resolve your issue, please fill out the form to the best of your ability.-->
<!--You can feel free to delete the sections that do not apply.-->

### Bug report

**Bug summary**

Passing `vmin` and `vmax` arguments to `plot_surface()` seems to have no effect. I expected these arguments to change the limits of the vertical scale.

**Code for reproduction**

<!--A minimum code snippet required to reproduce the bug.
Please make sure to minimize the number of dependencies required, and provide
any necessary plotted data.
Avoid using threads, as Matplotlib is (explicitly) not thread-safe.-->

```python
from matplotlib import pyplot as plt
import numpy as np

data = np.random.rand(5,6)
y, x = np.meshgrid(np.arange(6), np.arange(5))

# no vmin, vmax
fig, ax = plt.subplots(subplot_kw={""projection"": ""3d""})
ax.plot_surface(x, y, data)

# try to use vmin, vmax
fig, ax = plt.subplots(subplot_kw={""projection"": ""3d""})
ax.plot_surface(x, y, data, vmin=-10.0, vmax=10.0)

plt.show()
```

**Actual outcome**

Plot without `vmin`/`vmax`
![no_vmin_vmax](https://user-images.githubusercontent.com/3958036/113601674-8abee280-9639-11eb-9c35-fbb4b3f5aef8.png)

Plot trying to set `vmin`/`vmax`
![with_vmin_vmax](https://user-images.githubusercontent.com/3958036/113601711-97dbd180-9639-11eb-937d-35f6684220c5.png)

**Expected outcome**

Expected the two plots to be different, with the second having an expanded vertical axis.

**Matplotlib version**
<!--Please specify your platform and versions of the relevant libraries you are using:-->
  * Operating system: Linux Mint 20.1 Cinnamon
  * Matplotlib version 3.4.1
  * Matplotlib backend: Qt5Agg
  * Python version: 3.8.6
  * Other libraries: numpy-1.20.2

Installed from conda (conda-forge channel).",johnomotani,closed,2021-04-05 17:09:02,,2021-04-05 17:45:42,jklymak,2021-04-05 18:13:06,1,Community support,,
850302220,Factor out x/y lo/hi handling in errorbar.,"## PR Summary

## PR Checklist

<!-- Please mark any checkboxes that do not apply to this PR as [N/A]. -->

- [ ] Has pytest style unit tests (and `pytest` passes).
- [ ] Is [Flake 8](https://flake8.pycqa.org/en/latest/) compliant (run `flake8` on changed files to check).
- [ ] New features are documented, with examples if plot related.
- [ ] Documentation is sphinx and numpydoc compliant (the docs should [build](https://matplotlib.org/devel/documenting_mpl.html#building-the-docs) without error).
- [ ] Conforms to Matplotlib style conventions (install `flake8-docstrings` and run `flake8 --docstring-convention=all`).
- [ ] New features have an entry in `doc/users/next_whats_new/` (follow instructions in README.rst there).
- [ ] API changes documented in `doc/api/next_api_changes/` (follow instructions in README.rst there).

<!--
Thank you so much for your PR!  To help us review your contribution, please
consider the following points:

- A development guide is available at https://matplotlib.org/devdocs/devel/index.html.

- Help with git and github is available at
  https://matplotlib.org/devel/gitwash/development_workflow.html.

- Do not create the PR out of master, but out of a separate branch.

- The PR title should summarize the changes, for example ""Raise ValueError on
  non-numeric input to set_xlim"".  Avoid non-descriptive titles such as
  ""Addresses issue #8576"".

- The summary should provide at least 1-2 sentences describing the pull request
  in detail (Why is this change required?  What problem does it solve?) and
  link to any relevant issues.

- If you are contributing fixes to docstrings, please pay attention to
  http://matplotlib.org/devel/documenting_mpl.html#formatting.  In particular,
  note the difference between using single backquotes, double backquotes, and
  asterisks in the markup.

We understand that PRs can sometimes be overwhelming, especially as the
reviews start coming in.  Please let us know if the reviews are unclear or
the recommended next step seems overly demanding, if you would like help in
addressing a reviewer's comments, or if you have been waiting too long to hear
back on your PR.
-->
",anntzer,open,2021-04-05 11:27:15,,,,2021-04-05 22:26:07,0,Maintenance,,
849980358,"Remove ""Install from source"" from Installing FAQ","This is only a link to the installation docs, which should be regarded
as the primary reference. We don't need FAQ entries that just link
there (We also don't have a FAQ entry ""How do I install using conda"").

Mid-term goal is to get rid of the ""installing FAQ"" altogether and
move relevant content directly to the installing docs.",timhoffm,open,2021-04-04 23:08:41,,,,2021-04-04 23:08:51,0,Documentation,v3.4.2,63
849976791,"Remove ""Use show()"" from how-to ","and move relevant content to show() docstring instead.

- ""call once per skipt"" is outdated --> removed.
- Relation to `savefig()` moved (and expanded).
- Interactive mode is linked in `show()` and does not need a detailed discussion here.
- Added a section on auto-show in jupyter notebooks.",timhoffm,open,2021-04-04 22:43:36,,,,2021-04-04 22:53:16,0,Documentation,v3.4.2,63
849969388,Switch to asciiart for boxplot illustration.,"This makes the information also available at the terminal.

## PR Summary

## PR Checklist

<!-- Please mark any checkboxes that do not apply to this PR as [N/A]. -->

- [ ] Has pytest style unit tests (and `pytest` passes).
- [ ] Is [Flake 8](https://flake8.pycqa.org/en/latest/) compliant (run `flake8` on changed files to check).
- [ ] New features are documented, with examples if plot related.
- [ ] Documentation is sphinx and numpydoc compliant (the docs should [build](https://matplotlib.org/devel/documenting_mpl.html#building-the-docs) without error).
- [ ] Conforms to Matplotlib style conventions (install `flake8-docstrings` and run `flake8 --docstring-convention=all`).
- [ ] New features have an entry in `doc/users/next_whats_new/` (follow instructions in README.rst there).
- [ ] API changes documented in `doc/api/next_api_changes/` (follow instructions in README.rst there).

<!--
Thank you so much for your PR!  To help us review your contribution, please
consider the following points:

- A development guide is available at https://matplotlib.org/devdocs/devel/index.html.

- Help with git and github is available at
  https://matplotlib.org/devel/gitwash/development_workflow.html.

- Do not create the PR out of master, but out of a separate branch.

- The PR title should summarize the changes, for example ""Raise ValueError on
  non-numeric input to set_xlim"".  Avoid non-descriptive titles such as
  ""Addresses issue #8576"".

- The summary should provide at least 1-2 sentences describing the pull request
  in detail (Why is this change required?  What problem does it solve?) and
  link to any relevant issues.

- If you are contributing fixes to docstrings, please pay attention to
  http://matplotlib.org/devel/documenting_mpl.html#formatting.  In particular,
  note the difference between using single backquotes, double backquotes, and
  asterisks in the markup.

We understand that PRs can sometimes be overwhelming, especially as the
reviews start coming in.  Please let us know if the reviews are unclear or
the recommended next step seems overly demanding, if you would like help in
addressing a reviewer's comments, or if you have been waiting too long to hear
back on your PR.
-->
",anntzer,open,2021-04-04 21:55:10,,,,2021-04-05 21:30:07,4,Documentation,,
849967530,"Backport PR #19860 on branch v3.4.x (Move ""howto interpreting box plots"" to boxplot docstring)","Backport PR #19860: Move ""howto interpreting box plots"" to boxplot docstring",meeseeksmachine,closed,2021-04-04 21:43:16,,2021-04-05 00:29:23,timhoffm,2021-04-05 00:29:23,0,Documentation,v3.4.2,63
849959613,Allow Rectangle and Ellipse selectors to be rotated,"## PR Summary
This PR allows `RectangleSelector` and `EllipseSelector` to be rotated about their anchor point. This is enabled by default with the `'r'` modifier key. Example:


https://user-images.githubusercontent.com/6197628/113521328-ad48f100-9590-11eb-9ee5-e7b539b99ff6.mov


## PR Checklist

<!-- Please mark any checkboxes that do not apply to this PR as [N/A]. -->

- [x] Has pytest style unit tests (and `pytest` passes).
- [ ] Is [Flake 8](https://flake8.pycqa.org/en/latest/) compliant (run `flake8` on changed files to check).
- [x] New features are documented, with examples if plot related.
- [ x Documentation is sphinx and numpydoc compliant (the docs should [build](https://matplotlib.org/devel/documenting_mpl.html#building-the-docs) without error).
- [x] Conforms to Matplotlib style conventions (install `flake8-docstrings` and run `flake8 --docstring-convention=all`).
- [x] New features have an entry in `doc/users/next_whats_new/` (follow instructions in README.rst there).
- [x] API changes documented in `doc/api/next_api_changes/` (follow instructions in README.rst there).

<!--
Thank you so much for your PR!  To help us review your contribution, please
consider the following points:

- A development guide is available at https://matplotlib.org/devdocs/devel/index.html.

- Help with git and github is available at
  https://matplotlib.org/devel/gitwash/development_workflow.html.

- Do not create the PR out of master, but out of a separate branch.

- The PR title should summarize the changes, for example ""Raise ValueError on
  non-numeric input to set_xlim"".  Avoid non-descriptive titles such as
  ""Addresses issue #8576"".

- The summary should provide at least 1-2 sentences describing the pull request
  in detail (Why is this change required?  What problem does it solve?) and
  link to any relevant issues.

- If you are contributing fixes to docstrings, please pay attention to
  http://matplotlib.org/devel/documenting_mpl.html#formatting.  In particular,
  note the difference between using single backquotes, double backquotes, and
  asterisks in the markup.

We understand that PRs can sometimes be overwhelming, especially as the
reviews start coming in.  Please let us know if the reviews are unclear or
the recommended next step seems overly demanding, if you would like help in
addressing a reviewer's comments, or if you have been waiting too long to hear
back on your PR.
-->
",dstansby,open,2021-04-04 20:57:15,,,,2021-04-04 21:04:19,0,widgets/UI,,
849957405,Cleanup docstrings related to interactive mode,,timhoffm,open,2021-04-04 20:42:52,,,,2021-04-04 21:19:47,0,Documentation,v3.4.2,63
849908866,Backport PR #19861 on branch v3.4.x (Remove FAQ Installing - Linux notes),Backport PR #19861: Remove FAQ Installing - Linux notes,meeseeksmachine,closed,2021-04-04 16:20:52,,2021-04-04 18:55:58,dstansby,2021-04-04 18:55:58,0,,v3.4.2,63
849756636,Remove FAQ Installing - Linux notes,"This does not contain information that is not already present in the
main installing docs.
",timhoffm,closed,2021-04-03 23:03:59,,2021-04-04 16:19:08,jklymak,2021-04-04 16:19:08,0,Documentation,v3.4.2,63
849749908,"Move ""howto interpreting box plots"" to boxplot docstring","## PR Summary

The explanation of a box plot is better placed at to the `boxplot()` function.",timhoffm,closed,2021-04-03 22:13:45,,2021-04-04 21:41:47,anntzer,2021-04-04 22:12:55,2,Documentation,v3.4.2,63
849741197,Write data parameter docs as regular parameter not as note,"## PR Summary

It's cleaner to document this as a normal parameter rather than using a note ""The function can take an additional parameter *data* ..."".

The docs is inserted before `**kwargs` docs, or if they do not exist as the last entry in `Parameters` (Which is the case only for a handful of methods.",timhoffm,open,2021-04-03 21:15:54,,,,2021-04-03 22:59:03,0,Documentation,v3.4.2,63
849723156,"Move Line2D units handling to Axes & deprecate ""units finalize"" signal.","... rather than having each Line2D instance connect its own
callback.  (If we imagine a future where other artist classes can
also update themselves to use new units, one can imagine simply
having an `update_units` method on all artists (currently named
`recache_always`)).

I believe that the `units` and `units finalize` signals both
existed only to ensure that Line2D.recache_always was called before
`Axes._unit_change_handler`, but that's not necessary anymore (perhaps
we need a generic way of manipulating callback order but that'd be a
separate story).  Deprecating the signal directly on CallbackRegistry is
a bit ugly but that's how it was done for idle_event too...

## PR Summary

## PR Checklist

<!-- Please mark any checkboxes that do not apply to this PR as [N/A]. -->

- [ ] Has pytest style unit tests (and `pytest` passes).
- [ ] Is [Flake 8](https://flake8.pycqa.org/en/latest/) compliant (run `flake8` on changed files to check).
- [ ] New features are documented, with examples if plot related.
- [ ] Documentation is sphinx and numpydoc compliant (the docs should [build](https://matplotlib.org/devel/documenting_mpl.html#building-the-docs) without error).
- [ ] Conforms to Matplotlib style conventions (install `flake8-docstrings` and run `flake8 --docstring-convention=all`).
- [ ] New features have an entry in `doc/users/next_whats_new/` (follow instructions in README.rst there).
- [ ] API changes documented in `doc/api/next_api_changes/` (follow instructions in README.rst there).

<!--
Thank you so much for your PR!  To help us review your contribution, please
consider the following points:

- A development guide is available at https://matplotlib.org/devdocs/devel/index.html.

- Help with git and github is available at
  https://matplotlib.org/devel/gitwash/development_workflow.html.

- Do not create the PR out of master, but out of a separate branch.

- The PR title should summarize the changes, for example ""Raise ValueError on
  non-numeric input to set_xlim"".  Avoid non-descriptive titles such as
  ""Addresses issue #8576"".

- The summary should provide at least 1-2 sentences describing the pull request
  in detail (Why is this change required?  What problem does it solve?) and
  link to any relevant issues.

- If you are contributing fixes to docstrings, please pay attention to
  http://matplotlib.org/devel/documenting_mpl.html#formatting.  In particular,
  note the difference between using single backquotes, double backquotes, and
  asterisks in the markup.

We understand that PRs can sometimes be overwhelming, especially as the
reviews start coming in.  Please let us know if the reviews are unclear or
the recommended next step seems overly demanding, if you would like help in
addressing a reviewer's comments, or if you have been waiting too long to hear
back on your PR.
-->
",anntzer,open,2021-04-03 19:19:11,,,,2021-04-03 22:56:32,0,topic: units,v3.5.0,59
849678410,Invalid backend when importing Matplotlib,"### Bug report

**Bug summary**

After installing the latest development version on the master branch using `pip install .` from the cloned Git repository, imports of Matplotlib fail because of an empty backend string ('') when reading rcParamDefaults from a file. If I switch to the 'v3.4.x' branch, there is no problem. 

**Code for reproduction**

```
>>> import matplotlib
```

**Actual outcome**
Using matplotlib-3.4.1.post292+g4085fc7ad
```
Python 3.8.8 | packaged by conda-forge | (default, Feb 20 2021, 16:12:38) 
[Clang 11.0.1 ] on darwin
Type ""help"", ""copyright"", ""credits"" or ""license"" for more information.
>>> import matplotlib
Traceback (most recent call last):
  File ""<stdin>"", line 1, in <module>
  File ""/Users/rosborn/opt/miniconda3/envs/py38/lib/python3.8/site-packages/matplotlib/__init__.py"", line 839, in <module>
    rcParamsDefault = _rc_params_in_file(
  File ""/Users/rosborn/opt/miniconda3/envs/py38/lib/python3.8/site-packages/matplotlib/__init__.py"", line 773, in _rc_params_in_file
    config[key] = val  # try to convert to proper type or raise
  File ""/Users/rosborn/opt/miniconda3/envs/py38/lib/python3.8/site-packages/matplotlib/__init__.py"", line 607, in __setitem__
    raise ValueError(f""Key {key}: {ve}"") from None
ValueError: Key backend: '' is not a valid value for backend; supported values are ['GTK3Agg', 'GTK3Cairo', 'MacOSX', 'nbAgg', 'Qt4Agg', 'Qt4Cairo', 'Qt5Agg', 'Qt5Cairo', 'TkAgg', 'TkCairo', 'WebAgg', 'WX', 'WXAgg', 'WXCairo', 'agg', 'cairo', 'pdf', 'pgf', 'ps', 'svg', 'template']
```

**Expected outcome**
Using matplotlib-3.4.1+5.g272860be0
```
Python 3.8.8 | packaged by conda-forge | (default, Feb 20 2021, 16:12:38) 
[Clang 11.0.1 ] on darwin
Type ""help"", ""copyright"", ""credits"" or ""license"" for more information.
>>> import matplotlib
>>> matplotlib.rcParamsDefault['backend']
'MacOSX'
```
**Matplotlib version**
  * Operating system: MacOS v10.15.7
  * Matplotlib version: 3.4.1.post292+g4085fc7ad 
  * Matplotlib backend:  ? (I can't query it because of the import failure. With v3.4.1, it's 'MacOSX')
  * Python version: 3.8.8
  
Both versions were installed with `pip install .` from within the Matplotlib cloned repository, having checked out the `master` and `v3.4.x` branches, respectively, for installation within a conda environment.
",rayosborn,closed,2021-04-03 15:19:55,,2021-04-03 16:25:10,jklymak,2021-04-06 00:46:00,1,status: duplicate,,
849669494,BUG: Contours with LogNorm,"### Bug report

**Bug summary**
Contour plots don't interact nicely with `matplotlib.colors.LogNorm`.
Likely related to #19748

**Code for reproduction**

```python
import matplotlib.pyplot as plt
import matplotlib.colors import LogNorm
import numpy as np

# BUG: setting levels as a scalar has no effect and no warning or error is printed
fig, ax = plt.subplots()
im = ax.contourf(x, y, data, norm=LogNorm(), levels=4)
fig.colorbar(im, ax=ax)
plt.savefig(""/tmp/mpl_logcontours_bug1.png"")
```
![mpl_logcontours_bug1](https://user-images.githubusercontent.com/14075922/113481209-7f808100-9498-11eb-9085-96500a8fff0c.png)


```python
# kinda buggy too: setting levels as an array does have some of the desired effects
# but ticks and ticklabels are incorrect
fig, ax = plt.subplots()
levels = np.logspace(np.log10(data.min()), np.log10(data.max()), 5)
im = ax.contourf(x, y, data, norm=LogNorm(), levels=levels)
fig.colorbar(im, ax=ax)
plt.savefig(""/tmp/mpl_logcontours_bug2.png"")
```

![mpl_logcontours_bug2](https://user-images.githubusercontent.com/14075922/113481210-80191780-9498-11eb-8d4c-ae34824841f6.png)


**Expected outcome**

The experience should be comparable with what happens when the norm isn't specified: the `levels` kwarg should be usable in both cases.
I note that the output from the first snippet is consistent with the case where neither `levels` or `norm` are specified, and is correct in that case, so it's definetely not _completely broken_ and I hope the fix is somewhat straightforward.

I'm happy to take a look at the source and see if I can come up with an easy patch, but I'm not sure when I'll have time to dive in there myself. Any piece advice from maintainers or contributors is more than welcome !

**Matplotlib version**

  * Operating system: MacOS
  * Matplotlib version (`import matplotlib; print(matplotlib.__version__)`): 3.4.1
  * Matplotlib backend (`print(matplotlib.get_backend())`): `module://ipykernel.pylab.backend_inline`
  * Python version: 3.9.1
  * Jupyter version (if applicable): NA
  * Other libraries: 

I installed matplotlib using pip.",neutrinoceros,open,2021-04-03 14:32:13,,,,2021-04-05 19:49:12,10,,,
849486963,Correct handle default backend.,"See comments in `matplotlib/__init__.py` and `setup.py`.  Test
by updating your local repo to this branch and `pip install
git+file:///path/to/repo` (doing so with the current master throws
`ValueError: Key backend: '' is not a valid value for backend`.

Closes #19848, see #19854 for an alternate approach, but see also https://github.com/matplotlib/matplotlib/pull/19854#issuecomment-812717296.

## PR Summary

## PR Checklist

<!-- Please mark any checkboxes that do not apply to this PR as [N/A]. -->

- [ ] Has pytest style unit tests (and `pytest` passes).
- [ ] Is [Flake 8](https://flake8.pycqa.org/en/latest/) compliant (run `flake8` on changed files to check).
- [ ] New features are documented, with examples if plot related.
- [ ] Documentation is sphinx and numpydoc compliant (the docs should [build](https://matplotlib.org/devel/documenting_mpl.html#building-the-docs) without error).
- [ ] Conforms to Matplotlib style conventions (install `flake8-docstrings` and run `flake8 --docstring-convention=all`).
- [ ] New features have an entry in `doc/users/next_whats_new/` (follow instructions in README.rst there).
- [ ] API changes documented in `doc/api/next_api_changes/` (follow instructions in README.rst there).

<!--
Thank you so much for your PR!  To help us review your contribution, please
consider the following points:

- A development guide is available at https://matplotlib.org/devdocs/devel/index.html.

- Help with git and github is available at
  https://matplotlib.org/devel/gitwash/development_workflow.html.

- Do not create the PR out of master, but out of a separate branch.

- The PR title should summarize the changes, for example ""Raise ValueError on
  non-numeric input to set_xlim"".  Avoid non-descriptive titles such as
  ""Addresses issue #8576"".

- The summary should provide at least 1-2 sentences describing the pull request
  in detail (Why is this change required?  What problem does it solve?) and
  link to any relevant issues.

- If you are contributing fixes to docstrings, please pay attention to
  http://matplotlib.org/devel/documenting_mpl.html#formatting.  In particular,
  note the difference between using single backquotes, double backquotes, and
  asterisks in the markup.

We understand that PRs can sometimes be overwhelming, especially as the
reviews start coming in.  Please let us know if the reviews are unclear or
the recommended next step seems overly demanding, if you would like help in
addressing a reviewer's comments, or if you have been waiting too long to hear
back on your PR.
-->
",anntzer,closed,2021-04-02 21:15:05,,2021-04-03 11:27:59,dstansby,2021-04-03 13:30:10,3,"Build, Release critical, topic: rcparams",v3.5.0,59
849481058,Fix default backend,"## PR Summary

- makes the source installed and real-install matplotlibrc identical
- be forgiving of empty backend value and treat the same as _no_ backend entry.

## PR Checklist

<!-- Please mark any checkboxes that do not apply to this PR as [N/A]. -->

- [x] Has pytest style unit tests (and `pytest` passes).  (this is an import bug)
- [x] Is [Flake 8](https://flake8.pycqa.org/en/latest/) compliant (run `flake8` on changed files to check).
- [x] Conforms to Matplotlib style conventions (install `flake8-docstrings` and run `flake8 --docstring-convention=all`).
",tacaswell,closed,2021-04-02 20:59:40,,2021-04-02 22:35:25,tacaswell,2021-04-02 22:35:40,3,,unassigned,15
849470436,Consistent corner variables names in widgets.py,"Both in other places in `widgets.py`, and in `patches.py`, it is convention to use `x0, y0` for the lower left corner of a rectangle, and `x1, y1` for the upper right.

This PR converts a few places in `widgets.py` to this convention for easy of readability.",dstansby,closed,2021-04-02 20:35:59,,2021-04-02 23:06:19,tacaswell,2021-04-06 00:48:37,0,"Maintenance, widgets/UI",v3.5.0,59
849385043,DOC: make all images hi-DPI,"## PR Summary

Right now all our gallery images are 100 dpi; I know this won't speed up loading the thumbnails, but, 100 dpi looks pretty bad on a 200 dpi screen.    Note there is a css change to account for the larger native size.  I don't understand where 70% comes from...

## PR Checklist

<!-- Please mark any checkboxes that do not apply to this PR as [N/A]. -->

- [ ] Has pytest style unit tests (and `pytest` passes).
- [ ] Is [Flake 8](https://flake8.pycqa.org/en/latest/) compliant (run `flake8` on changed files to check).
- [ ] New features are documented, with examples if plot related.
- [ ] Documentation is sphinx and numpydoc compliant (the docs should [build](https://matplotlib.org/devel/documenting_mpl.html#building-the-docs) without error).
- [ ] Conforms to Matplotlib style conventions (install `flake8-docstrings` and run `flake8 --docstring-convention=all`).
- [ ] New features have an entry in `doc/users/next_whats_new/` (follow instructions in README.rst there).
- [ ] API changes documented in `doc/api/next_api_changes/` (follow instructions in README.rst there).

<!--
Thank you so much for your PR!  To help us review your contribution, please
consider the following points:

- A development guide is available at https://matplotlib.org/devdocs/devel/index.html.

- Help with git and github is available at
  https://matplotlib.org/devel/gitwash/development_workflow.html.

- Do not create the PR out of master, but out of a separate branch.

- The PR title should summarize the changes, for example ""Raise ValueError on
  non-numeric input to set_xlim"".  Avoid non-descriptive titles such as
  ""Addresses issue #8576"".

- The summary should provide at least 1-2 sentences describing the pull request
  in detail (Why is this change required?  What problem does it solve?) and
  link to any relevant issues.

- If you are contributing fixes to docstrings, please pay attention to
  http://matplotlib.org/devel/documenting_mpl.html#formatting.  In particular,
  note the difference between using single backquotes, double backquotes, and
  asterisks in the markup.

We understand that PRs can sometimes be overwhelming, especially as the
reviews start coming in.  Please let us know if the reviews are unclear or
the recommended next step seems overly demanding, if you would like help in
addressing a reviewer's comments, or if you have been waiting too long to hear
back on your PR.
-->
",jklymak,open,2021-04-02 18:16:35,,,,2021-04-02 20:15:35,4,Documentation,,
849355833,imshow with LogNorm and large data ranges: pixelation and crashes,"<!--To help us understand and resolve your issue, please fill out the form to the best of your ability.-->
<!--You can feel free to delete the sections that do not apply.-->

### Bug report

**Bug summary**

Using `imshow` with `LogNorm` scaling and a large range results in pixelation and crashes. This is related to Issue #18415 but the fix that went in there doesn't seem to be general enough.

**Code for reproduction**

```python
import numpy as np
import matplotlib.pyplot as plt
from matplotlib.colors import LogNorm

data = np.full((500, 500), 1e30, dtype=np.float64)
data[0:250, :] = 1e12

fig, ax = plt.subplots()
im = ax.imshow(data, norm=LogNorm())
plt.colorbar(im)
plt.show()
```

Results in 

![Screenshot from 2021-04-02 11-59-57](https://user-images.githubusercontent.com/22038879/113436808-00614f00-93ab-11eb-9e22-6fbe887b3404.png)


**Expected outcome**

Outcome should be similar to the case with a slightly smaller data range:

```python
data = np.full((500, 500), 1e30, dtype=np.float64)
data[0:250, :] = 1e13

fig, ax = plt.subplots()
im = ax.imshow(np.log10(data))
plt.colorbar(im)
plt.show()
```

![Screenshot from 2021-04-02 12-04-12](https://user-images.githubusercontent.com/22038879/113437067-8f6e6700-93ab-11eb-90c3-af5abc0e9f28.png)

An additional manifestation of this bug that causes a crash is when the data contains a zero point, the `vmin` rescaling still results in a 0 value even when setting `vmin`: 

```python
data = np.full((500, 500), 1e30, dtype=np.float64)
data[0:250, :] = 1e12
data[0,0] = 0.

fig, ax = plt.subplots()
im = ax.imshow(data, norm=LogNorm(vmin=1e12, vmax=1e30))
plt.show()
```

results in 

```
~/.pyenv/versions/3.8.0/envs/sandbox/lib/python3.8/site-packages/matplotlib/colors.py in __call__(self, value, clip)
   1463             t_vmin, t_vmax = self._trf.transform([self.vmin, self.vmax])
   1464             if not np.isfinite([t_vmin, t_vmax]).all():
-> 1465                 raise ValueError(""Invalid vmin or vmax"")
   1466             t_value -= t_vmin
   1467             t_value /= (t_vmax - t_vmin)

ValueError: Invalid vmin or vmax
```

Using a smaller range for `vmin` and `vmax` avoids the error but results in a pixelated plot:

```python
data = np.full((500, 500), 1e30, dtype=np.float64)
data[0:250, :] = 1e12
data[0,0] = 0.

fig, ax = plt.subplots()
im = ax.imshow(data, norm=LogNorm(vmin=1e20, vmax=1e30))
plt.show()
```
![Screenshot from 2021-04-02 12-10-02](https://user-images.githubusercontent.com/22038879/113437517-600c2a00-93ac-11eb-89b0-ce0caf4a8af3.png)

**Matplotlib version**
matplotlib 3.4.1


",chrishavlin,closed,2021-04-02 17:36:47,,2021-04-02 18:17:15,jklymak,2021-04-02 18:17:23,2,status: duplicate,,
849295248,Deprecation warning when building API doc for Polygon subclass,"We started seeing deprecation warning while building doc and unfortunately we have set ReadTheDocs build to fail on warnings. After some investigation, it turned out that this is the perfect storm of the following conditions:

1. We have a class inheriting from `matplotlib.patches.Polygon`.
2. Sphinx automatically inherits docstrings for subclasses, which is desirable for this case.
3. We use a Sphinx extension calling [getattr(obj, attr, *defargs)](https://github.com/astropy/sphinx-automodapi/blob/f66e58254e58220f49a30b6c66280d8e2d940c9e/sphinx_automodapi/autodoc_enhancements.py#L71).
4. You have deprecated `validCap` and `validJoin` here:

https://github.com/matplotlib/matplotlib/blob/7f9d84a0603424917a521df03cb96a23696ae001/lib/matplotlib/patches.py#L42-L52

I am not sure what is the best fix. I can maybe overwrite the docstring of those two methods in subclasses but it is not elegant. Advise is appreciated. Thanks!

xref astropy/astropy#11458 and astropy/sphinx-automodapi#125",pllim,closed,2021-04-02 15:53:27,,2021-04-02 16:00:19,jklymak,2021-04-02 16:00:26,1,status: duplicate,,
849001640,FIX DateFormatter for month names when usetex=True,"## PR Summary
close #19836

Although a little bit clumsy, this PR can serve as the interim solution to the format of month names when usetex=True. At a long term, some alternative way should be considered, as proposed by @anntzer.

## PR Checklist

<!-- Please mark any checkboxes that do not apply to this PR as [N/A]. -->

- [x] Has pytest style unit tests (and `pytest` passes).
- [x] Is [Flake 8](https://flake8.pycqa.org/en/latest/) compliant (run `flake8` on changed files to check).
- [N/A] New features are documented, with examples if plot related.
- [x] Documentation is sphinx and numpydoc compliant (the docs should [build](https://matplotlib.org/devel/documenting_mpl.html#building-the-docs) without error).
- [x] Conforms to Matplotlib style conventions (install `flake8-docstrings` and run `flake8 --docstring-convention=all`).
- [N/A] New features have an entry in `doc/users/next_whats_new/` (follow instructions in README.rst there).
- [N/A] API changes documented in `doc/api/next_api_changes/` (follow instructions in README.rst there).

<!--
Thank you so much for your PR!  To help us review your contribution, please
consider the following points:

- A development guide is available at https://matplotlib.org/devdocs/devel/index.html.

- Help with git and github is available at
  https://matplotlib.org/devel/gitwash/development_workflow.html.

- Do not create the PR out of master, but out of a separate branch.

- The PR title should summarize the changes, for example ""Raise ValueError on
  non-numeric input to set_xlim"".  Avoid non-descriptive titles such as
  ""Addresses issue #8576"".

- The summary should provide at least 1-2 sentences describing the pull request
  in detail (Why is this change required?  What problem does it solve?) and
  link to any relevant issues.

- If you are contributing fixes to docstrings, please pay attention to
  http://matplotlib.org/devel/documenting_mpl.html#formatting.  In particular,
  note the difference between using single backquotes, double backquotes, and
  asterisks in the markup.

We understand that PRs can sometimes be overwhelming, especially as the
reviews start coming in.  Please let us know if the reviews are unclear or
the recommended next step seems overly demanding, if you would like help in
addressing a reviewer's comments, or if you have been waiting too long to hear
back on your PR.
-->
",smartlixx,open,2021-04-02 06:33:14,,,,2021-04-02 08:43:53,0,,,
848834442,ValueError: Key backend: '' is not a valid value for backend,"<!--To help us understand and resolve your issue, please fill out the form to the best of your ability.-->
<!--You can feel free to delete the sections that do not apply.-->

### Bug report

I am actually not sure if this is a bug. It started happening today for `matplotlib` installed from your `master` branch for our CI. We run some [image tests using your dev version on CircleCI](https://github.com/astropy/astropy/blob/ef31833d826374721a727ad9c427124ffaf693d2/.circleci/config.yml#L38-L50), which uses [our tox.ini](https://github.com/astropy/astropy/blob/master/tox.ini) and some settings in [astropy/conftest.py](https://github.com/astropy/astropy/blob/master/astropy/conftest.py).

It starts to complain about no backend even though we set it at [astropy/conftest.py#L84](https://github.com/astropy/astropy/blob/ef31833d826374721a727ad9c427124ffaf693d2/astropy/conftest.py#L84) and that works for older versions of `matplotlib`.

```
INTERNALERROR>   File "".../matplotlib/__init__.py"", line 843, in <module>
INTERNALERROR>     fail_on_error=True)
INTERNALERROR>   File "".../matplotlib/__init__.py"", line 773, in _rc_params_in_file
INTERNALERROR>     config[key] = val  # try to convert to proper type or raise
INTERNALERROR>   File "".../matplotlib/__init__.py"", line 607, in __setitem__
INTERNALERROR>     raise ValueError(f""Key {key}: {ve}"") from None
INTERNALERROR> ValueError: Key backend: '' is not a valid value for backend; supported values are
['GTK3Agg', 'GTK3Cairo', 'MacOSX', 'nbAgg', 'Qt4Agg', 'Qt4Cairo', 'Qt5Agg', 'Qt5Cairo',
'TkAgg', 'TkCairo', 'WebAgg', 'WX', 'WXAgg', 'WXCairo', 'agg', 'cairo', 'pdf', 'pgf', 'ps', 'svg', 'template']
```

<!--A short 1-2 sentences that succinctly describes the bug-->

**Code for reproduction**

<!--A minimum code snippet required to reproduce the bug.
Please make sure to minimize the number of dependencies required, and provide
any necessary plotted data.
Avoid using threads, as Matplotlib is (explicitly) not thread-safe.-->

We can reproduce it on both GitHub Actions and CircleCI using tox + pytest but only with the dev version of matplotlib.

**Actual outcome**

See traceback above.

**Expected outcome**

It does not throw `ValueError`.

**Matplotlib version**
<!--Please specify your platform and versions of the relevant libraries you are using:-->
  * Operating system: Ubuntu on Actions, some Linux image on CircleCI
  * Matplotlib version (`import matplotlib; print(matplotlib.__version__)`): matplotlib @ git+https://github.com/matplotlib/matplotlib.git@cc8669fc69b0cc618336a17d324f5fdbf1922f22 (reported by CircleCI)
  * Matplotlib backend (`print(matplotlib.get_backend())`): Agg but somehow not registering (see above)
  * Python version: 3.7
  * Jupyter version (if applicable): N/A
  * Other libraries: There is a list on [CircleCI log under pip freeze](https://app.circleci.com/pipelines/github/astropy/astropy/4490/workflows/6451c29d-5f29-4ab4-a66f-12ca078f0ca5/jobs/86017)

<!--Please tell us how you installed matplotlib and python e.g., from source, pip, conda-->
<!--If you installed from conda, please specify which channel you used if not the default-->

Also, the [Actions log](https://github.com/astropy/astropy/runs/2246637843?check_suite_focus=true).

xref astropy/astropy#11458",pllim,closed,2021-04-01 22:41:13,,2021-04-03 11:27:59,dstansby,2021-04-03 11:27:59,8,Release critical,v3.5.0,59
848824065,Reformat references (part 2),"Follow-up to #19788 / #19774.

My original search pattern did not find all usages of the old references format.",timhoffm,closed,2021-04-01 22:17:48,,2021-04-05 19:45:24,jklymak,2021-04-05 20:21:57,0,Documentation,v3.4.2,63
848814364,Backport PR #19788 on branch v3.4.x (Reformat references),Backport PR #19788: Reformat references,meeseeksmachine,closed,2021-04-01 21:56:19,,2021-04-02 19:33:00,timhoffm,2021-04-02 19:33:00,0,,v3.4.2,63
848814298,Backport PR #19788 on branch v3.4.1-doc (Reformat references),Backport PR #19788: Reformat references,meeseeksmachine,closed,2021-04-01 21:56:11,,2021-04-02 23:09:37,tacaswell,2021-04-02 23:09:37,0,,v3.4-doc,62
848801760,matplotlib 3.4.0 bug with 3D scatter plots and array of different marker sizes,"On Windows 10 with matplotlib 3.4.0, when using the mouse to manually rotate a 3D scatter plot with an array of different marker sizes, all marker sizes vary visibly, by a lot. Although I encountered this problem with my own code, the very same problem can be shown with the public example https://likegeeks.com/3d-plotting-in-python/#Plot_markers_of_varying_size 

Reverting to matplotlib 3.3.1 fixes the problem, proving that it is a new bug in matplotlib 3.4.0.

Thanks",demconpeter,closed,2021-04-01 21:29:29,,2021-04-01 21:31:29,jklymak,2021-04-01 21:31:35,1,status: duplicate,,
848739057,collection with alpha + colorer,"### Bug report

**Bug summary**

The newest version of matplotlib supports non-constant alpha values for collections, which is awesome. Unfortunately it seems that it breaks when used in combination with a colorbar

**Code for reproduction**

The code here works fine if either line with `#ALPHA` or `#CBAR` is commented out, but it breaks if they're both active
```python
import matplotlib.pyplot as plt
from matplotlib.collections import LineCollection
import numpy as np

fig, ax = plt.subplots()

x1 = x2 = x3 = np.linspace(0, 1, 10)
alpha = np.clip((1 - x3), 0.1, 1)

points = np.array([x1, x2]).T.reshape(-1, 1, 2)
segments = np.concatenate([points[:-1], points[1:]], axis=1)

lc = LineCollection(
    segments,
    lw=10,
    alpha=alpha,      # ALPHA
)
line = ax.add_collection(lc)

fig.colorbar(line)    # CBAR
```

**Actual outcome**

```
ValueError: Data array shape, (256,) is incompatible with alpha array shape, (10,). This can 
occur with the deprecated behavior of the ""flat"" shading option, in which a row and/or column
of the data array is dropped.
...
AttributeError: 'NoneType' object has no attribute 'reshape'
```

**Expected outcome**

I guess the most intuitive behaviour would be that the colobar ignored the alpha parameter altogether, but that might create api inconsistencies because it looks like it works fine with constant values. (modulo that the collection object has be processed with e.g. `line.set_array(x1)`).

If no universally satisfying behaviour can be implemented, I guess the error that pops up should at least acknowledge what the real issue is.

**Matplotlib version**

  * Operating system: MacOS
  * Matplotlib version (`import matplotlib; print(matplotlib.__version__)`): 3.4.1
  * Matplotlib backend (`print(matplotlib.get_backend())`): `module://ipykernel.pylab.backend_inline`
  * Python version: 3.9.1
  * Jupyter version (if applicable): NA
  * Other libraries: 

I installed matplotlib using pip
",neutrinoceros,open,2021-04-01 19:42:20,,,,2021-04-02 07:24:04,3,"topic: color/alpha, topic: color/color & colormaps",,
848677883,"UserWarning: ""Trying to register the cmap '...' which already exists"" is not very helpful.","### Describe the issue

Matplotlib 3.4 introduces a UserWarning with 1a9dacff1cb when attempting to register a color map by the same name twice.  So for a lame luser like myself, how am I to know if my colormap name has already been registered?  Is there public API to check if a given cmap name exists? 

### Proposed fix

Presently, I only see this option via ""private"" API to check this situation

```python
from matplotlib import cm

def cmap_exists(name):
     return name in cm.__builtin_cmaps
```

Otherwise, there would be this lame workaround

```python
from matplotlib import cm

def cmap_exists(name):
    try:
         cm.get_cmap(name)
         return True
    except ValueError:
         pass
    return False
```

Hopefully I am not missing something obvious.  If something exists, it would be nice to enhance the UserWarning by saying ""Trying to register the cmap {name!r} which already exists. Please first check presence of cmap by calling `cm.cmap_exists(name)`""

Thank you!",akrherz,closed,2021-04-01 18:05:28,,2021-04-02 23:25:46,timhoffm,2021-04-02 23:25:46,5,"Maintenance, topic: color/color & colormaps",v3.5.0,59
847784460,basic units example's subclassing is broken,"### Bug report

**Bug summary**

In `basic_units.py`, the `TaggedValue` has a `__new__` method that does the following:
https://github.com/matplotlib/matplotlib/blob/f710ad321b06b4b26137a51fd282436db8033f36/examples/units/basic_units.py#L120-L128

However, when `value_class` is not `object`, then `object.__new__(subcls)` raises:
```ipython
In [1]: class A: 
   ...:     def __new__(cls, value): 
   ...:         value_class = type(value) 
   ...:         subcls = type(f'A_{value_class.__name__}', (cls, value_class), {}) 
   ...:         return object.__new__(subcls) 
   ...:                                                                                                                                     

In [2]: A(object())                                                                                                                         
Out[2]: <__main__.A_object at 0x7f9ce8a684c0>

In [3]: A(1.0)                                                                                                                              
---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
<ipython-input-6-04f0da727658> in <module>
----> 1 A(1.0)

<ipython-input-5-3b6ef5f2aee2> in __new__(cls, value)
      3         value_class = type(value)
      4         subcls = type(f'A_{value_class.__name__}', (cls, value_class), {})
----> 5         return object.__new__(subcls)
      6 

TypeError: object.__new__(A_float) is not safe, use float.__new__()
```

This means that the intended subclassing there never happens, as it falls back to the generic `object.__new__` in the exception handler. I came across this while trying to fix #19535 with a conditional method, but of course, that never worked because the code always ended up using the generic non-subclass.

I tried to fix this by doing `super().__new__` or `value_class.__new__` (and then some `object.<method>` needed to be `super().<method>` in other methods), but this runs into issues with other classes that also override `__new__`, namely `MaskedArray`.

I think it makes sense to create subclasses (and then fix it so it actually leaves out methods that shouldn't be there), but I'm not sure that multiple inheritance is the right way to do it.

**Matplotlib version**
  * Matplotlib version (`import matplotlib; print(matplotlib.__version__)`): `master` at the moment
  * Matplotlib backend (`print(matplotlib.get_backend())`): n/a
  * Python version: 3.7.6",QuLogic,open,2021-04-01 02:59:28,,,,2021-04-01 02:59:28,0,"Documentation, topic: units",,
847566361,Axes.bar_label(...) Not Working: axes has no attribute,"

### Bug report

**Bug summary**

The code presented in the documentation at : https://matplotlib.org/stable/gallery/lines_bars_and_markers/horizontal_barchart_distribution.html
does not work, it gives an AttributeError. I experience this on collab as well as my PC

See the above doc for code to reproduce

```
AttributeError: 'AxesSubplot' object has no attribute 'bar_label'
```

**Expected outcome**
See the linked docs

**Matplotlib version**
MatPlotlib 3.3.2
  * Operating system: Windows 10
  * Matplotlib version (`import matplotlib; print(matplotlib.__version__)`): 
  * Matplotlib backend :  Qt5Agg
  * Python version: 3.8.5
  * Jupyter version: whatever Colab is using

",DavidD003,closed,2021-03-31 23:58:59,,2021-04-01 00:05:11,jklymak,2021-04-03 15:43:52,1,,,
847152986,"Subclasses of Polygon with numpydoc xref throws error b/c of CapStyle, JoinStyle","<!--To help us understand and resolve your issue, please fill out the form to the best of your ability.-->
<!--You can feel free to delete the sections that do not apply.-->

### Problem

The sphinx links to `CapStyle`  and `JoinStyle` in v3.4.0 are relative to the file, so a subclass of `matplotlib.patches.Patch` in a package with numpydoc xref (https://numpydoc.readthedocs.io/en/latest/install.html) turned on cannot link to the objects and errors with.
```WARNING: py:obj reference target not found: CapStyle```
```WARNING: py:obj reference target not found: JoinStyle```

https://matplotlib.org/stable/api/_as_gen/matplotlib.patches.Patch.html#matplotlib.patches.Patch.set_capstyle
https://matplotlib.org/stable/api/_as_gen/matplotlib.patches.Patch.html#matplotlib.patches.Patch.set_joinstyle

```
   @docstring.interpd
    def set_capstyle(self, s):
        """"""
        Set the `.CapStyle`.

        Parameters
        ----------
        s : `.CapStyle` or %(CapStyle)s
        """"""
        cs = CapStyle(s)
        self._capstyle = cs
        self.stale = True
```

**Edit:**

The problem also appears to involve ``Patches.__init__``. I can monkey-patch a fix with 

```
Polygon.__init__.__doc__ = Polygon.__init__.__doc__.replace(
    ""`.CapStyle`"", ""``matplotlib._enums.CapStyle``"")
Polygon.__init__.__doc__ = Polygon.__init__.__doc__.replace(
    ""`.JoinStyle`"", ""``matplotlib._enums.JoinStyle``"")
Polygon.set_capstyle.__doc__ = Polygon.set_capstyle.__doc__.replace(
    ""`.CapStyle`"", ""``matplotlib._enums.CapStyle``"")
Polygon.set_joinstyle.__doc__ = Polygon.set_joinstyle.__doc__.replace(
    ""`.JoinStyle`"", ""``matplotlib._enums.JoinStyle``"")
```

### Suggested Improvement

* This line could be be changed to say
```
   @docstring.interpd
    def set_capstyle(self, s):
        """"""
        Set the `~matplotlib._enums.CapStyle`.

        Parameters
        ----------
        s : `~matplotlib._enums.CapStyle` or %(CapStyle)s
        """"""
        cs = CapStyle(s)
        self._capstyle = cs
        self.stale = True
```

<!--
If you have an idea to improve the documentation please suggest it here

* This line should be be changed to say [...]
* Include a paragraph explaining [...]
* Add a figure showing [...]
-->

**Matplotlib version**
<!--Please specify the version of matplotlib and the version of the documentation that you are using:-->
  * Operating system: Big Sur & Ubuntu
  * Matplotlib version 3.4.0
  * Matplotlib documentation version (is listed under the logo): 3.4.0
",nstarman,open,2021-03-31 19:03:22,,,,2021-04-03 18:02:43,5,Documentation,v3.4.2,63
846904528,Unexpected behaviour of imshow default interpolation,"<!--To help us understand and resolve your issue, please fill out the form to the best of your ability.-->
<!--You can feel free to delete the sections that do not apply.-->

### Bug report

**Bug summary**

Artifacts appear when plotting periodic data with discontinuities, i.e. something like x mod 1.0   
The bug appears at when render resolution is relatively small comparing to the real resolution of the data (downsampling problem?).


**Code for reproduction**

<!--A minimum code snippet required to reproduce the bug.
Please make sure to minimize the number of dependencies required, and provide
any necessary plotted data.
Avoid using threads, as Matplotlib is (explicitly) not thread-safe.-->

```python
import numpy as np
import matplotlib.pyplot as plt

xx, yy = np.meshgrid(np.linspace(-5, 5, 201), np.linspace(-5, 5, 201))
psi = xx % 1.0

plt.figure()
plt.imshow(psi, cmap=""twilight"")
plt.savefig(""small.png"", dpi=100)
plt.savefig(""large.png"", dpi=200)
```

**Outcome**

 

<img src=""https://user-images.githubusercontent.com/11896426/113173843-173c6000-924a-11eb-907f-3bb546a0941b.png""  alt=""alt text"" width=""40%""> <img src=""https://user-images.githubusercontent.com/11896426/113173851-199eba00-924a-11eb-95b4-97b2b6262ed7.png""  alt=""alt text"" width=""40%""> 

(large.png, small.png)

**Matplotlib version**

The issue is repeatable locally and in CoLab:

<!--Please specify your platform and versions of the relevant libraries you are using:-->
  * Operating system: Linux
  * Matplotlib version: 3.3.3, 3.2.2
  * Matplotlib backend (): TkAgg, ipykernel.pylab.backend_inline 
  * Python version: 3.8.5, 3.7

",Trel725,closed,2021-03-31 16:02:08,,2021-03-31 21:39:32,QuLogic,2021-03-31 21:39:32,2,"status: duplicate, topic: images",v3.5.0,59
846533444,FloatingPointError (underflow) during violinplot,"Matplotlib: 3.3.4
Matplotlib backend: Agg
Numpy: 1.20.1
OS: linux-gnu
Python: 3.9.2
[Data file download link](https://drive.google.com/file/d/1DY5n13N_mlJmruU5xxiL4xssmRBmg2VV/view?usp=sharing) 

I have a pipeline that involves generating violin plots and am commonly getting this exception thrown when the number of data points in one violin exceeds around 1000. For example, with array lengths of 2500 or 3500. 

Stack trace:
```
>>> plt.violinplot([problem_array])
Traceback (most recent call last):
  File ""/om2/user/mjgroth/miniconda3/envs/dnn39/lib/python3.9/code.py"", line 90, in runcode
    exec(code, self.locals)
  File ""<console>"", line 1, in <module>
  File ""/om2/user/mjgroth/miniconda3/envs/dnn39/lib/python3.9/site-packages/matplotlib/pyplot.py"", line 3069, in violinplot
    return gca().violinplot(
  File ""/om2/user/mjgroth/miniconda3/envs/dnn39/lib/python3.9/site-packages/matplotlib/__init__.py"", line 1447, in inner
    return func(ax, *map(sanitize_sequence, args), **kwargs)
  File ""/om2/user/mjgroth/miniconda3/envs/dnn39/lib/python3.9/site-packages/matplotlib/axes/_axes.py"", line 7858, in violinplot
    vpstats = cbook.violin_stats(dataset, _kde_method, points=points,
  File ""/om2/user/mjgroth/miniconda3/envs/dnn39/lib/python3.9/site-packages/matplotlib/cbook/__init__.py"", line 1482, in violin_stats
    stats['vals'] = method(x, coords)
  File ""/om2/user/mjgroth/miniconda3/envs/dnn39/lib/python3.9/site-packages/matplotlib/axes/_axes.py"", line 7856, in _kde_method
    return kde.evaluate(coords)
  File ""/om2/user/mjgroth/miniconda3/envs/dnn39/lib/python3.9/site-packages/matplotlib/mlab.py"", line 1108, in evaluate
    result[i] = np.sum(np.exp(-energy), axis=0)
FloatingPointError: underflow encountered in exp
```

I've set a breakpoint in the `except` clause to play around with this, and discovered that it occurs 100% of the time if I retry with the same data at the breakpoint. On the other hand, most other arrays work fine (including other arrays that are larger).

The next thing I tried to do was make this problem reproducible, but I've been having so much trouble here. First I saved the problem array to a pickle file, which I've attached at the top.  Next, I downloaded the pickle to my local machine and ran the following: 
```python
import matplotlib.pyplot as plt
import pickle
import numpy as np
import matplotlib
matplotlib.rcParams[""backend""] = 'Agg'
if __name__ == '__main__':
    with open('problem_array.pkl', 'rb') as f:
        problem_array = pickle.load(f)
    print(f'len:{len(problem_array)}')
    print(f'min:{min(problem_array)}')
    print(f'max:{max(problem_array)}')
    print(f'num NaNs:{len([n for n in problem_array if np.isnan(n)])}')
    print(f'num floats:{len([n for n in problem_array if isinstance(n,float)])}')
    print(f'backend:{matplotlib.rcParams[""backend""]}')
    plt.violinplot([problem_array])
    plt.show()
```

And unfortunately, there was no exception. Output:
```
len:3600
min:0.5916151710066876
max:1.3002891240514034
num NaNs:0
num floats:3600
backend:agg
```

Next, thinking this would have to work, I uploaded this script to the machine where the problem is occurring. I ran it there with the same exact pickle file, and to my frustration the exception still did not occur again. So reproducibility is by far the biggest issue here. Clearly something in my pipeline is causing this bug to occur, but tearing it apart will be a huge process and I wouldn't know where to start. I've even set the breakpoint where the bug is occurring, downloaded the data file attached here, and tried to use `plt.violinplot(data)` right at that spot, and interestingly, **the error does occur here!**. The analysis pipeline is somewhat randomized and so the error doesn't occur every time. But since I have a breakpoint in the `except` clause of my `try` statement I can at least play around with it whenever it happens again. 

Any further troubleshooting tips would be great.",mgroth0,closed,2021-03-31 12:05:31,,2021-03-31 14:18:46,jklymak,2021-04-02 23:47:25,4,status: needs clarification,,
846320250,Month names not set as text when using usetex,"<!--To help us understand and resolve your issue, please fill out the form to the best of your ability.-->
<!--You can feel free to delete the sections that do not apply.-->

### Bug report

From the image in the release notes for matplotlib 3.4 here:
https://matplotlib.org/stable/users/whats_new.html#date-formatters-now-respect-usetex-rcparam

The dateformatter does not use text mode for the month names but sets them like `$Aug$`. Which is bad typography, since it will be typeset as the mathematical expression `A * u * g`, not the text `Aug`.",maxnoe,open,2021-03-31 09:52:50,,,,2021-04-01 05:07:12,2,"topic: date handling, topic: text/usetex",,
846108504,Merge v3.4.x into master,"Only a couple minor conflicts from the backports, deletion of the individual release notes, and new code from #19816, which was originally only needed on that branch due to other changes.",QuLogic,closed,2021-03-31 07:44:57,,2021-03-31 18:52:57,tacaswell,2021-03-31 18:54:32,1,Maintenance,v3.5.0,59
845906403,Backport PR #19812: FIX: size and color rendering for Path3DCollection,,QuLogic,closed,2021-03-31 05:25:15,,2021-03-31 06:16:58,QuLogic,2021-03-31 06:17:39,0,,v3.4.1,61
845804564,Backport PR #19811 on branch v3.4.x (Fix Inkscape cleanup at exit on Windows.),Backport PR #19811: Fix Inkscape cleanup at exit on Windows.,meeseeksmachine,closed,2021-03-31 04:04:39,,2021-03-31 05:38:38,QuLogic,2021-03-31 05:38:38,0,,v3.4.1,61
845728666,Positioning floating_axes.FloatingSubplot,"<!--To help us understand and resolve your issue, please fill out the form to the best of your ability.-->
<!--You can feel free to delete the sections that do not apply.-->

### Bug report

**Bug summary**

In a previous version of matplotlib, I was able to reposition and stretch a curvilinear coordinate axis created with floating_axes.FloatingSubplot after the axis has been created using Dividers and ```ax.set_axes_locator()```. Now in matplotlib version 3.3.4 I can only get the axis to translate, but not stretch.

**Code for reproduction**

```python
#!/usr/bin/env python3
from matplotlib import pyplot as plt
from matplotlib.transforms import Affine2D, Transform
import mpl_toolkits.axisartist.floating_axes as floating_axes
from matplotlib.projections import polar
from mpl_toolkits.axisartist.grid_finder import FixedLocator, DictFormatter
import mpl_toolkits.axes_grid1.axes_size as Size
from mpl_toolkits.axes_grid1 import Divider

fig = plt.figure()

# Generate first axis using normal methods.
ax0 = fig.add_subplot(111)
ax0.set_xticks([0,500,1000,1500,2000])

# Generate a curvilear axis for the second axis.
angle_ticks     = [(0, '0'), (0.079, '500'), (0.157, '1000'), (0.235, '1500'), (0.314, '2000')]
grid_locator1   = FixedLocator([v for v, s in angle_ticks])
tick_formatter1 = DictFormatter(dict(angle_ticks))

alt_ticks       = [(6371.0, '0'), (6671.0, '300'), (6971.0, '600'), (7271.0, '900'), (7571.0, '1200')]
grid_locator2   = FixedLocator([v for v, s in alt_ticks])
tick_formatter2 = DictFormatter(dict(alt_ticks))

tr_rotate       = Affine2D().rotate(1.414)
tr_shift        = Affine2D().translate(0, 6371)
tr              = polar.PolarTransform() + tr_rotate

grid_helper = \
    floating_axes.GridHelperCurveLinear(tr, extremes=(0, 0.314, 6371, 7871),
                                        grid_locator1=grid_locator1,
                                        grid_locator2=grid_locator2,
                                        tick_formatter1=tick_formatter1,
                                        tick_formatter2=tick_formatter2,)

ax1 = floating_axes.FloatingSubplot(fig, 111, grid_helper=grid_helper)
ax1.invert_xaxis()
fig.add_subplot(ax1, transform=tr)

horiz   = [Size.Scaled(1.0)]
vert    = [Size.Scaled(1.0)]
ax0_div = Divider(fig,[0.0, 0.5, 1.0, 0.45],horiz,vert,aspect=False) # Rectangular Coordinates
ax1_div = Divider(fig,[0.0, 0.0, 1.0, 0.45],horiz,vert,aspect=False) # Curvilinear Coordinates

ax0_loc = ax0_div.new_locator(nx=0,ny=0) # Rectangular Coordinates
ax1_loc = ax1_div.new_locator(nx=0,ny=0) # Curvilinear Coordinates

ax0.set_axes_locator(ax0_loc) # Rectangular Coordinates
ax1.set_axes_locator(ax1_loc) # Curvilinear Coordinates

fig.savefig('bug_report.png',bbox_inches='tight')
```

**Actual outcome**

![bug_report](https://user-images.githubusercontent.com/1831182/113084188-7f883480-91ab-11eb-90b2-35b559d71e38.png)

**Expected outcome**

I expected to be able to stretch the curvilinear coordinate system so that its x-axis is aligned with the rectangular coordinate system. 

**Matplotlib version**
  * Operating system: Ubuntu 18.04 LTS
  * Matplotlib version: 3.3.4
  * Matplotlib backend: Qt5Agg
  * Python version: 3.7.7 (default, May  7 2020, 21:25:33) [GCC 7.3.0]

Matplotlib installed with anacond default linux installer.

",w2naf,open,2021-03-31 03:03:27,,,,2021-04-02 19:19:40,18,"status: confirmed bug, topic: mpl_toolkit",,
845321306,matplotlib version,"<!--To help us understand and resolve your issue, please fill out the form to the best of your ability.-->
<!--You can feel free to delete the sections that do not apply.-->

### Bug report

**Bug summary**

Trying to install scipy with 
pip install --user numpy scipy matplotlib ipython jupyter pandas sympy nose --no-warn-script-location

Get error message ending with:
AttributeError: module 'matplotlib' has no attribute '__version__'

**Code for reproduction**

<!--A minimum code snippet required to reproduce the bug.
Please make sure to minimize the number of dependencies required, and provide
any necessary plotted data.
Avoid using threads, as Matplotlib is (explicitly) not thread-safe.-->

```python
%conda uninstall matplotlib
%pip install --user numpy scipy matplotlib ipython jupyter pandas sympy nose --no-warn-script-location
```

**Actual outcome**

<!--The output produced by the above code, which may be a screenshot, console output, etc.-->

```
---------------------------------------------------------------------------
AttributeError                            Traceback (most recent call last)
~\Documents\Python_Scripts\startup.py in <module>
     15 from astropy.io.fits import getheader
     16 from astropy.io.fits import getdata
---> 17 from astropy.visualization import (MinMaxInterval, SqrtStretch, ImageNormalize)
     18 # conda config --add channels http://ssb.stsci.edu/astroconda

~\Anaconda3\lib\site-packages\astropy\visualization\__init__.py in <module>
      4 from .interval import *
      5 from .mpl_normalize import *
----> 6 from .mpl_style import *
      7 from .stretch import *
      8 from .transform import *

~\Anaconda3\lib\site-packages\astropy\visualization\mpl_style.py in <module>
      9 
     10 # This returns False if matplotlib cannot be imported
---> 11 MATPLOTLIB = minversion('matplotlib', __minimum_matplotlib_version__)
     12 
     13 

~\Anaconda3\lib\site-packages\astropy\utils\introspection.py in minversion(module, version, inclusive, version_path)
    141 
    142     if '.' not in version_path:
--> 143         have_version = getattr(module, version_path)
    144     else:
    145         have_version = resolve_name(module.__name__, version_path)

AttributeError: module 'matplotlib' has no attribute '__version__'
```

**Expected outcome**

<!--A description of the expected outcome from the code snippet-->
<!--If this used to work in an earlier version of Matplotlib, please note the version it used to work on-->

**Matplotlib version**
<!--Please specify your platform and versions of the relevant libraries you are using:-->
  * Operating system: 
  * Matplotlib version (`import matplotlib; print(matplotlib.__version__)`): 
  * Matplotlib backend (`print(matplotlib.get_backend())`): 
  * Python version: 
  * Jupyter version (if applicable): 
  * Other libraries: 

<!--Please tell us how you installed matplotlib and python e.g., from source, pip, conda-->
<!--If you installed from conda, please specify which channel you used if not the default-->

",aaastorrs,closed,2021-03-30 21:43:58,,2021-03-31 14:56:52,jklymak,2021-03-31 14:57:50,7,Community support,,
845283165,Backport PR #19824 on branch v3.4.x (Access pdf annotations while inside pikepdf.Pdf context manager.),Backport PR #19824: Access pdf annotations while inside pikepdf.Pdf context manager.,meeseeksmachine,closed,2021-03-30 21:17:12,,2021-03-31 00:11:17,QuLogic,2021-03-31 00:11:17,0,,v3.4.1,61
845229928,Backport PR #19822 on branch v3.4.x (Clarify default backend selection doc.),Backport PR #19822: Clarify default backend selection doc.,meeseeksmachine,closed,2021-03-30 20:41:43,,2021-03-30 21:46:44,QuLogic,2021-03-30 21:46:44,0,,v3.4.1,61
845229651,Backport PR #19822 on branch v3.4.0-doc (Clarify default backend selection doc.),Backport PR #19822: Clarify default backend selection doc.,meeseeksmachine,closed,2021-03-30 20:41:31,,2021-03-30 21:11:52,QuLogic,2021-03-30 21:11:52,0,,v3.4-doc,62
845196790,Backport PR #19805 on branch v3.4.x (Fix suptitle out of layout),Backport PR #19805: Fix suptitle out of layout,meeseeksmachine,closed,2021-03-30 20:20:03,,2021-03-30 21:24:17,QuLogic,2021-03-30 21:24:17,0,,v3.4.1,61
845070354,Wired internal DPI scaling ,"<!--To help us understand and resolve your issue, please fill out the form to the best of your ability.-->
<!--You can feel free to delete the sections that do not apply.-->

### Bug report

**Bug summary**

When the DPI value is set (e.g. when creating a new figure) it seems to be internally multiplied by 1355.

**Code for reproduction**

```python
import matplotlib.pyplot as plt
fig = plt.figure(dpi=100)
print(f""Actual set dpi value = {fig.dpi}"")
```

**Actual outcome**

<!--The output produced by the above code, which may be a screenshot, console output, etc.-->

```
$> python minimal_example.py 
Actual set dpi value = 135500.0
```

**Expected outcome**
The set dpi value of the figure should be 100.

**Matplotlib version**
  * Operating system: ($> uname -srvmpio) Linux 5.8.0-48-generic #54~20.04.1-Ubuntu SMP Sat Mar 20 13:40:25 UTC 2021 x86_64 x86_64 x86_64 GNU/Linux
  * Matplotlib version (`import matplotlib; print(matplotlib.__version__)`): 3.3.4
  * Matplotlib backend (`print(matplotlib.get_backend())`): Qt5Agg
  * Python version: 3.8.8

<!--Please tell us how you installed matplotlib and python e.g., from source, pip, conda-->
<!--If you installed from conda, please specify which channel you used if not the default-->

installed matplotlib with
```
conda install matplotlib
```

",CoffeeMugTwo,open,2021-03-30 18:57:09,,,,2021-03-30 19:21:14,1,Documentation,,
844865118,Factor out machinery for running subprocess tk tests.,"Probably it can also be shared with test_interactive_backends in the
future.

## PR Summary

## PR Checklist

<!-- Please mark any checkboxes that do not apply to this PR as [N/A]. -->

- [ ] Has pytest style unit tests (and `pytest` passes).
- [ ] Is [Flake 8](https://flake8.pycqa.org/en/latest/) compliant (run `flake8` on changed files to check).
- [ ] New features are documented, with examples if plot related.
- [ ] Documentation is sphinx and numpydoc compliant (the docs should [build](https://matplotlib.org/devel/documenting_mpl.html#building-the-docs) without error).
- [ ] Conforms to Matplotlib style conventions (install `flake8-docstrings` and run `flake8 --docstring-convention=all`).
- [ ] New features have an entry in `doc/users/next_whats_new/` (follow instructions in README.rst there).
- [ ] API changes documented in `doc/api/next_api_changes/` (follow instructions in README.rst there).

<!--
Thank you so much for your PR!  To help us review your contribution, please
consider the following points:

- A development guide is available at https://matplotlib.org/devdocs/devel/index.html.

- Help with git and github is available at
  https://matplotlib.org/devel/gitwash/development_workflow.html.

- Do not create the PR out of master, but out of a separate branch.

- The PR title should summarize the changes, for example ""Raise ValueError on
  non-numeric input to set_xlim"".  Avoid non-descriptive titles such as
  ""Addresses issue #8576"".

- The summary should provide at least 1-2 sentences describing the pull request
  in detail (Why is this change required?  What problem does it solve?) and
  link to any relevant issues.

- If you are contributing fixes to docstrings, please pay attention to
  http://matplotlib.org/devel/documenting_mpl.html#formatting.  In particular,
  note the difference between using single backquotes, double backquotes, and
  asterisks in the markup.

We understand that PRs can sometimes be overwhelming, especially as the
reviews start coming in.  Please let us know if the reviews are unclear or
the recommended next step seems overly demanding, if you would like help in
addressing a reviewer's comments, or if you have been waiting too long to hear
back on your PR.
-->
",anntzer,closed,2021-03-30 16:45:31,,2021-04-05 21:11:39,QuLogic,2021-04-05 21:28:12,0,"GUI/tk, Maintenance, topic: testing",v3.5.0,59
844622552,Access pdf annotations while inside pikepdf.Pdf context manager.,"Depending on the exact way the pdf file is written, iterating over
Annots can fail after the file has been closed.  This is not the case
for matplotlib-generated pdfs, but is the case for mplcairo-generated
ones.  As a simple repro of the different behavior between
""in-the-contextmanager"" and ""out-of-the-contextmanager"":
```python
from matplotlib import pyplot as plt
plt.figtext(.5, .5, ""hello, world"", url=""https://www.google.com"")
plt.savefig(""/tmp/test.pdf"", backend=""pdf"")
import pikepdf
with pikepdf.Pdf.open(""/tmp/test.pdf"") as pdf:
    page = pdf.pages[0]
    print(repr(page.Annots)) # within contextmanager: ok
with pikepdf.Pdf.open(""/tmp/test.pdf"") as pdf:
    page = pdf.pages[0]
print(repr(page.Annots))  # after contextmanager: AttributeError
```

## PR Summary

## PR Checklist

<!-- Please mark any checkboxes that do not apply to this PR as [N/A]. -->

- [ ] Has pytest style unit tests (and `pytest` passes).
- [ ] Is [Flake 8](https://flake8.pycqa.org/en/latest/) compliant (run `flake8` on changed files to check).
- [ ] New features are documented, with examples if plot related.
- [ ] Documentation is sphinx and numpydoc compliant (the docs should [build](https://matplotlib.org/devel/documenting_mpl.html#building-the-docs) without error).
- [ ] Conforms to Matplotlib style conventions (install `flake8-docstrings` and run `flake8 --docstring-convention=all`).
- [ ] New features have an entry in `doc/users/next_whats_new/` (follow instructions in README.rst there).
- [ ] API changes documented in `doc/api/next_api_changes/` (follow instructions in README.rst there).

<!--
Thank you so much for your PR!  To help us review your contribution, please
consider the following points:

- A development guide is available at https://matplotlib.org/devdocs/devel/index.html.

- Help with git and github is available at
  https://matplotlib.org/devel/gitwash/development_workflow.html.

- Do not create the PR out of master, but out of a separate branch.

- The PR title should summarize the changes, for example ""Raise ValueError on
  non-numeric input to set_xlim"".  Avoid non-descriptive titles such as
  ""Addresses issue #8576"".

- The summary should provide at least 1-2 sentences describing the pull request
  in detail (Why is this change required?  What problem does it solve?) and
  link to any relevant issues.

- If you are contributing fixes to docstrings, please pay attention to
  http://matplotlib.org/devel/documenting_mpl.html#formatting.  In particular,
  note the difference between using single backquotes, double backquotes, and
  asterisks in the markup.

We understand that PRs can sometimes be overwhelming, especially as the
reviews start coming in.  Please let us know if the reviews are unclear or
the recommended next step seems overly demanding, if you would like help in
addressing a reviewer's comments, or if you have been waiting too long to hear
back on your PR.
-->
",anntzer,closed,2021-03-30 14:14:29,,2021-03-30 21:16:59,QuLogic,2021-03-30 21:39:22,0,"backend/pdf, topic: testing",v3.4.1,61
844555415,Backport PR #19814 on branch v3.4.x (Fix positioning of annotation arrow.),Backport PR #19814: Fix positioning of annotation arrow.,meeseeksmachine,closed,2021-03-30 13:30:57,,2021-03-30 15:02:33,jklymak,2021-03-30 15:02:33,0,,v3.4.1,61
844524304,Clarify default backend selection doc.,"## PR Summary

Closes https://github.com/matplotlib/matplotlib/issues/19813

## PR Checklist

<!-- Please mark any checkboxes that do not apply to this PR as [N/A]. -->

- [ ] Has pytest style unit tests (and `pytest` passes).
- [ ] Is [Flake 8](https://flake8.pycqa.org/en/latest/) compliant (run `flake8` on changed files to check).
- [ ] New features are documented, with examples if plot related.
- [ ] Documentation is sphinx and numpydoc compliant (the docs should [build](https://matplotlib.org/devel/documenting_mpl.html#building-the-docs) without error).
- [ ] Conforms to Matplotlib style conventions (install `flake8-docstrings` and run `flake8 --docstring-convention=all`).
- [ ] New features have an entry in `doc/users/next_whats_new/` (follow instructions in README.rst there).
- [ ] API changes documented in `doc/api/next_api_changes/` (follow instructions in README.rst there).

<!--
Thank you so much for your PR!  To help us review your contribution, please
consider the following points:

- A development guide is available at https://matplotlib.org/devdocs/devel/index.html.

- Help with git and github is available at
  https://matplotlib.org/devel/gitwash/development_workflow.html.

- Do not create the PR out of master, but out of a separate branch.

- The PR title should summarize the changes, for example ""Raise ValueError on
  non-numeric input to set_xlim"".  Avoid non-descriptive titles such as
  ""Addresses issue #8576"".

- The summary should provide at least 1-2 sentences describing the pull request
  in detail (Why is this change required?  What problem does it solve?) and
  link to any relevant issues.

- If you are contributing fixes to docstrings, please pay attention to
  http://matplotlib.org/devel/documenting_mpl.html#formatting.  In particular,
  note the difference between using single backquotes, double backquotes, and
  asterisks in the markup.

We understand that PRs can sometimes be overwhelming, especially as the
reviews start coming in.  Please let us know if the reviews are unclear or
the recommended next step seems overly demanding, if you would like help in
addressing a reviewer's comments, or if you have been waiting too long to hear
back on your PR.
-->
",anntzer,closed,2021-03-30 13:10:06,,2021-03-30 20:41:19,timhoffm,2021-03-30 20:42:25,0,Documentation,v3.4-doc,62
844353882,Hide stderr output from subprocess call in test suite.,"Otherwise the (irrelevant and slightly confusing) traceback gets
displayed when running `pytest -s`.

## PR Summary

## PR Checklist

<!-- Please mark any checkboxes that do not apply to this PR as [N/A]. -->

- [ ] Has pytest style unit tests (and `pytest` passes).
- [ ] Is [Flake 8](https://flake8.pycqa.org/en/latest/) compliant (run `flake8` on changed files to check).
- [ ] New features are documented, with examples if plot related.
- [ ] Documentation is sphinx and numpydoc compliant (the docs should [build](https://matplotlib.org/devel/documenting_mpl.html#building-the-docs) without error).
- [ ] Conforms to Matplotlib style conventions (install `flake8-docstrings` and run `flake8 --docstring-convention=all`).
- [ ] New features have an entry in `doc/users/next_whats_new/` (follow instructions in README.rst there).
- [ ] API changes documented in `doc/api/next_api_changes/` (follow instructions in README.rst there).

<!--
Thank you so much for your PR!  To help us review your contribution, please
consider the following points:

- A development guide is available at https://matplotlib.org/devdocs/devel/index.html.

- Help with git and github is available at
  https://matplotlib.org/devel/gitwash/development_workflow.html.

- Do not create the PR out of master, but out of a separate branch.

- The PR title should summarize the changes, for example ""Raise ValueError on
  non-numeric input to set_xlim"".  Avoid non-descriptive titles such as
  ""Addresses issue #8576"".

- The summary should provide at least 1-2 sentences describing the pull request
  in detail (Why is this change required?  What problem does it solve?) and
  link to any relevant issues.

- If you are contributing fixes to docstrings, please pay attention to
  http://matplotlib.org/devel/documenting_mpl.html#formatting.  In particular,
  note the difference between using single backquotes, double backquotes, and
  asterisks in the markup.

We understand that PRs can sometimes be overwhelming, especially as the
reviews start coming in.  Please let us know if the reviews are unclear or
the recommended next step seems overly demanding, if you would like help in
addressing a reviewer's comments, or if you have been waiting too long to hear
back on your PR.
-->
",anntzer,closed,2021-03-30 10:40:09,,2021-03-30 13:55:46,tacaswell,2021-03-30 13:57:25,0,topic: testing,v3.5.0,59
844234744,Backport PR #19817 on branch v3.4.x (Fix antialiasing with old pycairo/cairocffi.),Backport PR #19817: Fix antialiasing with old pycairo/cairocffi.,meeseeksmachine,closed,2021-03-30 08:41:09,,2021-03-30 13:53:28,tacaswell,2021-03-30 13:53:29,0,,v3.4.1,61
844058155,Correct small typos in _axes.py and legend.py,"## PR Summary

## PR Checklist

<!-- Please mark any checkboxes that do not apply to this PR as [N/A]. -->

- [N/A] Has pytest style unit tests (and `pytest` passes).
- [x] Is [Flake 8](https://flake8.pycqa.org/en/latest/) compliant (run `flake8` on changed files to check).
- [N/A] New features are documented, with examples if plot related.
- [x] Documentation is sphinx and numpydoc compliant (the docs should [build](https://matplotlib.org/devel/documenting_mpl.html#building-the-docs) without error).
- [x] Conforms to Matplotlib style conventions (install `flake8-docstrings` and run `flake8 --docstring-convention=all`).
- [N/A] New features have an entry in `doc/users/next_whats_new/` (follow instructions in README.rst there).
- [N/A] API changes documented in `doc/api/next_api_changes/` (follow instructions in README.rst there).

<!--
Thank you so much for your PR!  To help us review your contribution, please
consider the following points:

- A development guide is available at https://matplotlib.org/devdocs/devel/index.html.

- Help with git and github is available at
  https://matplotlib.org/devel/gitwash/development_workflow.html.

- Do not create the PR out of master, but out of a separate branch.

- The PR title should summarize the changes, for example ""Raise ValueError on
  non-numeric input to set_xlim"".  Avoid non-descriptive titles such as
  ""Addresses issue #8576"".

- The summary should provide at least 1-2 sentences describing the pull request
  in detail (Why is this change required?  What problem does it solve?) and
  link to any relevant issues.

- If you are contributing fixes to docstrings, please pay attention to
  http://matplotlib.org/devel/documenting_mpl.html#formatting.  In particular,
  note the difference between using single backquotes, double backquotes, and
  asterisks in the markup.

We understand that PRs can sometimes be overwhelming, especially as the
reviews start coming in.  Please let us know if the reviews are unclear or
the recommended next step seems overly demanding, if you would like help in
addressing a reviewer's comments, or if you have been waiting too long to hear
back on your PR.
-->
",smartlixx,closed,2021-03-30 04:28:51,,2021-03-30 08:38:05,anntzer,2021-03-30 21:14:03,1,Documentation,v3.5.0,59
844018073,Backport PR #19784 on branch v3.4.x (FIX errorbar problem with fillstyle),Backport PR #19784: FIX errorbar problem with fillstyle,meeseeksmachine,closed,2021-03-30 03:04:20,,2021-03-30 04:13:27,QuLogic,2021-03-30 04:13:27,0,,v3.4.1,61
843942378,Fix antialiasing with old pycairo/cairocffi.,"## PR Summary

The `cairo.Antialias` Enum was added in pycairo 1.13, but we support 1.11. It also appears to not exist in cairocffi (https://github.com/Kozea/cairocffi/issues/183/).

## PR Checklist

- [x] Has pytest style unit tests (and `pytest` passes).
- [x] Is [Flake 8](https://flake8.pycqa.org/en/latest/) compliant (run `flake8` on changed files to check).
- [n/a] New features are documented, with examples if plot related.
- [n/a] Documentation is sphinx and numpydoc compliant (the docs should [build](https://matplotlib.org/devel/documenting_mpl.html#building-the-docs) without error).
- [x] Conforms to Matplotlib style conventions (install `flake8-docstrings` and run `flake8 --docstring-convention=all`).
- [n/a] New features have an entry in `doc/users/next_whats_new/` (follow instructions in README.rst there).
- [n/a] API changes documented in `doc/api/next_api_changes/` (follow instructions in README.rst there).
",QuLogic,closed,2021-03-30 00:30:45,,2021-03-30 08:40:52,anntzer,2021-03-30 20:14:32,1,backend/cairo,v3.4.1,61
843869171,Fix legend of colour-mapped scatter plots.,"## PR Summary

This is a slight backport of ed6d92b00426429d3f4350fc3710155fa46160c0, namely ignoring the array update status when updating the scalar mappable.

To not break the watchers though, the check must still be called to update the status.

Fixes #19779.

## PR Checklist

- [x] Has pytest style unit tests (and `pytest` passes).
- [x] Is [Flake 8](https://flake8.pycqa.org/en/latest/) compliant (run `flake8` on changed files to check).
- [n/a] New features are documented, with examples if plot related.
- [n/a] Documentation is sphinx and numpydoc compliant (the docs should [build](https://matplotlib.org/devel/documenting_mpl.html#building-the-docs) without error).
- [x] Conforms to Matplotlib style conventions (install `flake8-docstrings` and run `flake8 --docstring-convention=all`).
- [n/a] New features have an entry in `doc/users/next_whats_new/` (follow instructions in README.rst there).
- [n/a] API changes documented in `doc/api/next_api_changes/` (follow instructions in README.rst there).",QuLogic,closed,2021-03-29 22:30:02,,2021-03-31 02:11:38,tacaswell,2021-03-31 02:20:38,7,Release critical,v3.4.1,61
843856250,Backport PR #19793 on branch v3.4.x (Fix non existent URI s),Backport PR #19793: Fix non existent URI s,meeseeksmachine,closed,2021-03-29 22:10:27,,2021-03-30 00:11:11,QuLogic,2021-03-30 00:11:11,0,,v3.4.1,61
843845269,Fix positioning of annotation arrow.,"## PR Summary

Reverts one change from 47f741ea80469921666f432e5c521fec62ea39cd and adds a comment why it should not be removed.

The choice of test to change might be a surprise, but most of our arrow-in-annotation tests use empty text, which would not trigger the bug. Changing this image has a much smaller effect than adding text to one of those would.

Fixes #19785.

## PR Checklist

- [x] Has pytest style unit tests (and `pytest` passes).
- [x] Is [Flake 8](https://flake8.pycqa.org/en/latest/) compliant (run `flake8` on changed files to check).
- [n/a] New features are documented, with examples if plot related.
- [n/a] Documentation is sphinx and numpydoc compliant (the docs should [build](https://matplotlib.org/devel/documenting_mpl.html#building-the-docs) without error).
- [x] Conforms to Matplotlib style conventions (install `flake8-docstrings` and run `flake8 --docstring-convention=all`).
- [n/a] New features have an entry in `doc/users/next_whats_new/` (follow instructions in README.rst there).
- [n/a] API changes documented in `doc/api/next_api_changes/` (follow instructions in README.rst there).",QuLogic,closed,2021-03-29 21:53:57,,2021-03-30 13:30:37,timhoffm,2021-03-30 20:18:19,0,topic: text,v3.4.1,61
843807818,"Docs: default backend is not always `""agg""` (e.g., if X11 is working)","### Problem

One may get the impression that `""agg""` is the default backend from reading
> There are three ways to configure your backend:
> 1. The `rcParams[""backend""]` (default: `'agg'`) parameter in your `matplotlibrc` file
> 2. The `MPLBACKEND` environment variable
> 3. The function `matplotlib.use()`

https://matplotlib.org/stable/tutorials/introductory/usage.html#selecting-a-backend

So, not having a `matplotlibrc` nor `MPLBACKEND`, I would expect that `""agg""` is default. However, with `DISPLAY` set and an X11 server running, I get
```
user@host:~/cia> xeyes; echo $?; python -c ""import matplotlib as mpl; print(mpl.get_backend())""
0
TkAgg
```

Only after closing the X11 server, everything is as expected:
```
user@host:~/cia> xeyes; echo $?; python -c ""import matplotlib as mpl; print(mpl.get_backend())""
Error: Can't open display: localhost:12.0
1
agg
```

### Suggested Improvement

- Explain that an interactive backend is selected by default if available.
- Make sure people find this information when searching for ""TkAgg"" (in case someone looks for this when trying to understand why they get what I observe).
- Remove  ""(default: `'agg'`)"" from `rcParams[""backend""]` (because it's not always correct)
",bersbersbers,closed,2021-03-29 21:03:19,,2021-03-30 20:41:19,timhoffm,2021-03-30 21:19:44,2,Documentation,v3.4-doc,62
843720865,FIX: size and color rendering for Path3DCollection,"## PR Summary

This fixes both bugs identified in #19787 

Still needs test and the tactic should be expanded to the other *Collections before we merge.",tacaswell,closed,2021-03-29 19:25:19,,2021-03-31 04:56:06,QuLogic,2021-03-31 13:36:05,6,Release critical,v3.4.1,61
843530086,Fix Inkscape cleanup at exit on Windows.,"## PR Summary

Closes https://github.com/matplotlib/matplotlib/issues/19809, at least locally (@jungerm2 can you confirm it works for you?)
I'd rather not figure out how to mess with CI to get Inkscape on Windows as well...

## PR Checklist

<!-- Please mark any checkboxes that do not apply to this PR as [N/A]. -->

- [ ] Has pytest style unit tests (and `pytest` passes).
- [ ] Is [Flake 8](https://flake8.pycqa.org/en/latest/) compliant (run `flake8` on changed files to check).
- [ ] New features are documented, with examples if plot related.
- [ ] Documentation is sphinx and numpydoc compliant (the docs should [build](https://matplotlib.org/devel/documenting_mpl.html#building-the-docs) without error).
- [ ] Conforms to Matplotlib style conventions (install `flake8-docstrings` and run `flake8 --docstring-convention=all`).
- [ ] New features have an entry in `doc/users/next_whats_new/` (follow instructions in README.rst there).
- [ ] API changes documented in `doc/api/next_api_changes/` (follow instructions in README.rst there).

<!--
Thank you so much for your PR!  To help us review your contribution, please
consider the following points:

- A development guide is available at https://matplotlib.org/devdocs/devel/index.html.

- Help with git and github is available at
  https://matplotlib.org/devel/gitwash/development_workflow.html.

- Do not create the PR out of master, but out of a separate branch.

- The PR title should summarize the changes, for example ""Raise ValueError on
  non-numeric input to set_xlim"".  Avoid non-descriptive titles such as
  ""Addresses issue #8576"".

- The summary should provide at least 1-2 sentences describing the pull request
  in detail (Why is this change required?  What problem does it solve?) and
  link to any relevant issues.

- If you are contributing fixes to docstrings, please pay attention to
  http://matplotlib.org/devel/documenting_mpl.html#formatting.  In particular,
  note the difference between using single backquotes, double backquotes, and
  asterisks in the markup.

We understand that PRs can sometimes be overwhelming, especially as the
reviews start coming in.  Please let us know if the reviews are unclear or
the recommended next step seems overly demanding, if you would like help in
addressing a reviewer's comments, or if you have been waiting too long to hear
back on your PR.
-->
",anntzer,closed,2021-03-29 16:16:25,,2021-03-31 04:03:21,tacaswell,2021-03-31 05:26:01,5,"OS/Microsoft, backend/svg, topic: testing",v3.4.1,61
842839432,Remove JPEG-specific parameters and rcParams.,"## PR Summary

Looks like the change in default quality means test_jpeg_alpha must be slightly tweaked, but note that even as far back as when it was added, `num_colors` was already not completely deterministic... (https://github.com/matplotlib/matplotlib/pull/5324#issuecomment-151829388)

## PR Checklist

<!-- Please mark any checkboxes that do not apply to this PR as [N/A]. -->

- [ ] Has pytest style unit tests (and `pytest` passes).
- [ ] Is [Flake 8](https://flake8.pycqa.org/en/latest/) compliant (run `flake8` on changed files to check).
- [ ] New features are documented, with examples if plot related.
- [ ] Documentation is sphinx and numpydoc compliant (the docs should [build](https://matplotlib.org/devel/documenting_mpl.html#building-the-docs) without error).
- [ ] Conforms to Matplotlib style conventions (install `flake8-docstrings` and run `flake8 --docstring-convention=all`).
- [ ] New features have an entry in `doc/users/next_whats_new/` (follow instructions in README.rst there).
- [ ] API changes documented in `doc/api/next_api_changes/` (follow instructions in README.rst there).

<!--
Thank you so much for your PR!  To help us review your contribution, please
consider the following points:

- A development guide is available at https://matplotlib.org/devdocs/devel/index.html.

- Help with git and github is available at
  https://matplotlib.org/devel/gitwash/development_workflow.html.

- Do not create the PR out of master, but out of a separate branch.

- The PR title should summarize the changes, for example ""Raise ValueError on
  non-numeric input to set_xlim"".  Avoid non-descriptive titles such as
  ""Addresses issue #8576"".

- The summary should provide at least 1-2 sentences describing the pull request
  in detail (Why is this change required?  What problem does it solve?) and
  link to any relevant issues.

- If you are contributing fixes to docstrings, please pay attention to
  http://matplotlib.org/devel/documenting_mpl.html#formatting.  In particular,
  note the difference between using single backquotes, double backquotes, and
  asterisks in the markup.

We understand that PRs can sometimes be overwhelming, especially as the
reviews start coming in.  Please let us know if the reviews are unclear or
the recommended next step seems overly demanding, if you would like help in
addressing a reviewer's comments, or if you have been waiting too long to hear
back on your PR.
-->
",anntzer,closed,2021-03-28 21:49:29,,2021-04-01 08:28:26,timhoffm,2021-04-01 08:45:14,0,Maintenance,v3.5.0,59
842828739,"Tests that use ""image_comparison"" fail to cleanup on Windows ","<!--To help us understand and resolve your issue, please fill out the form to the best of your ability.-->
<!--You can feel free to delete the sections that do not apply.-->

### Bug report

It seems that unit tests that use the `image_comparison` decorator, specifically converting from SVG to PNG fail to cleanup after themselves in Windows 10.  

**Actual outcome**

Specifically, the subprocess created to talk to inkscape doesn't close properly, and creates a ton of cascading Permission errors:

```
(mpldev) PS C:\Users\sjung\MPLdev\matplotlib> pytest .\lib\matplotlib\tests\test_backend_svg.py::test_bold_font_output
======================================================================= test session starts =======================================================================
platform win32 -- Python 3.8.3, pytest-6.2.2, py-1.10.0, pluggy-0.13.1
rootdir: C:\Users\sjung\Documents\MyPrograms\Python-programs\Personal\MPLdev\matplotlib, configfile: pytest.ini
plugins: cov-2.11.1, rerunfailures-9.1.1, timeout-1.4.2
collected 1 item

lib\matplotlib\tests\test_backend_svg.py .                                                                                                                   [100%]

================================================================== 1 passed, 1 warning in 1.98s ===================================================================
Traceback (most recent call last):
  File ""c:\users\sjung\miniconda3\lib\shutil.py"", line 617, in _rmtree_unsafe
    os.rmdir(path)
PermissionError: [WinError 32] The process cannot access the file because it is being used by another process: 'C:\\Users\\sjung\\AppData\\Local\\Temp\\tmpbqz_ngbr'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File ""c:\users\sjung\miniconda3\lib\tempfile.py"", line 803, in onerror
    _os.unlink(path)
PermissionError: [WinError 5] Access is denied: 'C:\\Users\\sjung\\AppData\\Local\\Temp\\tmpbqz_ngbr'


[Above Error Repeats like 500 times, then we get]


During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File ""c:\users\sjung\miniconda3\lib\weakref.py"", line 642, in _exitfunc
    f()
  File ""c:\users\sjung\miniconda3\lib\weakref.py"", line 566, in __call__
    return info.func(*info.args, **(info.kwargs or {}))
  File ""c:\users\sjung\miniconda3\lib\tempfile.py"", line 818, in _cleanup
    cls._rmtree(name)
  File ""c:\users\sjung\miniconda3\lib\tempfile.py"", line 814, in _rmtree
    _shutil.rmtree(name, onerror=onerror)
  File ""c:\users\sjung\miniconda3\lib\shutil.py"", line 737, in rmtree
    return _rmtree_unsafe(path, onerror)
  File ""c:\users\sjung\miniconda3\lib\shutil.py"", line 619, in _rmtree_unsafe
    onerror(os.rmdir, path, sys.exc_info())
  File ""c:\users\sjung\miniconda3\lib\tempfile.py"", line 806, in onerror
    cls._rmtree(path)

[Repeated error]

 File ""c:\users\sjung\miniconda3\lib\tempfile.py"", line 814, in _rmtree
    _shutil.rmtree(name, onerror=onerror)
  File ""c:\users\sjung\miniconda3\lib\shutil.py"", line 737, in rmtree
    return _rmtree_unsafe(path, onerror)
  File ""c:\users\sjung\miniconda3\lib\shutil.py"", line 594, in _rmtree_unsafe
    entries = list(scandir_it)
RecursionError: maximum recursion depth exceeded while calling a Python object

```

The `_SVGConverter` subclasses `_Converter` (in lib/matplotlib/testing/compare.py) which should close the process atexit in it's `__del__` method:  

https://github.com/matplotlib/matplotlib/blob/c81f58d375733bed70e921233f42f2b1d8dbfb57/lib/matplotlib/testing/compare.py#L107-L115

And from my tests, this does get called properly but the error persists. Adding this exact same logic to the end of `_SVGConverter`'s `__call__` method seems to resolve the issue (although wastefull since a new process then gets created every time). 

**Expected outcome**

I'd expect these test cases to cleanup after themselves and not leave empty temporary directories. 

**Matplotlib version**
<!--Please specify your platform and versions of the relevant libraries you are using:-->
  * Operating system: Windows 10
  * Matplotlib version (`import matplotlib; print(matplotlib.__version__)`): 3.3.4.post2669+gce4c50de2.d20210328 (master as of today, installed from source)
  * Matplotlib backend (`print(matplotlib.get_backend())`): TkAgg
  * Python version: Happens with both Python 3.9.2 and 3.8.3
  * Other libraries: Inkscape 1.0.2-2 (e86c870879, 2021-01-15)

<!--Please tell us how you installed matplotlib and python e.g., from source, pip, conda-->
<!--If you installed from conda, please specify which channel you used if not the default-->

",jungerm2,closed,2021-03-28 20:53:34,,2021-03-31 04:03:21,tacaswell,2021-03-31 04:04:24,0,"OS/Microsoft, backend/svg, status: confirmed bug, topic: testing",v3.4.1,61
842794333,Issue with pcolormesh with shared DateTime x-axis,"<!--To help us understand and resolve your issue, please fill out the form to the best of your ability.-->
<!--You can feel free to delete the sections that do not apply.-->

### Bug report

I came across an issue when creating a sublot with a pcolormesh and a shared datetime x-axis. I believe this to have something to do with the tick format, although I'm not sure... 

The intention of the code below is to visualize the classes for each time-period. This seems to work only if the formatting of the two x-axes correspond. The issue can toggled by (un)commenting the line with the ""<---(Un)Comment this line to reproduce issue""-comment. Also see: https://imgur.com/a/egZwn5J

**Code for reproduction**

<!--A minimum code snippet required to reproduce the bug.
Please make sure to minimize the number of dependencies required, and provide
any necessary plotted data.
Avoid using threads, as Matplotlib is (explicitly) not thread-safe.-->

```python
import pandas as pd
from datetime import datetime, timezone
from matplotlib import cm
import numpy as np
import matplotlib
import matplotlib.pyplot as plt
from matplotlib.collections import LineCollection
from matplotlib.lines import Line2D
from matplotlib.dates import date2num 
import matplotlib.dates as mdates

def bar(df, ax, color_column): 
        classes = df[color_column].unique() #get all classes
        colors = cm.rainbow(np.linspace(0,1,len(classes))) #get new color for each one
        dt_pred_arr = df[[""DateTime"", color_column]].to_numpy()

        X = []
        Y = []
        Z = []

        for idx, (dt, pred) in enumerate(dt_pred_arr): 
            if pred in classes: #For predicted classes
                X.append(dt)
                Y.append(0)
                Z.append(int(np.where(classes==pred)[0])) #class index
 
        cMap = matplotlib.colors.ListedColormap(colors) #Color map (use Z to map colors)

        Z = [np.array(Z)[:-1], np.array(Z)[:-1]]
        ax.pcolormesh(X, [0, 1], Z, cmap=cMap, shading='flat')
        legend_colors = [Line2D([0], [0], color=color, lw=4) for color in colors]
        ax.legend(legend_colors, classes, loc='lower center', bbox_to_anchor=(0.5, -1.4), ncol = len(classes))


data = [
    (datetime(2020, 1, 11, 10, tzinfo=timezone.utc), 5,1, ""Class1""),
    (datetime(2020, 1, 11, 11, tzinfo=timezone.utc), 5,4, ""Class2""),
    (datetime(2020, 1, 11, 12, tzinfo=timezone.utc), 5,4, ""Class2""),
    (datetime(2020, 1, 11, 13, tzinfo=timezone.utc), 2,7, ""Class5""),
    (datetime(2020, 1, 11, 14, tzinfo=timezone.utc), 2,1, ""Class5""),
    (datetime(2020, 1, 11, 15, tzinfo=timezone.utc), 5,9, ""Class1""), 
    #(datetime(2020, 1, 11, 15, tzinfo=timezone.utc), 5,9, ""Class1"")  #<-----------------(Un)comment this line to reproduce issue
]


df = pd.DataFrame(data=data, columns=[""DateTime"", ""Value1"",""Value2"", ""Class""])
fig, ax = plt.subplots(2, sharex=True, gridspec_kw={'height_ratios': [5, 1]})
df[[""DateTime"", ""Value1"", ""Value2""]].plot(x=""DateTime"", ax=ax[0])
bar(df, ax=ax[1], color_column=""Class"")
plt.show()
```

**Expected vs actual outcome**

https://imgur.com/a/egZwn5J

**Matplotlib version**
<!--Please specify your platform and versions of the relevant libraries you are using:-->
  * Operating system: Win10
  * Matplotlib version (`import matplotlib; print(matplotlib.__version__)`): 3.3.4
  * Matplotlib backend (`print(matplotlib.get_backend())`): Qt5Agg
  * Python version: 3.8.7
  * Other libraries: Pandas

<!--Please tell us how you installed matplotlib and python e.g., from source, pip, conda-->
<!--If you installed from conda, please specify which channel you used if not the default-->

",Woutah,closed,2021-03-28 18:05:25,,2021-03-28 21:45:40,Woutah,2021-03-28 21:50:08,3,,,
842761920,radius modification in contains_point function when linewidth is specified,"<!--To help us understand and resolve your issue, please fill out the form to the best of your ability.-->
<!--You can feel free to delete the sections that do not apply.-->

### Bug report

**Bug summary**
When specifyng `linewidth` in a patch object and then using the `contains_point` function the radius of this is set to `linewidth` and returns inconsistent results. This is somewhat documented [here](https://matplotlib.org/stable/api/path_api.html#matplotlib.path.Path.contains_point) but I think this is an unwanted behaviour since `linewidth` is specified in points and not in data coordinates, while the `contains_point` function gonna search for those data points enclosed between the border of the path and half the `linewidth`.


**Code for reproduction**

```python
import matplotlib.patches as mpatches
import matplotlib.pyplot as plt

circle_ec = mpatches.Circle((0,0), radius=1, ec='r', lw=1)
circle = mpatches.Circle((0,0), radius=1)
point = (0,1.5)
print(circle_ec.contains_point(point))        
print(circle.contains_point(point))
```

**Actual outcome**

```
True
False
```

**Expected outcome**

The expected output is `False` in both cases since the point `(0, 1.5)` is neither in the patch (Circle in this case) neither on the line of the edge. I propose to multiply `_radius = self.get_linewidth()` in the `_process_radius` function in the [source code](https://matplotlib.org/stable/_modules/matplotlib/patches.html#) by a corrective factor.

**Matplotlib version**

  * Operating system: Windows 10
  * Matplotlib version: 3.3.4
  * Matplotlib backend:  TkAgg
  * Python version: 
  * Jupyter version (if applicable): 3.9.0
  * Other libraries: 

Installation from pip

",Feyn-Man,open,2021-03-28 15:27:46,,,,2021-03-28 15:27:46,0,,,
842730675,Remove outdated api changes notes.,"It's been integrated into the 3.4 release notes (https://matplotlib.org/stable/api/api_changes.html#rcparams).

## PR Summary

## PR Checklist

<!-- Please mark any checkboxes that do not apply to this PR as [N/A]. -->

- [ ] Has pytest style unit tests (and `pytest` passes).
- [ ] Is [Flake 8](https://flake8.pycqa.org/en/latest/) compliant (run `flake8` on changed files to check).
- [ ] New features are documented, with examples if plot related.
- [ ] Documentation is sphinx and numpydoc compliant (the docs should [build](https://matplotlib.org/devel/documenting_mpl.html#building-the-docs) without error).
- [ ] Conforms to Matplotlib style conventions (install `flake8-docstrings` and run `flake8 --docstring-convention=all`).
- [ ] New features have an entry in `doc/users/next_whats_new/` (follow instructions in README.rst there).
- [ ] API changes documented in `doc/api/next_api_changes/` (follow instructions in README.rst there).

<!--
Thank you so much for your PR!  To help us review your contribution, please
consider the following points:

- A development guide is available at https://matplotlib.org/devdocs/devel/index.html.

- Help with git and github is available at
  https://matplotlib.org/devel/gitwash/development_workflow.html.

- Do not create the PR out of master, but out of a separate branch.

- The PR title should summarize the changes, for example ""Raise ValueError on
  non-numeric input to set_xlim"".  Avoid non-descriptive titles such as
  ""Addresses issue #8576"".

- The summary should provide at least 1-2 sentences describing the pull request
  in detail (Why is this change required?  What problem does it solve?) and
  link to any relevant issues.

- If you are contributing fixes to docstrings, please pay attention to
  http://matplotlib.org/devel/documenting_mpl.html#formatting.  In particular,
  note the difference between using single backquotes, double backquotes, and
  asterisks in the markup.

We understand that PRs can sometimes be overwhelming, especially as the
reviews start coming in.  Please let us know if the reviews are unclear or
the recommended next step seems overly demanding, if you would like help in
addressing a reviewer's comments, or if you have been waiting too long to hear
back on your PR.
-->
",anntzer,closed,2021-03-28 12:43:24,,2021-03-28 16:55:34,dstansby,2021-03-29 21:00:26,3,Documentation,v3.5.0,59
842665076,Fix suptitle out of layout,"## PR Summary

Closes: #19803

Subtitles should not be in constrained layout if they were positioned manually because constrained layout moves them.  However, in 3.4 we took them out of the layout altogether, which breaks `bbox_inches='tight'` and the inline backend.  

~Have a check for the hard-coded defaults.  Maybe not the most robust, but we don't store the defaults anywhere.   Could maybe store on `figure` and get from there, but...~
Storing on the subtitle object itself works fine.  

## PR Checklist

<!-- Please mark any checkboxes that do not apply to this PR as [N/A]. -->

- [ ] Has pytest style unit tests (and `pytest` passes).
- [ ] Is [Flake 8](https://flake8.pycqa.org/en/latest/) compliant (run `flake8` on changed files to check).
- [ ] New features are documented, with examples if plot related.
- [ ] Documentation is sphinx and numpydoc compliant (the docs should [build](https://matplotlib.org/devel/documenting_mpl.html#building-the-docs) without error).
- [ ] Conforms to Matplotlib style conventions (install `flake8-docstrings` and run `flake8 --docstring-convention=all`).
- [ ] New features have an entry in `doc/users/next_whats_new/` (follow instructions in README.rst there).
- [ ] API changes documented in `doc/api/next_api_changes/` (follow instructions in README.rst there).

<!--
Thank you so much for your PR!  To help us review your contribution, please
consider the following points:

- A development guide is available at https://matplotlib.org/devdocs/devel/index.html.

- Help with git and github is available at
  https://matplotlib.org/devel/gitwash/development_workflow.html.

- Do not create the PR out of master, but out of a separate branch.

- The PR title should summarize the changes, for example ""Raise ValueError on
  non-numeric input to set_xlim"".  Avoid non-descriptive titles such as
  ""Addresses issue #8576"".

- The summary should provide at least 1-2 sentences describing the pull request
  in detail (Why is this change required?  What problem does it solve?) and
  link to any relevant issues.

- If you are contributing fixes to docstrings, please pay attention to
  http://matplotlib.org/devel/documenting_mpl.html#formatting.  In particular,
  note the difference between using single backquotes, double backquotes, and
  asterisks in the markup.

We understand that PRs can sometimes be overwhelming, especially as the
reviews start coming in.  Please let us know if the reviews are unclear or
the recommended next step seems overly demanding, if you would like help in
addressing a reviewer's comments, or if you have been waiting too long to hear
back on your PR.
-->
",jklymak,closed,2021-03-28 05:21:03,,2021-03-30 20:19:48,QuLogic,2021-03-30 20:28:19,2,topic: geometry manager,v3.4.1,61
842653621,[proposal] split QT backend to standalone project under matplotlib umbrella,"### Problem

QT backend is hard to use, especially for QT have two python binding(Qt for Python and PyQt) and the official binding is even fast involved(QT5/Qt6, QML)

this make how to embedded it be hard work, like what should I do if,

1. I use Qt for Python 5/Qt for Python
2. I use PyQt5/PyQt6
3. I mix(with my upstream package) PyQt/Qt for Python
3. the Operating System/Conda upstream mismatch with my own version

### Proposed Solution

Split Qt Version/Python Binding to a different subproject, and these project evolution themselves.

for the user side, the user chooses what they need, all these is pay for what you need. code is easy to unstand and maintains
 
### Additional context and prior art

1. migration to new qt version/qt binding will be an easy action, if the qt upstream has a breaking change, and the downstream try to keep compitable, that will be very hard to do, you need a new abstraction to fix these problems. 
2. the user code will be as easy as https://matplotlib.org/stable/gallery/user_interfaces/embedding_in_qt_sgskip.html , and the maintainer's work should be easy now,  done by the different community and keep with upstream.

A super mini implement base on many brilliant user, https://github.com/medlab/matplotlibqml 

But I think if matploitlib upstream maintenance these projects will be a more heath way, or these weekend projects will be sure die some week's later.
",congzhangzh,closed,2021-03-28 03:48:07,,2021-03-28 21:42:02,jklymak,2021-03-28 21:42:02,4,"GUI/Qt, New feature",,
842642485,Suptitle positioning messed up in 3.4.0,"If I run the following code:

```python
import matplotlib.pyplot as plt
plt.subplots()
plt.suptitle('SUPTITLE TEST')
```

I get:

![image](https://user-images.githubusercontent.com/152575/112739947-f689b700-8f78-11eb-883a-acecd74fc603.png)

which says that the title is placed in `x=0.5, y=0.98` (which, according to the docs, is its default position). However if I do:

```python
plt.suptitle('SUPTITLE TEST', x=0.5, y=0.98)
```

it still says that the text is placed in `x=0.5, y=0.98`, but it is completely disappeared:

![image](https://user-images.githubusercontent.com/152575/112739976-3a7cbc00-8f79-11eb-8f79-d3a9bc85760f.png)

I think because it goes out of the image boundaries, as if I do:

```python
plt.suptitle('SUPTITLE TEST', y=0.93)
```

I get the title vertically cut, instead of obtaining the space to accommodate it:

![image](https://user-images.githubusercontent.com/152575/112740020-99423580-8f79-11eb-86f5-c7cbe8118494.png)

Also, setting `x` to any value but not setting `y`, such as in:

```python
plt.suptitle('SUPTITLE TEST', x=0.5)
```

makes the title disappear as well:

![image](https://user-images.githubusercontent.com/152575/112740040-d4dcff80-8f79-11eb-9b0e-ba586f49dc9d.png)

I can also cut the title horizontally, for example with:

```python
plt.suptitle('SUPTITLE TEST', x=0.1, y=0.92)
```

which produces:

![image](https://user-images.githubusercontent.com/152575/112740132-b62b3880-8f7a-11eb-99b9-08ece0aef052.png)

Basically I cannot position the title anymore, while it was easily doable until 3.3.4.

Thank you.

**Matplotlib version**
  * Operating system: any
  * Matplotlib version: 3.4.0 
  * Matplotlib backend: module://ipykernel.pylab.backend_inline 
  * Python version: 3.9.2",emazep,closed,2021-03-28 02:09:00,,2021-03-30 20:19:48,QuLogic,2021-03-30 20:19:48,5,,v3.4.1,61
842609196,"If the y values are close 1, they plot as 0","<!--To help us understand and resolve your issue, please fill out the form to the best of your ability.-->
<!--You can feel free to delete the sections that do not apply.-->

### Bug report

**Bug summary**

<!--A short 1-2 sentences that succinctly describes the bug-->
If the y values are close 1, they plot as near 0 instead of near 1.

**Code for reproduction**

<!--A minimum code snippet required to reproduce the bug.
Please make sure to minimize the number of dependencies required, and provide
any necessary plotted data.
Avoid using threads, as Matplotlib is (explicitly) not thread-safe.-->

```python

import matplotlib.pyplot as plt

x = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
y = [1.0, 1.000000000000031, 1.0000000000000013, 1.0000000000000013, 1.0000000000000013, 1.0000000000000013, 1.0000000000000013, 1.0000000000000013, 1.0000000000000013, 1.0000000000000013]

fig = plt.plot(x, y, color='black', linewidth=2)
plt.savefig('test.pdf', bbox_inches='tight')
```

**Actual outcome**

<!--The output produced by the above code, which may be a screenshot, console output, etc.-->
Line near y=0
```
# If applicable, paste the console output here
#
#
```

**Expected outcome**
Line near y=1
<!--A description of the expected outcome from the code snippet-->
<!--If this used to work in an earlier version of Matplotlib, please note the version it used to work on-->

**Matplotlib version**
<!--Please specify your platform and versions of the relevant libraries you are using:-->
  * Operating system: 
 Linux Centos 8, Ubuntu 20.04
  * Matplotlib version (`import matplotlib; print(matplotlib.__version__)`): 
3.3.0, 3.1.2
  * Matplotlib backend (`print(matplotlib.get_backend())`): 
Qt5Agg
  * Python version: 3.6.8, 3.8.5
  * Jupyter version (if applicable): 
  * Other libraries: 

<!--Please tell us how you installed matplotlib and python e.g., from source, pip, conda-->
Linux distribution packages. 
<!--If you installed from conda, please specify which channel you used if not the default-->

",ondrejch,closed,2021-03-27 21:51:21,,2021-03-27 22:24:40,jklymak,2021-03-27 22:24:40,1,,,
842588424,Expire deprecation of mathtext.fallback_to_cm.,"## PR Summary

## PR Checklist

<!-- Please mark any checkboxes that do not apply to this PR as [N/A]. -->

- [ ] Has pytest style unit tests (and `pytest` passes).
- [ ] Is [Flake 8](https://flake8.pycqa.org/en/latest/) compliant (run `flake8` on changed files to check).
- [ ] New features are documented, with examples if plot related.
- [ ] Documentation is sphinx and numpydoc compliant (the docs should [build](https://matplotlib.org/devel/documenting_mpl.html#building-the-docs) without error).
- [ ] Conforms to Matplotlib style conventions (install `flake8-docstrings` and run `flake8 --docstring-convention=all`).
- [ ] New features have an entry in `doc/users/next_whats_new/` (follow instructions in README.rst there).
- [ ] API changes documented in `doc/api/next_api_changes/` (follow instructions in README.rst there).

<!--
Thank you so much for your PR!  To help us review your contribution, please
consider the following points:

- A development guide is available at https://matplotlib.org/devdocs/devel/index.html.

- Help with git and github is available at
  https://matplotlib.org/devel/gitwash/development_workflow.html.

- Do not create the PR out of master, but out of a separate branch.

- The PR title should summarize the changes, for example ""Raise ValueError on
  non-numeric input to set_xlim"".  Avoid non-descriptive titles such as
  ""Addresses issue #8576"".

- The summary should provide at least 1-2 sentences describing the pull request
  in detail (Why is this change required?  What problem does it solve?) and
  link to any relevant issues.

- If you are contributing fixes to docstrings, please pay attention to
  http://matplotlib.org/devel/documenting_mpl.html#formatting.  In particular,
  note the difference between using single backquotes, double backquotes, and
  asterisks in the markup.

We understand that PRs can sometimes be overwhelming, especially as the
reviews start coming in.  Please let us know if the reviews are unclear or
the recommended next step seems overly demanding, if you would like help in
addressing a reviewer's comments, or if you have been waiting too long to hear
back on your PR.
-->
",anntzer,closed,2021-03-27 19:43:19,,2021-03-28 00:24:02,jklymak,2021-03-28 01:17:55,0,Maintenance,v3.5.0,59
842586069,Backport PR #19786 on branch v3.4.x (Fix code-of-conduct link on doc homepage.),Backport PR #19786: Fix code-of-conduct link on doc homepage.,meeseeksmachine,closed,2021-03-27 19:29:15,,2021-03-28 00:12:50,timhoffm,2021-03-28 00:12:50,0,,v3.4-doc,62
842586045,Backport PR #19786 on branch v3.4.0-doc (Fix code-of-conduct link on doc homepage.),Backport PR #19786: Fix code-of-conduct link on doc homepage.,meeseeksmachine,closed,2021-03-27 19:29:05,,2021-03-28 00:11:52,timhoffm,2021-03-28 00:11:52,0,,v3.4-doc,62
842585775,Backport PR #19790 on branch v3.4.x (Small typo fixes to interactive guide.),Backport PR #19790: Small typo fixes to interactive guide.,meeseeksmachine,closed,2021-03-27 19:27:28,,2021-03-28 00:12:06,timhoffm,2021-03-28 00:12:06,0,,v3.4-doc,62
842585746,Backport PR #19790 on branch v3.4.0-doc (Small typo fixes to interactive guide.),Backport PR #19790: Small typo fixes to interactive guide.,meeseeksmachine,closed,2021-03-27 19:27:19,,2021-03-28 00:12:18,timhoffm,2021-03-28 00:12:18,0,,v3.4-doc,62
842585252,Expire ``keymap.all_axes``-related deprecations.,"## PR Summary

## PR Checklist

<!-- Please mark any checkboxes that do not apply to this PR as [N/A]. -->

- [ ] Has pytest style unit tests (and `pytest` passes).
- [ ] Is [Flake 8](https://flake8.pycqa.org/en/latest/) compliant (run `flake8` on changed files to check).
- [ ] New features are documented, with examples if plot related.
- [ ] Documentation is sphinx and numpydoc compliant (the docs should [build](https://matplotlib.org/devel/documenting_mpl.html#building-the-docs) without error).
- [ ] Conforms to Matplotlib style conventions (install `flake8-docstrings` and run `flake8 --docstring-convention=all`).
- [ ] New features have an entry in `doc/users/next_whats_new/` (follow instructions in README.rst there).
- [ ] API changes documented in `doc/api/next_api_changes/` (follow instructions in README.rst there).

<!--
Thank you so much for your PR!  To help us review your contribution, please
consider the following points:

- A development guide is available at https://matplotlib.org/devdocs/devel/index.html.

- Help with git and github is available at
  https://matplotlib.org/devel/gitwash/development_workflow.html.

- Do not create the PR out of master, but out of a separate branch.

- The PR title should summarize the changes, for example ""Raise ValueError on
  non-numeric input to set_xlim"".  Avoid non-descriptive titles such as
  ""Addresses issue #8576"".

- The summary should provide at least 1-2 sentences describing the pull request
  in detail (Why is this change required?  What problem does it solve?) and
  link to any relevant issues.

- If you are contributing fixes to docstrings, please pay attention to
  http://matplotlib.org/devel/documenting_mpl.html#formatting.  In particular,
  note the difference between using single backquotes, double backquotes, and
  asterisks in the markup.

We understand that PRs can sometimes be overwhelming, especially as the
reviews start coming in.  Please let us know if the reviews are unclear or
the recommended next step seems overly demanding, if you would like help in
addressing a reviewer's comments, or if you have been waiting too long to hear
back on your PR.
-->
",anntzer,closed,2021-03-27 19:24:26,,2021-03-28 17:17:57,jklymak,2021-03-28 17:21:43,2,Maintenance,v3.5.0,59
842584399,Remove usetex-related APIs deprecated in Matplotlib 3.3.,"## PR Summary

## PR Checklist

<!-- Please mark any checkboxes that do not apply to this PR as [N/A]. -->

- [ ] Has pytest style unit tests (and `pytest` passes).
- [ ] Is [Flake 8](https://flake8.pycqa.org/en/latest/) compliant (run `flake8` on changed files to check).
- [ ] New features are documented, with examples if plot related.
- [ ] Documentation is sphinx and numpydoc compliant (the docs should [build](https://matplotlib.org/devel/documenting_mpl.html#building-the-docs) without error).
- [ ] Conforms to Matplotlib style conventions (install `flake8-docstrings` and run `flake8 --docstring-convention=all`).
- [ ] New features have an entry in `doc/users/next_whats_new/` (follow instructions in README.rst there).
- [ ] API changes documented in `doc/api/next_api_changes/` (follow instructions in README.rst there).

<!--
Thank you so much for your PR!  To help us review your contribution, please
consider the following points:

- A development guide is available at https://matplotlib.org/devdocs/devel/index.html.

- Help with git and github is available at
  https://matplotlib.org/devel/gitwash/development_workflow.html.

- Do not create the PR out of master, but out of a separate branch.

- The PR title should summarize the changes, for example ""Raise ValueError on
  non-numeric input to set_xlim"".  Avoid non-descriptive titles such as
  ""Addresses issue #8576"".

- The summary should provide at least 1-2 sentences describing the pull request
  in detail (Why is this change required?  What problem does it solve?) and
  link to any relevant issues.

- If you are contributing fixes to docstrings, please pay attention to
  http://matplotlib.org/devel/documenting_mpl.html#formatting.  In particular,
  note the difference between using single backquotes, double backquotes, and
  asterisks in the markup.

We understand that PRs can sometimes be overwhelming, especially as the
reviews start coming in.  Please let us know if the reviews are unclear or
the recommended next step seems overly demanding, if you would like help in
addressing a reviewer's comments, or if you have been waiting too long to hear
back on your PR.
-->
",anntzer,closed,2021-03-27 19:19:32,,2021-03-28 21:54:04,timhoffm,2021-03-28 21:54:30,0,"Maintenance, topic: text/usetex",v3.5.0,59
842584271,Backport PR #19774 on branch v3.4.0-doc (Document how to create sphinx-gallery references to examples),Backport PR #19774: Document how to create sphinx-gallery references to examples,meeseeksmachine,closed,2021-03-27 19:18:47,,2021-03-28 00:05:13,timhoffm,2021-03-28 00:05:13,0,,v3.4-doc,62
842555965,Fix non existent URI s,"## PR Summary

Fixes #19780.  @anntzer actually wrote the code, so perhaps he has a more elegant solution...

## PR Checklist

<!-- Please mark any checkboxes that do not apply to this PR as [N/A]. -->

- [ ] Has pytest style unit tests (and `pytest` passes).
- [ ] Is [Flake 8](https://flake8.pycqa.org/en/latest/) compliant (run `flake8` on changed files to check).
- [ ] New features are documented, with examples if plot related.
- [ ] Documentation is sphinx and numpydoc compliant (the docs should [build](https://matplotlib.org/devel/documenting_mpl.html#building-the-docs) without error).
- [ ] Conforms to Matplotlib style conventions (install `flake8-docstrings` and run `flake8 --docstring-convention=all`).
- [ ] New features have an entry in `doc/users/next_whats_new/` (follow instructions in README.rst there).
- [ ] API changes documented in `doc/api/next_api_changes/` (follow instructions in README.rst there).

<!--
Thank you so much for your PR!  To help us review your contribution, please
consider the following points:

- A development guide is available at https://matplotlib.org/devdocs/devel/index.html.

- Help with git and github is available at
  https://matplotlib.org/devel/gitwash/development_workflow.html.

- Do not create the PR out of master, but out of a separate branch.

- The PR title should summarize the changes, for example ""Raise ValueError on
  non-numeric input to set_xlim"".  Avoid non-descriptive titles such as
  ""Addresses issue #8576"".

- The summary should provide at least 1-2 sentences describing the pull request
  in detail (Why is this change required?  What problem does it solve?) and
  link to any relevant issues.

- If you are contributing fixes to docstrings, please pay attention to
  http://matplotlib.org/devel/documenting_mpl.html#formatting.  In particular,
  note the difference between using single backquotes, double backquotes, and
  asterisks in the markup.

We understand that PRs can sometimes be overwhelming, especially as the
reviews start coming in.  Please let us know if the reviews are unclear or
the recommended next step seems overly demanding, if you would like help in
addressing a reviewer's comments, or if you have been waiting too long to hear
back on your PR.
-->
",jklymak,closed,2021-03-27 16:53:07,,2021-03-28 21:56:14,timhoffm,2021-03-29 22:10:44,3,Documentation,v3.4.1,61
842518433,[BUG] Agg Backend doesn't call `close_event`,"### Bug report

Other backends properly call the close event, but it seems there is an issue with `Agg` specific to 3.4.

```python
import matplotlib
import matplotlib.pyplot as plt
matplotlib.use('Agg')

def _close(event):
    print(event)


fig, ax = plt.subplots()
fig.canvas.mpl_connect('close_event', _close)
plt.close(fig)

matplotlib.use('Qt5Agg')
fig, ax = plt.subplots()
fig.canvas.mpl_connect('close_event', _close)
plt.close(fig)
```


**Actual outcome**

No call to close for `Agg`.

**Expected outcome**

Calls from both backends with print outputs.

**Matplotlib version**
  * Operating system: All
  * Matplotlib version (`import matplotlib; print(matplotlib.__version__)`): 3.4.0
  * Matplotlib backend (`print(matplotlib.get_backend())`): 
  * Python version: ~3.8
  * Jupyter version (if applicable): 
  * Other libraries: 
",alexrockhill,closed,2021-03-27 14:43:04,,2021-03-27 18:37:21,alexrockhill,2021-03-27 18:37:21,3,,,
842513518,Add support for 3d plots to align the y axis vertically instead of the z axis,"### Problem
I have a hard time grasping what happens when jumping between 2d and 3d scatters because the y changes from the vertical direction to the depth direction.

![image](https://user-images.githubusercontent.com/14371165/112721976-30ba7080-8f07-11eb-972b-dea2a3f16128.png)

### Proposed Solution
A simple way to tell matplotlib to put the y axis vertically instead of the z axis. Either by improving `zdir` or adding a new parameter.
This will make it easier to visualize what happens since we are rotating this block of data as little as possible and it makes it easy to continue working with the plot as all x,y,z-methods continues to make sense.

The hack of interchanging the data and labels works if all you want is to get the plot working. But it gets rather unintuitive for downstream users if they want to further process the plot with for example `set_ylim` or `set_zlim`.

Rotating with ax.view_init() is very difficult or impossible to get good as it's difficult to get the same init angles and in interactive mode it feels completely opposite to rotate compared to the normal settings.

### Example code

```python
import matplotlib.pyplot as plt
import numpy as np

x = np.array([0, 1, 2, 4])
y = np.array([5, 10])
z = np.array([100, 150, 200])
X, Y, Z = np.meshgrid(*[x, y, z], indexing=""ij"")
c = np.arange(0, X.size)


ax = plt.subplot(1, 3, 1)
ax.scatter(X, Y, c=c)
ax.set_title(""x, y-plot, difficult to tell what's going on."")
ax.set_xlabel(""x"")
ax.set_ylabel(""y"")

ax = plt.subplot(1, 3, 2, projection=""3d"")
ax.scatter(X, Y, Z, c=c)
ax.set_title(
    ""3d plot, but now y is going in the depthwise direction.\nHave to relearn the plot.""
)
ax.set_xlabel(""x"")
ax.set_ylabel(""y"")
ax.set_zlabel(""z"")

ax = plt.subplot(1, 3, 3, projection=""3d"")
ax.scatter(X, Z, Y, c=c)
ax.set_title(
    (
        ""Interchange y and z, intuitive and builds on top of 2dplot\n""
        ""But now set_*labels doesn't make sense.""
    )
)
ax.set_xlabel(""x"")
ax.set_ylabel(""z"")
ax.set_zlabel(""y"")
```",Illviljan,open,2021-03-27 14:17:25,,,,2021-04-02 21:09:03,1,"Good first issue, New feature, topic: mplot3d",,
842497283,Small typo fixes to interactive guide.,"## PR Summary

## PR Checklist

<!-- Please mark any checkboxes that do not apply to this PR as [N/A]. -->

- [ ] Has pytest style unit tests (and `pytest` passes).
- [ ] Is [Flake 8](https://flake8.pycqa.org/en/latest/) compliant (run `flake8` on changed files to check).
- [ ] New features are documented, with examples if plot related.
- [ ] Documentation is sphinx and numpydoc compliant (the docs should [build](https://matplotlib.org/devel/documenting_mpl.html#building-the-docs) without error).
- [ ] Conforms to Matplotlib style conventions (install `flake8-docstrings` and run `flake8 --docstring-convention=all`).
- [ ] New features have an entry in `doc/users/next_whats_new/` (follow instructions in README.rst there).
- [ ] API changes documented in `doc/api/next_api_changes/` (follow instructions in README.rst there).

<!--
Thank you so much for your PR!  To help us review your contribution, please
consider the following points:

- A development guide is available at https://matplotlib.org/devdocs/devel/index.html.

- Help with git and github is available at
  https://matplotlib.org/devel/gitwash/development_workflow.html.

- Do not create the PR out of master, but out of a separate branch.

- The PR title should summarize the changes, for example ""Raise ValueError on
  non-numeric input to set_xlim"".  Avoid non-descriptive titles such as
  ""Addresses issue #8576"".

- The summary should provide at least 1-2 sentences describing the pull request
  in detail (Why is this change required?  What problem does it solve?) and
  link to any relevant issues.

- If you are contributing fixes to docstrings, please pay attention to
  http://matplotlib.org/devel/documenting_mpl.html#formatting.  In particular,
  note the difference between using single backquotes, double backquotes, and
  asterisks in the markup.

We understand that PRs can sometimes be overwhelming, especially as the
reviews start coming in.  Please let us know if the reviews are unclear or
the recommended next step seems overly demanding, if you would like help in
addressing a reviewer's comments, or if you have been waiting too long to hear
back on your PR.
-->
",anntzer,closed,2021-03-27 12:47:18,,2021-03-27 19:27:08,timhoffm,2021-03-27 19:30:51,0,Documentation,v3.4-doc,62
842487495,Fix zorder handling for OffsetBoxes and subclasses.,"`kwargs` need to be handled separately via `Artist.update`.  This
pattern is consistent with other artist subclasses (Line2D, _ImageBase,
Text, etc.).

Closes https://github.com/matplotlib/matplotlib/issues/7650.

## PR Summary

## PR Checklist

<!-- Please mark any checkboxes that do not apply to this PR as [N/A]. -->

- [ ] Has pytest style unit tests (and `pytest` passes).
- [ ] Is [Flake 8](https://flake8.pycqa.org/en/latest/) compliant (run `flake8` on changed files to check).
- [ ] New features are documented, with examples if plot related.
- [ ] Documentation is sphinx and numpydoc compliant (the docs should [build](https://matplotlib.org/devel/documenting_mpl.html#building-the-docs) without error).
- [ ] Conforms to Matplotlib style conventions (install `flake8-docstrings` and run `flake8 --docstring-convention=all`).
- [ ] New features have an entry in `doc/users/next_whats_new/` (follow instructions in README.rst there).
- [ ] API changes documented in `doc/api/next_api_changes/` (follow instructions in README.rst there).

<!--
Thank you so much for your PR!  To help us review your contribution, please
consider the following points:

- A development guide is available at https://matplotlib.org/devdocs/devel/index.html.

- Help with git and github is available at
  https://matplotlib.org/devel/gitwash/development_workflow.html.

- Do not create the PR out of master, but out of a separate branch.

- The PR title should summarize the changes, for example ""Raise ValueError on
  non-numeric input to set_xlim"".  Avoid non-descriptive titles such as
  ""Addresses issue #8576"".

- The summary should provide at least 1-2 sentences describing the pull request
  in detail (Why is this change required?  What problem does it solve?) and
  link to any relevant issues.

- If you are contributing fixes to docstrings, please pay attention to
  http://matplotlib.org/devel/documenting_mpl.html#formatting.  In particular,
  note the difference between using single backquotes, double backquotes, and
  asterisks in the markup.

We understand that PRs can sometimes be overwhelming, especially as the
reviews start coming in.  Please let us know if the reviews are unclear or
the recommended next step seems overly demanding, if you would like help in
addressing a reviewer's comments, or if you have been waiting too long to hear
back on your PR.
-->
",anntzer,closed,2021-03-27 11:47:55,,2021-03-28 17:21:44,jklymak,2021-03-28 17:21:54,0,,v3.5.0,59
842465827,Reformat references,"Follow-up to #19774.

",timhoffm,closed,2021-03-27 09:38:11,,2021-04-01 21:55:35,jklymak,2021-04-01 22:14:29,1,Documentation,v3.4-doc,62
842452263,Marker sizes in Axes3D scatter plot are changing all the time,"<!--To help us understand and resolve your issue, please fill out the form to the best of your ability.-->
<!--You can feel free to delete the sections that do not apply.-->

### Bug report

**Bug summary**

<!--A short 1-2 sentences that succinctly describes the bug-->

The marker sizes that specified with `s=` argument in `scatter` function are wrong, and even worse, the markers are changing their sizes every time the plot is re-rendered (panning or resizing). It seems that the sizes are randomly reassigned to these markers.

**Code for reproduction**

<!--A minimum code snippet required to reproduce the bug.
Please make sure to minimize the number of dependencies required, and provide
any necessary plotted data.
Avoid using threads, as Matplotlib is (explicitly) not thread-safe.-->

```python
import numpy as np
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D

fig = plt.figure()

# matplotlib 3.4
ax = Axes3D(fig, auto_add_to_figure=False)
fig.add_axes(ax)
# matplotlib 3.3.4
# Axes3D(fig)

x = np.random.rand(200)
y = np.random.rand(200)
z = np.random.rand(200)
ax.scatter(x, y, z, s=x*50)

plt.show()
```

**Actual outcome**

<!--The output produced by the above code, which may be a screenshot, console output, etc.-->


https://user-images.githubusercontent.com/12032219/112714930-df66ad00-8f17-11eb-8800-292ac7cf4e02.mp4

**Expected outcome**

<!--A description of the expected outcome from the code snippet-->
<!--If this used to work in an earlier version of Matplotlib, please note the version it used to work on-->

As shown in the screen recording, the sizes are correct and not changing. `matplotlib` was 3.3.4 in the following example.


https://user-images.githubusercontent.com/12032219/112715101-6cf6cc80-8f19-11eb-963a-4fc1d9b6e40f.mp4



**Matplotlib version**
<!--Please specify your platform and versions of the relevant libraries you are using:-->
  * Operating system: Arch Linux
  * Matplotlib version (`import matplotlib; print(matplotlib.__version__)`): 3.4.0
  * Matplotlib backend (`print(matplotlib.get_backend())`): Qt5Agg
  * Python version: 3.9.2
  * Jupyter version (if applicable): Not using it
  * Other libraries: numpy 1.20.1

<!--Please tell us how you installed matplotlib and python e.g., from source, pip, conda-->
<!--If you installed from conda, please specify which channel you used if not the default-->

I installed both python, numpy and matplotlib with `pacman` package manager from Arch's official repository.",OliverLew,closed,2021-03-27 08:30:23,,2021-03-31 04:56:09,QuLogic,2021-03-31 04:56:09,8,"Release critical, status: confirmed bug, topic: mplot3d",v3.4.1,61
842437391,Fix code-of-conduct link on doc homepage.,"## PR Summary

The link is not modified by Sphinx and  just goes to `../CODE_OF_CONDUCT.md`, which doesn't exist in the Sphinx docs.

I already directly patched this on the docs repo after building 3.4.0 docs.

## PR Checklist

- [n/a] Has pytest style unit tests (and `pytest` passes).
- [n/a] Is [Flake 8](https://flake8.pycqa.org/en/latest/) compliant (run `flake8` on changed files to check).
- [n/a] New features are documented, with examples if plot related.
- [x] Documentation is sphinx and numpydoc compliant (the docs should [build](https://matplotlib.org/devel/documenting_mpl.html#building-the-docs) without error).
- [x] Conforms to Matplotlib style conventions (install `flake8-docstrings` and run `flake8 --docstring-convention=all`).
- [n/a] New features have an entry in `doc/users/next_whats_new/` (follow instructions in README.rst there).
- [n/a] API changes documented in `doc/api/next_api_changes/` (follow instructions in README.rst there).",QuLogic,closed,2021-03-27 07:13:38,,2021-03-27 19:28:54,timhoffm,2021-03-27 19:28:55,0,Documentation,v3.4-doc,62
842417082,Starting point of annotation arrows has changed in 3.4.0,"<!--To help us understand and resolve your issue, please fill out the form to the best of your ability.-->
<!--You can feel free to delete the sections that do not apply.-->

### Bug report

**Bug summary**

It is now behind the text. See https://matplotlib.org/3.4.0/gallery/text_labels_and_annotations/fancyarrow_demo.html.

",timhoffm,closed,2021-03-27 04:52:51,,2021-03-30 13:30:37,timhoffm,2021-03-30 13:53:07,1,,v3.4.1,61
842410460,FIX errorbar problem with fillstyle,"## PR Summary
close #19776.

I don't know if this is exactly the reason for the problem, but it can fix the reported problem.

## PR Checklist

<!-- Please mark any checkboxes that do not apply to this PR as [N/A]. -->

- [x] Has pytest style unit tests (and `pytest` passes).
- [x] Is [Flake 8](https://flake8.pycqa.org/en/latest/) compliant (run `flake8` on changed files to check).
- [N/A] New features are documented, with examples if plot related.
- [N/A] Documentation is sphinx and numpydoc compliant (the docs should [build](https://matplotlib.org/devel/documenting_mpl.html#building-the-docs) without error).
- [x] Conforms to Matplotlib style conventions (install `flake8-docstrings` and run `flake8 --docstring-convention=all`).
- [N/A] New features have an entry in `doc/users/next_whats_new/` (follow instructions in README.rst there).
- [N/A] API changes documented in `doc/api/next_api_changes/` (follow instructions in README.rst there).

<!--
Thank you so much for your PR!  To help us review your contribution, please
consider the following points:

- A development guide is available at https://matplotlib.org/devdocs/devel/index.html.

- Help with git and github is available at
  https://matplotlib.org/devel/gitwash/development_workflow.html.

- Do not create the PR out of master, but out of a separate branch.

- The PR title should summarize the changes, for example ""Raise ValueError on
  non-numeric input to set_xlim"".  Avoid non-descriptive titles such as
  ""Addresses issue #8576"".

- The summary should provide at least 1-2 sentences describing the pull request
  in detail (Why is this change required?  What problem does it solve?) and
  link to any relevant issues.

- If you are contributing fixes to docstrings, please pay attention to
  http://matplotlib.org/devel/documenting_mpl.html#formatting.  In particular,
  note the difference between using single backquotes, double backquotes, and
  asterisks in the markup.

We understand that PRs can sometimes be overwhelming, especially as the
reviews start coming in.  Please let us know if the reviews are unclear or
the recommended next step seems overly demanding, if you would like help in
addressing a reviewer's comments, or if you have been waiting too long to hear
back on your PR.
-->
",smartlixx,closed,2021-03-27 04:06:14,,2021-03-30 03:02:13,QuLogic,2021-03-30 04:26:18,3,,v3.4.1,61
842313197,Backport PR #19719 on branch v3.4.x (Respect antialiasing settings in cairo backends as well.),Backport PR #19719: Respect antialiasing settings in cairo backends as well.,meeseeksmachine,closed,2021-03-26 21:39:35,,2021-03-27 04:22:29,timhoffm,2021-03-27 04:22:29,0,,v3.4.1,61
842313128,Backport PR #19732 on branch v3.4.0-doc (Reword the axis_artist module docstring.),Backport PR #19732: Reword the axis_artist module docstring.,meeseeksmachine,closed,2021-03-26 21:39:28,,2021-03-27 04:22:16,timhoffm,2021-03-27 04:22:16,0,,v3.4-doc,62
842313059,Backport PR #19725/#19758 on branch v3.4.0-doc (Cleanup installing docs),Backport PR #19725: Cleanup installing docs,meeseeksmachine,closed,2021-03-26 21:39:19,,2021-03-26 22:10:47,QuLogic,2021-03-26 22:10:58,0,Documentation,v3.4-doc,62
842310183,redirect_from extension breaks latex build,"### Bug report

**Bug summary**

Running `make -C doc latexpdf` fails; the full traceback is:
```
# Sphinx version: 3.2.1
# Python version: 3.9.1 (CPython)
# Docutils version: 0.16 release
# Jinja2 version: 2.11.3
# Last messages:
#   reading sources... [ 48%] api/animation_api
#   reading sources... [ 48%] api/api_changes
#   reading sources... [ 48%] api/api_changes_old
#   reading sources... [ 48%] api/artist_api
#   reading sources... [ 48%] api/axes_api
#   reading sources... [ 48%] api/axis_api
#   reading sources... [ 48%] api/backend_agg_api
#   reading sources... [ 49%] api/backend_bases_api
#   reading sources... [ 49%] api/backend_cairo_api
#   reading sources... [ 49%] api/backend_gtk3_api
# Loaded extensions:
#   sphinx.ext.mathjax (3.2.1) from /usr/lib/python3.9/site-packages/sphinx/ext/mathjax.py
#   sphinxcontrib.applehelp (1.0.2) from /usr/lib/python3.9/site-packages/sphinxcontrib/applehelp/__init__.py
#   sphinxcontrib.devhelp (1.0.2) from /usr/lib/python3.9/site-packages/sphinxcontrib/devhelp/__init__.py
#   sphinxcontrib.htmlhelp (1.0.3) from /usr/lib/python3.9/site-packages/sphinxcontrib/htmlhelp/__init__.py
#   sphinxcontrib.serializinghtml (1.1.4) from /usr/lib/python3.9/site-packages/sphinxcontrib/serializinghtml/__init__.py
#   sphinxcontrib.qthelp (1.0.3) from /usr/lib/python3.9/site-packages/sphinxcontrib/qthelp/__init__.py
#   alabaster (0.7.12) from /usr/lib/python3.9/site-packages/alabaster/__init__.py
#   sphinx.ext.autodoc.type_comment (3.2.1) from /usr/lib/python3.9/site-packages/sphinx/ext/autodoc/type_comment.py
#   sphinx.ext.autodoc (3.2.1) from /usr/lib/python3.9/site-packages/sphinx/ext/autodoc/__init__.py
#   sphinx.ext.autosummary (3.2.1) from /usr/lib/python3.9/site-packages/sphinx/ext/autosummary/__init__.py
#   sphinx.ext.doctest (3.2.1) from /usr/lib/python3.9/site-packages/sphinx/ext/doctest.py
#   sphinx.ext.graphviz (3.2.1) from /usr/lib/python3.9/site-packages/sphinx/ext/graphviz.py
#   sphinx.ext.inheritance_diagram (3.2.1) from /usr/lib/python3.9/site-packages/sphinx/ext/inheritance_diagram.py
#   sphinx.ext.intersphinx (3.2.1) from /usr/lib/python3.9/site-packages/sphinx/ext/intersphinx.py
#   sphinx.ext.ifconfig (3.2.1) from /usr/lib/python3.9/site-packages/sphinx/ext/ifconfig.py
#   sphinx.ext.viewcode (3.2.1) from /usr/lib/python3.9/site-packages/sphinx/ext/viewcode.py
#   IPython.sphinxext.ipython_console_highlighting (unknown version) from /usr/lib/python3.9/site-packages/IPython/sphinxext/ipython_console_highlighting.py
#   IPython.sphinxext.ipython_directive (unknown version) from /usr/lib/python3.9/site-packages/IPython/sphinxext/ipython_directive.py
#   numpydoc (0.9.2) from /usr/lib/python3.9/site-packages/numpydoc/__init__.py
#   sphinx_gallery.gen_gallery (0.7.0) from /usr/lib/python3.9/site-packages/sphinx_gallery/gen_gallery.py
#   matplotlib.sphinxext.mathmpl (unknown version) from /home/elliott/.local/lib/python3.9/site-packages/matplotlib/sphinxext/mathmpl.py
#   matplotlib.sphinxext.plot_directive (3.4.0) from /home/elliott/.local/lib/python3.9/site-packages/matplotlib/sphinxext/plot_directive.py
#   sphinxext.custom_roles (unknown version) from /home/elliott/code/matplotlib-3.4.0/doc/sphinxext/custom_roles.py
#   sphinxext.github (unknown version) from /home/elliott/code/matplotlib-3.4.0/doc/sphinxext/github.py
#   sphinxext.math_symbol_table (unknown version) from /home/elliott/code/matplotlib-3.4.0/doc/sphinxext/math_symbol_table.py
#   sphinxext.missing_references (unknown version) from /home/elliott/code/matplotlib-3.4.0/doc/sphinxext/missing_references.py
#   sphinxext.mock_gui_toolkits (unknown version) from /home/elliott/code/matplotlib-3.4.0/doc/sphinxext/mock_gui_toolkits.py
#   sphinxext.skip_deprecated (unknown version) from /home/elliott/code/matplotlib-3.4.0/doc/sphinxext/skip_deprecated.py
#   sphinxext.redirect_from (unknown version) from /home/elliott/code/matplotlib-3.4.0/doc/sphinxext/redirect_from.py
#   sphinx_copybutton (0.3.1) from /home/elliott/.local/lib/python3.9/site-packages/sphinx_copybutton/__init__.py
Traceback (most recent call last):
  File ""/usr/lib/python3.9/site-packages/sphinx/cmd/build.py"", line 280, in build_main
    app.build(args.force_all, filenames)
  File ""/usr/lib/python3.9/site-packages/sphinx/application.py"", line 348, in build
    self.builder.build_update()
  File ""/usr/lib/python3.9/site-packages/sphinx/builders/__init__.py"", line 294, in build_update
    self.build(['__all__'], to_build)
  File ""/usr/lib/python3.9/site-packages/sphinx/builders/__init__.py"", line 311, in build
    updated_docnames = set(self.read())
  File ""/usr/lib/python3.9/site-packages/sphinx/builders/__init__.py"", line 418, in read
    self._read_serial(docnames)
  File ""/usr/lib/python3.9/site-packages/sphinx/builders/__init__.py"", line 439, in _read_serial
    self.read_doc(docname)
  File ""/usr/lib/python3.9/site-packages/sphinx/builders/__init__.py"", line 479, in read_doc
    doctree = read_doc(self.app, self.env, self.env.doc2path(docname))
  File ""/usr/lib/python3.9/site-packages/sphinx/io.py"", line 223, in read_doc
    pub.publish()
  File ""/usr/lib/python3.9/site-packages/docutils/core.py"", line 217, in publish
    self.document = self.reader.read(self.source, self.parser,
  File ""/usr/lib/python3.9/site-packages/sphinx/io.py"", line 128, in read
    self.parse()
  File ""/usr/lib/python3.9/site-packages/docutils/readers/__init__.py"", line 77, in parse
    self.parser.parse(self.input, document)
  File ""/usr/lib/python3.9/site-packages/sphinx/parsers.py"", line 102, in parse
    self.statemachine.run(inputlines, document, inliner=self.inliner)
  File ""/usr/lib/python3.9/site-packages/docutils/parsers/rst/states.py"", line 170, in run
    results = StateMachineWS.run(self, input_lines, input_offset,
  File ""/usr/lib/python3.9/site-packages/docutils/statemachine.py"", line 241, in run
    context, next_state, result = self.check_line(
  File ""/usr/lib/python3.9/site-packages/docutils/statemachine.py"", line 459, in check_line
    return method(match, context, next_state)
  File ""/usr/lib/python3.9/site-packages/docutils/parsers/rst/states.py"", line 2342, in explicit_markup
    nodelist, blank_finish = self.explicit_construct(match)
  File ""/usr/lib/python3.9/site-packages/docutils/parsers/rst/states.py"", line 2354, in explicit_construct
    return method(self, expmatch)
  File ""/usr/lib/python3.9/site-packages/docutils/parsers/rst/states.py"", line 2096, in directive
    return self.run_directive(
  File ""/usr/lib/python3.9/site-packages/docutils/parsers/rst/states.py"", line 2146, in run_directive
    result = directive_instance.run()
  File ""/home/elliott/code/matplotlib-3.4.0/doc/sphinxext/redirect_from.py"", line 68, in run
    self.redirects[redirected_reldoc] = builder.get_relative_uri(
  File ""/usr/lib/python3.9/site-packages/sphinx/builders/latex/__init__.py"", line 150, in get_relative_uri
    return self.get_target_uri(to, typ)
  File ""/usr/lib/python3.9/site-packages/sphinx/builders/latex/__init__.py"", line 144, in get_target_uri
    raise NoUri(docname, typ)
sphinx.errors.NoUri: ('api/backend_gtk3_api', None)
```

**Matplotlib version**
  * Operating system: Fedora 33
  * Matplotlib version (`import matplotlib; print(matplotlib.__version__)`): 3.4.0
  * Matplotlib backend (`print(matplotlib.get_backend())`): n/a
  * Python version: 3.9.1
  * Other libraries: sphinx-build 3.2.1",QuLogic,closed,2021-03-26 21:33:33,jklymak,2021-03-28 21:56:14,timhoffm,2021-03-29 22:10:51,0,,v3.4.1,61
842200609,BUG: matplotlib 3.4.0 -- Scatter with colormap and legend gives TypeError: object of type 'NoneType' has no len(),"<!--To help us understand and resolve your issue, please fill out the form to the best of your ability.-->
<!--You can feel free to delete the sections that do not apply.-->

### Bug report

**Bug summary**

With `matplotlib` 3.4.0, scatter plot with colormap and legend gives `TypeError: object of type 'NoneType' has no len()`.

**Code for reproduction**

<!--A minimum code snippet required to reproduce the bug.
Please make sure to minimize the number of dependencies required, and provide
any necessary plotted data.
Avoid using threads, as Matplotlib is (explicitly) not thread-safe.-->

```python
import matplotlib.pyplot as plt
y = [1, 2, 3, 4, 5]
plt.scatter(y, y, label='Y', lw=0, s=8, c=y, cmap='viridis')
plt.legend()
plt.show()
```

**Actual outcome**

<!--The output produced by the above code, which may be a screenshot, console output, etc.-->

```
Traceback (most recent call last):
  File "".../matplotlib/backends/backend_qt5.py"", line 475, in _draw_idle
    self.draw()
  File "".../matplotlib/backends/backend_agg.py"", line 406, in draw
    self.figure.draw(self.renderer)
  File "".../matplotlib/artist.py"", line 74, in draw_wrapper
    result = draw(artist, renderer, *args, **kwargs)
  File "".../matplotlib/artist.py"", line 51, in draw_wrapper
    return draw(artist, renderer, *args, **kwargs)
  File "".../matplotlib/figure.py"", line 2734, in draw
    mimage._draw_list_compositing_images(
  File "".../matplotlib/image.py"", line 132, in _draw_list_compositing_images
    a.draw(renderer)
  File "".../matplotlib/artist.py"", line 51, in draw_wrapper
    return draw(artist, renderer, *args, **kwargs)
  File "".../matplotlib/_api/deprecation.py"", line 431, in wrapper
    return func(*inner_args, **inner_kwargs)
  File "".../matplotlib/axes/_base.py"", line 2925, in draw
    mimage._draw_list_compositing_images(renderer, self, artists)
  File "".../matplotlib/image.py"", line 132, in _draw_list_compositing_images
    a.draw(renderer)
  File "".../matplotlib/artist.py"", line 51, in draw_wrapper
    return draw(artist, renderer, *args, **kwargs)
  File "".../matplotlib/legend.py"", line 614, in draw
    self._legend_box.draw(renderer)
  File "".../matplotlib/offsetbox.py"", line 368, in draw
    c.draw(renderer)
  File "".../matplotlib/offsetbox.py"", line 368, in draw
    c.draw(renderer)
  File "".../matplotlib/offsetbox.py"", line 368, in draw
    c.draw(renderer)
  [Previous line repeated 1 more time]
  File "".../matplotlib/offsetbox.py"", line 694, in draw
    c.draw(renderer)
  File "".../matplotlib/artist.py"", line 51, in draw_wrapper
    return draw(artist, renderer, *args, **kwargs)
  File "".../matplotlib/collections.py"", line 1009, in draw
    super().draw(renderer)
  File "".../matplotlib/artist.py"", line 51, in draw_wrapper
    return draw(artist, renderer, *args, **kwargs)
  File "".../matplotlib/collections.py"", line 380, in draw
    len(facecolors) == 1 and len(edgecolors) == 1 and
TypeError: object of type 'NoneType' has no len()
```

**Expected outcome**

<!--A description of the expected outcome from the code snippet-->
<!--If this used to work in an earlier version of Matplotlib, please note the version it used to work on-->

With matplotlib 3.3.4, I get this (no warning or error):

![Screenshot 2021-03-26 141815](https://user-images.githubusercontent.com/2090236/112675923-28e2c980-8e3e-11eb-9954-9eda46cbb6ca.jpg)

**Matplotlib version**
<!--Please specify your platform and versions of the relevant libraries you are using:-->
  * Operating system: Red Hat Enterprise Linux Server release 7.9 (Maipo)
  * Matplotlib version (`import matplotlib; print(matplotlib.__version__)`): 3.4.0
  * Matplotlib backend (`print(matplotlib.get_backend())`): Qt5Agg
  * Python version: 3.8.3
  * Jupyter version (if applicable): N/A
  * Other libraries: Not sure what else you need, just let me know.

<!--Please tell us how you installed matplotlib and python e.g., from source, pip, conda-->
<!--If you installed from conda, please specify which channel you used if not the default-->

",pllim,closed,2021-03-26 18:19:04,,2021-03-31 07:04:54,QuLogic,2021-03-31 13:51:52,7,Release critical,v3.4.1,61
841830365,Min/max markers on box plot are not visible with 'dark_background' theme,"### Min/max markers on box plot are not visible with 'dark_background' theme

The min & max markers (the short lines at the ends of the whiskers) aren't visible with the 'dark_background' theme 

<!--A short 1-2 sentences that succinctly describes the bug-->

**Code for reproduction**


<!--A minimum code snippet required to reproduce the bug.
Please make sure to minimize the number of dependencies required, and provide
any necessary plotted data.
Avoid using threads, as Matplotlib is (explicitly) not thread-safe.-->

```python
import pandas as pd
import matplotlib.pyplot as plt

# Data is from the pandas plotting demo
# https://pandas.pydata.org/docs/getting_started/intro_tutorials/04_plotting.html
air_quality = pd.read_csv(""air_quality_no2.csv"", index_col=0, parse_dates=True)

plt.style.use('default')
air_quality.plot.box()

plt.style.use('dark_background')
air_quality.plot.box()

```

**Actual outcome**

![boxplot_issue](https://user-images.githubusercontent.com/2547618/112621690-f4f9ab00-8e21-11eb-9fcf-0c734f4d9831.png)


**Software versions**
  * Matplotlib version: 3.3.1
  * Matplotlib backend: module://ipykernel.pylab.backend_inline
  * Python version: 3.8.6
  * Jupyterlab version: 3.0.12 
  * Pandas: 1.2.3
  * Operating system: Sage Math 9.2 installation running on Ubuntu 20.10 on WSL in windows 10 64-bit

",sandyscott,closed,2021-03-26 11:02:52,,2021-03-31 04:58:07,jklymak,2021-04-06 00:46:37,3,status: downstream fix required,,
841736579,Simple AxisArtist Example Broken,"Following w/ the [Simple AxisArtist](https://matplotlib.org/devdocs/gallery/axisartist/simple_axisartist1.html#sphx-glr-gallery-axisartist-simple-axisartist1-py) example: 
```python
fig = plt.figure()
fig.subplots_adjust(right=0.85)
ax = fig.add_subplot(axes_class=axisartist.Axes)
```
I get the following attribute error on 3.1 and 3.3:
```AttributeError: 'AxesSubplot' object has no property 'axes_class'```

Not sure if it's that the docs are wrong or some PR introduced the bug. ",story645,closed,2021-03-26 08:58:07,,2021-03-26 08:59:31,story645,2021-03-26 09:00:45,1,Documentation,,
841718943,Errorbars with yerr fail when fillstyle is specified,"<!--To help us understand and resolve your issue, please fill out the form to the best of your ability.-->
<!--You can feel free to delete the sections that do not apply.-->

### Bug report

**Bug summary**

Errorbar plots don't accept the `fillstyle` keyword argument anymore when using `yerr`.

**Code for reproduction**

```python
import matplotlib.pyplot as plt
plt.errorbar([1, 2, 3, 4, 5], [5, 6, 7, 8, 9], yerr=[[1, 1, 1, 1, 1], [1, 1, 1,1, 1]], ls='None', mfc='r', fillstyle='full', ecolor = 'r', mec='r',marker='s',markersize=7)
```

**Actual outcome**

```
>>> import matplotlib.pyplot as plt
>>> plt.errorbar([1, 2, 3, 4, 5], [5, 6, 7, 8, 9], yerr=[[1, 1, 1, 1, 1], [1, 1, 1,1, 1]], ls='None', mfc='r', fillstyle='full', ecolor = 'r', mec='r',marker='s',markersize=7)
Traceback (most recent call last):
  File ""<stdin>"", line 1, in <module>
  File ""/opt/python_environments/shark/lib/python3.8/site-packages/matplotlib/pyplot.py"", line 2741, in errorbar
    return gca().errorbar(
  File ""/opt/python_environments/shark/lib/python3.8/site-packages/matplotlib/__init__.py"", line 1352, in inner
    return func(ax, *map(sanitize_sequence, args), **kwargs)
  File ""/opt/python_environments/shark/lib/python3.8/site-packages/matplotlib/axes/_axes.py"", line 3497, in errorbar
    barcols.append(self.vlines(
  File ""/opt/python_environments/shark/lib/python3.8/site-packages/matplotlib/__init__.py"", line 1352, in inner
    return func(ax, *map(sanitize_sequence, args), **kwargs)
  File ""/opt/python_environments/shark/lib/python3.8/site-packages/matplotlib/axes/_axes.py"", line 1120, in vlines
    lines.update(kwargs)
  File ""/opt/python_environments/shark/lib/python3.8/site-packages/matplotlib/artist.py"", line 1062, in update
    raise AttributeError(f""{type(self).__name__!r} object ""
AttributeError: 'LineCollection' object has no property 'fillstyle'
```

**Expected outcome**

The code to work as before.

**Matplotlib version**

Installed on a virtual environment via `pip install -U matplotlib`:
```
$ pip freeze | grep matplotlib
matplotlib==3.4.0
```

Downgrading to `matplotlib!=3.4` (==3.3.4) works.",rtobar,closed,2021-03-26 08:33:15,,2021-03-30 03:02:12,QuLogic,2021-03-30 03:02:12,1,,v3.4.1,61
841419223,Fix deprecation for imread on URLs.,"## PR Summary

This deprecation is missing the addition/removal version, and it triggers an extra warning because it uses the old `cbook.warn_deprecated`.

## PR Checklist

- [x] Has pytest style unit tests (and `pytest` passes).
- [x] Is [Flake 8](https://flake8.pycqa.org/en/latest/) compliant (run `flake8` on changed files to check).
- [n/a] New features are documented, with examples if plot related.
- [n/a] Documentation is sphinx and numpydoc compliant (the docs should [build](https://matplotlib.org/devel/documenting_mpl.html#building-the-docs) without error).
- [x] Conforms to Matplotlib style conventions (install `flake8-docstrings` and run `flake8 --docstring-convention=all`).
- [n/a] New features have an entry in `doc/users/next_whats_new/` (follow instructions in README.rst there).
- [n/a] API changes documented in `doc/api/next_api_changes/` (follow instructions in README.rst there).",QuLogic,closed,2021-03-25 23:22:39,,2021-03-26 01:34:51,QuLogic,2021-03-26 01:35:34,1,,v3.4.0,53
841381407,Document how to create sphinx-gallery references to examples,"Closes #19232.

- Description.
- One example how this looks like.

I will create a good first issue to migrate all existing reference blocks to the new format once this PR is merged.",timhoffm,closed,2021-03-25 22:40:28,,2021-03-26 00:23:33,QuLogic,2021-03-29 20:45:03,9,Documentation,v3.4-doc,62
841364086,get contour auto label coordinates,"Is it possible to easily access the automatically determined contour label coordinates?

Contour example from [the documentation](https://matplotlib.org/stable/gallery/images_contours_and_fields/contour_demo.html)

```
import matplotlib
import numpy as np
import matplotlib.cm as cm
import matplotlib.pyplot as plt

delta = 0.025
x = np.arange(-3.0, 3.0, delta)
y = np.arange(-2.0, 2.0, delta)
X, Y = np.meshgrid(x, y)
Z1 = np.exp(-X**2 - Y**2)
Z2 = np.exp(-(X - 1)**2 - (Y - 1)**2)
Z = (Z1 - Z2) * 2

fig, ax = plt.subplots()
CS = ax.contour(X, Y, Z)
CS_labels = ax.clabel(CS, inline=True, fontsize=10)
ax.set_title('Simplest default with labels')
```

### Proposed Solution

I would like to do something like:

`label_locations = CS_labels.label_coords` 

where   `label_locations` is an array of (x,y) coordinates for each automatically determined label. It would be helpful to have access to this auto-determined set and modify manually as needed, especially when dealing with labels in [geospatial coordinates](https://scitools.org.uk/cartopy/docs/latest/gallery/contour_labels.html).

### Additional context

Related to https://github.com/matplotlib/matplotlib/issues/613

Also asked on [stackoverflow](https://stackoverflow.com/questions/66807997/get-matplotlib-cartopy-contour-auto-label-coordinates) ",friedrichknuth,closed,2021-03-25 22:19:32,,2021-03-25 22:56:26,jklymak,2021-03-25 23:05:06,2,"Community support, New feature",,
841307377,Backport PR #19535 on branch v3.4.x (Fix example's BasicUnit array conversion.),Backport PR #19535: Fix example's BasicUnit array conversion.,meeseeksmachine,closed,2021-03-25 21:05:06,,2021-03-25 22:25:07,QuLogic,2021-03-25 22:25:07,1,,v3.4.0,53
841247749,Backport PR #19757 on branch v3.4.x (Fixed python -mpip typo),Backport PR #19757: Fixed python -mpip typo,meeseeksmachine,closed,2021-03-25 19:36:30,,2021-03-25 21:04:19,QuLogic,2021-03-25 21:04:19,0,,v3.4.0,53
841247596,Backport PR #19739 on branch v3.4.x (Changed 'python -mpip' to 'python -m pip' for consistency),Backport PR #19739: Changed 'python -mpip' to 'python -m pip' for consistency,meeseeksmachine,closed,2021-03-25 19:36:18,,2021-03-25 20:42:23,QuLogic,2021-03-25 20:42:23,0,,v3.4.0,53
841083465,Memory leak when plotting multiple figures with the macOS backend,"<!--To help us understand and resolve your issue, please fill out the form to the best of your ability.-->
<!--You can feel free to delete the sections that do not apply.-->

### Bug report

**Bug summary**

Hi,

I believe I have found a memory issue when plotting multiple figures with the macOS backend.

Here is a minimal working example:

```python
import sys
import matplotlib.pyplot as plt
import numpy as np

import matplotlib
#matplotlib.use('agg')

data = np.random.rand(60, 60)

def plot_expr(plot_name):

    plt.figure(figsize=(9, 8))

    for i in range(60):
        plt.plot(data[i, :])

    plt.savefig(plot_name)

    plt.close('all')


if __name__ == ""__main__"":

    print(f'python: {sys.version}')
    print(f'matplotlib: {matplotlib.__version__}')
    print(f'backend: {matplotlib.get_backend()}')

    for i in range(50):
        print(f'{i}...')
        plot_expr(f'leak_{i}')
```

When running the code with `memory-profiler`, I obtain something like:
![leak](https://user-images.githubusercontent.com/302936/112503511-44d96300-8d8b-11eb-9e52-603118751133.png)

Even though I am explicitly calling the `plt.close()` function.

When using the `'agg'` backend instead of the `'MacOSX'` backend by uncommenting line 6, I get:
![no_leak](https://user-images.githubusercontent.com/302936/112503746-781bf200-8d8b-11eb-97a6-79f49fb140cc.png)

Which I would expect to be the normal behavior.

As I have been unable to reproduce this on Linux, I assume that the issue is with the macOS backend.

**Matplotlib version**
<!--Please specify your platform and versions of the relevant libraries you are using:-->
  * Operating system: `macOS 11.2.1`
  * Matplotlib version `3.3.4`
  * Matplotlib backend `MacOSX`
  * Python version: `3.7.9`

I installed Python via `venv` and matplotlib via `pip`.


Cheers,

Théotime",tgrohens,open,2021-03-25 16:08:15,,,,2021-03-26 12:12:14,6,"GUI/osx, Performance",,
841034233,Overlay created by `Axes.indicate_inset_zoom` does not adjust when changing inset ranges,"`Axes.indicate_inset_zoom` just creates a static overlay which does not adjust when inset axes ranges are changed. Additional calls to `Axes.indicate_inset_zoom` will create new overlays. It is expected that the result of this
```python
ax.indicate_inset_zoom(ax_inset)
ax_inset.set_xlim(new_lim)
```
and this
```python
ax_inset.set_xlim(new_lim)
ax.indicate_inset_zoom(ax_inset)
```
are exactly the same.",pulkin,open,2021-03-25 15:16:23,,,,2021-03-25 16:52:04,1,New feature,,
840727016,Backport PR #19766 on branch v3.4.x (Set colormap modification removal to 3.6.),Backport PR #19766: Set colormap modification removal to 3.6.,meeseeksmachine,closed,2021-03-25 09:18:58,,2021-03-25 13:48:59,tacaswell,2021-03-25 13:49:00,0,,v3.4.0,53
840415069,Set colormap modification removal to 3.6.,"## PR Summary

The deprecation would normally be removed 2 releases later (i.e., 3.5 for a 3.3 deprecation), but we need to extend it as we didn't fully determine the intermediate changes to make.

See #16991 and #19609.

## PR Checklist

- [x] Has pytest style unit tests (and `pytest` passes).
- [x] Is [Flake 8](https://flake8.pycqa.org/en/latest/) compliant (run `flake8` on changed files to check).
- [n/a] New features are documented, with examples if plot related.
- [n/a] Documentation is sphinx and numpydoc compliant (the docs should [build](https://matplotlib.org/devel/documenting_mpl.html#building-the-docs) without error).
- [x] Conforms to Matplotlib style conventions (install `flake8-docstrings` and run `flake8 --docstring-convention=all`).
- [n/a] New features have an entry in `doc/users/next_whats_new/` (follow instructions in README.rst there).
- [n/a] API changes documented in `doc/api/next_api_changes/` (follow instructions in README.rst there).",QuLogic,closed,2021-03-25 00:37:39,,2021-03-25 09:18:24,anntzer,2021-03-25 09:44:11,0,topic: color/color & colormaps,v3.4.0,53
840168982,ENH: use canvas renderer in draw,"## PR Summary

I'm not sure why we required the renderer to be passed to `fig.draw`, but suggest we allow it to be a kwarg and default to `fig.canvas.get_renderer()`

## PR Checklist

<!-- Please mark any checkboxes that do not apply to this PR as [N/A]. -->

- [ ] Has pytest style unit tests (and `pytest` passes).
- [ ] Is [Flake 8](https://flake8.pycqa.org/en/latest/) compliant (run `flake8` on changed files to check).
- [ ] New features are documented, with examples if plot related.
- [ ] Documentation is sphinx and numpydoc compliant (the docs should [build](https://matplotlib.org/devel/documenting_mpl.html#building-the-docs) without error).
- [ ] Conforms to Matplotlib style conventions (install `flake8-docstrings` and run `flake8 --docstring-convention=all`).
- [ ] New features have an entry in `doc/users/next_whats_new/` (follow instructions in README.rst there).
- [ ] API changes documented in `doc/api/next_api_changes/` (follow instructions in README.rst there).

<!--
Thank you so much for your PR!  To help us review your contribution, please
consider the following points:

- A development guide is available at https://matplotlib.org/devdocs/devel/index.html.

- Help with git and github is available at
  https://matplotlib.org/devel/gitwash/development_workflow.html.

- Do not create the PR out of master, but out of a separate branch.

- The PR title should summarize the changes, for example ""Raise ValueError on
  non-numeric input to set_xlim"".  Avoid non-descriptive titles such as
  ""Addresses issue #8576"".

- The summary should provide at least 1-2 sentences describing the pull request
  in detail (Why is this change required?  What problem does it solve?) and
  link to any relevant issues.

- If you are contributing fixes to docstrings, please pay attention to
  http://matplotlib.org/devel/documenting_mpl.html#formatting.  In particular,
  note the difference between using single backquotes, double backquotes, and
  asterisks in the markup.

We understand that PRs can sometimes be overwhelming, especially as the
reviews start coming in.  Please let us know if the reviews are unclear or
the recommended next step seems overly demanding, if you would like help in
addressing a reviewer's comments, or if you have been waiting too long to hear
back on your PR.
-->
",jklymak,open,2021-03-24 21:13:41,,,jklymak,2021-03-30 03:43:46,16,API: consistency,v3.5.0,59
840115295,Backport PR #19762 on branch v3.4.x (FIX: do not report that webagg supports blitting),Backport PR #19762: FIX: do not report that webagg supports blitting,meeseeksmachine,closed,2021-03-24 19:53:36,,2021-03-24 23:11:51,timhoffm,2021-03-24 23:11:51,0,,v3.4.0,53
839455258,Remove visibility changes in draw for *Cursor widgets,"## PR Summary

This can be all handled in the mouse move event handler instead, and prevents triggering extra draws in nbAgg.

Fixes #19633.

Additionally, mark access to said event handlers as deprecated.

## PR Checklist

- [ ] Has pytest style unit tests (and `pytest` passes).
- [x] Is [Flake 8](https://flake8.pycqa.org/en/latest/) compliant (run `flake8` on changed files to check).
- [n/a] New features are documented, with examples if plot related.
- [x] Documentation is sphinx and numpydoc compliant (the docs should [build](https://matplotlib.org/devel/documenting_mpl.html#building-the-docs) without error).
- [x] Conforms to Matplotlib style conventions (install `flake8-docstrings` and run `flake8 --docstring-convention=all`).
- [n/a] New features have an entry in `doc/users/next_whats_new/` (follow instructions in README.rst there).
- [x] API changes documented in `doc/api/next_api_changes/` (follow instructions in README.rst there).",QuLogic,open,2021-03-24 07:55:54,,,,2021-03-26 00:51:40,0,widgets/UI,v3.5.0,59
839319326,FIX: do not report that webagg supports blitting,"We now implement the required underlying methods (copy_from_bbox and
restore_region), but there are issues with the double buffering in nbagg,
initialization issues, and with updates to the front end being dropped.

For mpl3.4.0 over-ride the class property that checks for the required methods
until we can fix the issues with blitting.

Closes #19701

## PR Summary

## PR Checklist

<!-- Please mark any checkboxes that do not apply to this PR as [N/A]. -->

- [ ] Has pytest style unit tests (and `pytest` passes).
- [ ] Is [Flake 8](https://flake8.pycqa.org/en/latest/) compliant (run `flake8` on changed files to check).
- [ ] New features are documented, with examples if plot related.
- [ ] Documentation is sphinx and numpydoc compliant (the docs should [build](https://matplotlib.org/devel/documenting_mpl.html#building-the-docs) without error).
- [ ] Conforms to Matplotlib style conventions (install `flake8-docstrings` and run `flake8 --docstring-convention=all`).
- [ ] New features have an entry in `doc/users/next_whats_new/` (follow instructions in README.rst there).
- [ ] API changes documented in `doc/api/next_api_changes/` (follow instructions in README.rst there).

<!--
Thank you so much for your PR!  To help us review your contribution, please
consider the following points:

- A development guide is available at https://matplotlib.org/devdocs/devel/index.html.

- Help with git and github is available at
  https://matplotlib.org/devel/gitwash/development_workflow.html.

- Do not create the PR out of master, but out of a separate branch.

- The PR title should summarize the changes, for example ""Raise ValueError on
  non-numeric input to set_xlim"".  Avoid non-descriptive titles such as
  ""Addresses issue #8576"".

- The summary should provide at least 1-2 sentences describing the pull request
  in detail (Why is this change required?  What problem does it solve?) and
  link to any relevant issues.

- If you are contributing fixes to docstrings, please pay attention to
  http://matplotlib.org/devel/documenting_mpl.html#formatting.  In particular,
  note the difference between using single backquotes, double backquotes, and
  asterisks in the markup.

We understand that PRs can sometimes be overwhelming, especially as the
reviews start coming in.  Please let us know if the reviews are unclear or
the recommended next step seems overly demanding, if you would like help in
addressing a reviewer's comments, or if you have been waiting too long to hear
back on your PR.
-->
",tacaswell,closed,2021-03-24 03:58:28,,2021-03-24 18:47:24,QuLogic,2021-03-24 19:52:50,2,Release critical,v3.4.0,53
839279099,Backport PR #19746 on branch v3.4.x (Fix resizing in nbAgg.),Backport PR #19746: Fix resizing in nbAgg.,meeseeksmachine,closed,2021-03-24 02:20:33,,2021-03-24 03:17:26,tacaswell,2021-03-24 03:17:26,0,,v3.4.0,53
838692085,Speed up _delete_parameter.,"`_delete_parameter` is currently used on `Tick.__init__`, which is
called *very* often when creating many axes.  This patch speeds up
```
MPLBACKEND=agg python -mtimeit -s 'from matplotlib.figure import Figure' -- 'Figure().subplots(10, 10)'
```
by ~20-25% (currently, just generating an 10x10 empty grid of axes takes
~1s).

## PR Summary

## PR Checklist

<!-- Please mark any checkboxes that do not apply to this PR as [N/A]. -->

- [ ] Has pytest style unit tests (and `pytest` passes).
- [ ] Is [Flake 8](https://flake8.pycqa.org/en/latest/) compliant (run `flake8` on changed files to check).
- [ ] New features are documented, with examples if plot related.
- [ ] Documentation is sphinx and numpydoc compliant (the docs should [build](https://matplotlib.org/devel/documenting_mpl.html#building-the-docs) without error).
- [ ] Conforms to Matplotlib style conventions (install `flake8-docstrings` and run `flake8 --docstring-convention=all`).
- [ ] New features have an entry in `doc/users/next_whats_new/` (follow instructions in README.rst there).
- [ ] API changes documented in `doc/api/next_api_changes/` (follow instructions in README.rst there).

<!--
Thank you so much for your PR!  To help us review your contribution, please
consider the following points:

- A development guide is available at https://matplotlib.org/devdocs/devel/index.html.

- Help with git and github is available at
  https://matplotlib.org/devel/gitwash/development_workflow.html.

- Do not create the PR out of master, but out of a separate branch.

- The PR title should summarize the changes, for example ""Raise ValueError on
  non-numeric input to set_xlim"".  Avoid non-descriptive titles such as
  ""Addresses issue #8576"".

- The summary should provide at least 1-2 sentences describing the pull request
  in detail (Why is this change required?  What problem does it solve?) and
  link to any relevant issues.

- If you are contributing fixes to docstrings, please pay attention to
  http://matplotlib.org/devel/documenting_mpl.html#formatting.  In particular,
  note the difference between using single backquotes, double backquotes, and
  asterisks in the markup.

We understand that PRs can sometimes be overwhelming, especially as the
reviews start coming in.  Please let us know if the reviews are unclear or
the recommended next step seems overly demanding, if you would like help in
addressing a reviewer's comments, or if you have been waiting too long to hear
back on your PR.
-->
",anntzer,closed,2021-03-23 12:49:23,,2021-03-24 19:51:48,tacaswell,2021-03-24 20:35:28,3,Performance,v3.5.0,59
838405308,plot bug,"<!--To help us understand and resolve your issue, please fill out the form to the best of your ability.-->
<!--You can feel free to delete the sections that do not apply.-->

### Bug report

**Bug summary**

I wanted to plot a simple graph, but it doesn't work. And in some cases, it works strangely.

**Code for reproduction(1)**

Almost every plt.plot(); doesn't work well but this is one of my codes:

```python
import numpy as np
import matplotlib.pyplot as plt

x = np.array([-1,0,1])
t = np.array([1,1,2])
w = np.array([3,3])
def dmse_line(x,t,w):
    y = w[0] * x + w[1]
    dw0 = 2*np.mean((y-t)*x)
    dw1 = 2*np.mean(y-t)
    return np.array([dw0, dw1])

for i in range(100):
    w = w - 0.1*dmse_line(x,t,w)
    plt.plot(w[0],w[1]) 
   
plt.show()
```

**Actual outcome(1)**

<!--The output produced by the above code, which may be a screenshot, console output, etc.-->

![image](https://user-images.githubusercontent.com/48609198/112103804-a2d04400-8bed-11eb-8939-03e88f20280f.png)

**Code for reproduction(2)**

plt.plot(x,y,'o') draws rainbow dots, which is unusual.

```python
import numpy as np
import matplotlib.pyplot as plt

x = np.array([-1,0,1])
t = np.array([1,1,2])
w = np.array([3,3])
def dmse_line(x,t,w):
    y = w[0] * x + w[1]
    dw0 = 2*np.mean((y-t)*x)
    dw1 = 2*np.mean(y-t)
    return np.array([dw0, dw1])

for i in range(100):
    w = w - 0.1*dmse_line(x,t,w)
    plt.plot(w[0],w[1],'o') 
   
plt.show()
```

**Actual outcome(2)**

<!--The output produced by the above code, which may be a screenshot, console output, etc.-->

![image](https://user-images.githubusercontent.com/48609198/112104490-9e585b00-8bee-11eb-9716-094ade262cea.png)


**Matplotlib version**
<!--Please specify your platform and versions of the relevant libraries you are using:-->
  * Operating system: Windows 10 and my editor is VSCode
  * Matplotlib version (`import matplotlib; print(matplotlib.__version__)`):  3.3.4
  * Matplotlib backend (`print(matplotlib.get_backend())`): TkAgg
  * Python version: 3.9.1
  * Jupyter version (if applicable): 
  * Other libraries: 
  *Package             Version
------------------- --------
argon2-cffi         20.1.0  
astroid             2.5     
async-generator     1.10    
attrs               20.3.0
backcall            0.2.0
bleach              3.3.0
cffi                1.14.5
colorama            0.4.4
colour              0.1.5
commonmark          0.9.1
cycler              0.10.0
decorator           4.4.2
defusedxml          0.6.0
entrypoints         0.3
glcontext           2.3.2
ipykernel           5.5.0
ipython             7.21.0
ipython-genutils    0.2.0
ipywidgets          7.6.3
isort               5.7.0
jedi                0.18.0
Jinja2              2.11.3
jsonschema          3.2.0
jupyter             1.0.0
jupyter-client      6.1.11
jupyter-console     6.2.0
jupyter-core        4.7.1
jupyterlab-pygments 0.1.2
jupyterlab-widgets  1.0.0
kiwisolver          1.3.1
lazy-object-proxy   1.5.2
manim               0.4.0
manimgl             1.0.0
ManimPango          0.2.4
mapbox-earcut       0.12.10
MarkupSafe          1.1.1
matplotlib          3.3.4
mccabe              0.6.1
mistune             0.8.4
moderngl            5.6.4
moderngl-window     2.3.0
mpmath              1.2.1
multipledispatch    0.6.0
nbclient            0.5.3
nbconvert           6.0.7
nbformat            5.1.2
nest-asyncio        1.5.1
networkx            2.5
nose                1.3.7
notebook            6.2.0
numpy               1.19.4
opencv-python       4.4.0.46
packaging           20.9
pandas              1.2.3
pandocfilters       1.4.3
parso               0.8.1
pickleshare         0.7.5
Pillow              8.0.1
pip                 21.0.1
progressbar         2.5
prometheus-client   0.9.0
prompt-toolkit      3.0.16
pycairo             1.20.0
pycparser           2.20
pydub               0.24.1
pyglet              1.5.15
Pygments            2.7.3
pylint              2.6.0
PyOpenGL            3.1.5
pyparsing           2.4.7
pyreadline          2.1
pyrr                0.10.3
pyrsistent          0.17.3
python-dateutil     2.8.1
pytz                2021.1
pywin32             300
pywinpty            0.5.7
PyYAML              5.4.1
pyzmq               22.0.3
qtconsole           5.0.2
QtPy                1.9.0
rich                6.2.0
scipy               1.6.0
screeninfo          0.6.7
Send2Trash          1.5.0
setuptools          49.2.1
six                 1.15.0
sympy               1.7.1
terminado           0.9.2
testpath            0.4.4
toml                0.10.2
tornado             6.1
tqdm                4.55.0
traitlets           5.0.5
typing-extensions   3.7.4.3
validators          0.18.2
wcwidth             0.2.5
webencodings        0.5.1
widgetsnbextension  3.5.1
wrapt               1.12.1

<!--Please tell us how you installed matplotlib and python e.g., from source, pip, conda-->
I installed matplotlib using pip


",Hansm-a,closed,2021-03-23 06:44:19,,2021-03-23 08:07:52,Hansm-a,2021-03-24 17:05:00,0,Community support,unassigned,15
838024698,DOC: fix minor typo from 19725,"## PR Summary

Fixes minor typo from #19725.


## PR Checklist

<!-- Please mark any checkboxes that do not apply to this PR as [N/A]. -->

- [ ] Has pytest style unit tests (and `pytest` passes).
- [ ] Is [Flake 8](https://flake8.pycqa.org/en/latest/) compliant (run `flake8` on changed files to check).
- [ ] New features are documented, with examples if plot related.
- [ ] Documentation is sphinx and numpydoc compliant (the docs should [build](https://matplotlib.org/devel/documenting_mpl.html#building-the-docs) without error).
- [ ] Conforms to Matplotlib style conventions (install `flake8-docstrings` and run `flake8 --docstring-convention=all`).
- [ ] New features have an entry in `doc/users/next_whats_new/` (follow instructions in README.rst there).
- [ ] API changes documented in `doc/api/next_api_changes/` (follow instructions in README.rst there).

<!--
Thank you so much for your PR!  To help us review your contribution, please
consider the following points:

- A development guide is available at https://matplotlib.org/devdocs/devel/index.html.

- Help with git and github is available at
  https://matplotlib.org/devel/gitwash/development_workflow.html.

- Do not create the PR out of master, but out of a separate branch.

- The PR title should summarize the changes, for example ""Raise ValueError on
  non-numeric input to set_xlim"".  Avoid non-descriptive titles such as
  ""Addresses issue #8576"".

- The summary should provide at least 1-2 sentences describing the pull request
  in detail (Why is this change required?  What problem does it solve?) and
  link to any relevant issues.

- If you are contributing fixes to docstrings, please pay attention to
  http://matplotlib.org/devel/documenting_mpl.html#formatting.  In particular,
  note the difference between using single backquotes, double backquotes, and
  asterisks in the markup.

We understand that PRs can sometimes be overwhelming, especially as the
reviews start coming in.  Please let us know if the reviews are unclear or
the recommended next step seems overly demanding, if you would like help in
addressing a reviewer's comments, or if you have been waiting too long to hear
back on your PR.
-->
",jklymak,closed,2021-03-22 19:06:00,,2021-03-22 21:42:53,tacaswell,2021-03-26 21:51:16,3,Documentation,v3.4-doc,62
837270991,Fixed python -mpip typo,"## PR Summary
- Fixes all the python -mpip typos found in the repository

## PR Checklist

<!-- Please mark any checkboxes that do not apply to this PR as [N/A]. -->

- [N/A] Has pytest style unit tests (and `pytest` passes).
- [N/A] Is [Flake 8](https://flake8.pycqa.org/en/latest/) compliant (run `flake8` on changed files to check).
- [N/A] New features are documented, with examples if plot related.
- [N/A] Documentation is sphinx and numpydoc compliant (the docs should [build](https://matplotlib.org/devel/documenting_mpl.html#building-the-docs) without error).
- [N/A] Conforms to Matplotlib style conventions (install `flake8-docstrings` and run `flake8 --docstring-convention=all`).
- [N/A] New features have an entry in `doc/users/next_whats_new/` (follow instructions in README.rst there).
- [N/A] API changes documented in `doc/api/next_api_changes/` (follow instructions in README.rst there).

<!--
Thank you so much for your PR!  To help us review your contribution, please
consider the following points:

- A development guide is available at https://matplotlib.org/devdocs/devel/index.html.

- Help with git and github is available at
  https://matplotlib.org/devel/gitwash/development_workflow.html.

- Do not create the PR out of master, but out of a separate branch.

- The PR title should summarize the changes, for example ""Raise ValueError on
  non-numeric input to set_xlim"".  Avoid non-descriptive titles such as
  ""Addresses issue #8576"".

- The summary should provide at least 1-2 sentences describing the pull request
  in detail (Why is this change required?  What problem does it solve?) and
  link to any relevant issues.

- If you are contributing fixes to docstrings, please pay attention to
  http://matplotlib.org/devel/documenting_mpl.html#formatting.  In particular,
  note the difference between using single backquotes, double backquotes, and
  asterisks in the markup.

We understand that PRs can sometimes be overwhelming, especially as the
reviews start coming in.  Please let us know if the reviews are unclear or
the recommended next step seems overly demanding, if you would like help in
addressing a reviewer's comments, or if you have been waiting too long to hear
back on your PR.
-->
Closes #19754 ",ceelo777,closed,2021-03-22 03:00:35,,2021-03-22 15:40:01,jklymak,2021-03-25 19:35:57,2,,v3.4.0,53
837204736,Minor cleanup of documentation guide,"## PR Summary

- shorten `.. literalinclude:` example
- link to Sphinx inheritance-diagram docs instead of explaining it ourselves
- remove emacs helpers. IMHO this is not relevant enough to justify additional clutter. (But hard-core emacs users may object).",timhoffm,closed,2021-03-21 22:58:20,,2021-03-23 23:55:34,QuLogic,2021-03-24 14:40:54,1,Documentation,v3.5.0,59
837192179,Avoid showing a black background before the plot is ready with Qt5agg backend ,"When I open a window to show a plot, the background of the canvas is first black for some time until the plot is ready. This can be up to several seconds for large datasets.
This is just a cosmetic annoyance, since the user experiences a ""flickering"" of the window.

I am using using Matplotlib 3.3.4 with Qt5 on Windows 10.
In an older release I used before (1.4.2 with Qt4) the window is not shown until the plot is ready, so the issue is never seen.

I suggest that the background color of the widget is shown before the plot is drawn.


",hppi-johnsson,open,2021-03-21 21:50:35,,,,2021-03-24 17:58:31,1,"Difficulty: Medium, GUI/Qt, Good first issue, Maintenance",v3.5.0,59
837140386,add space in python -mpip,"Per https://github.com/matplotlib/matplotlib/pull/19739#issuecomment-802368717 there are some places where there is a missing space in `python -m pip ...`...

",jklymak,closed,2021-03-21 17:48:09,,2021-03-22 15:40:01,jklymak,2021-03-25 19:36:07,0,"Documentation, Good first issue",v3.4.0,53
837099428,Cleanup string formatting in backend_pgf.,"Using ""\n"".join to keep things properly indented should have negligible
overhead compared to the subsequent tex subprocess invocation.  Also,
generating TeX strings (with a lot of curly braces) is one of the few
cases where old-style (%) formatting is more legible than .format
formatting.

(The papersize option of geometry is documented as equivalent to
{paperwidth,paperheight}).

## PR Summary

## PR Checklist

<!-- Please mark any checkboxes that do not apply to this PR as [N/A]. -->

- [ ] Has pytest style unit tests (and `pytest` passes).
- [ ] Is [Flake 8](https://flake8.pycqa.org/en/latest/) compliant (run `flake8` on changed files to check).
- [ ] New features are documented, with examples if plot related.
- [ ] Documentation is sphinx and numpydoc compliant (the docs should [build](https://matplotlib.org/devel/documenting_mpl.html#building-the-docs) without error).
- [ ] Conforms to Matplotlib style conventions (install `flake8-docstrings` and run `flake8 --docstring-convention=all`).
- [ ] New features have an entry in `doc/users/next_whats_new/` (follow instructions in README.rst there).
- [ ] API changes documented in `doc/api/next_api_changes/` (follow instructions in README.rst there).

<!--
Thank you so much for your PR!  To help us review your contribution, please
consider the following points:

- A development guide is available at https://matplotlib.org/devdocs/devel/index.html.

- Help with git and github is available at
  https://matplotlib.org/devel/gitwash/development_workflow.html.

- Do not create the PR out of master, but out of a separate branch.

- The PR title should summarize the changes, for example ""Raise ValueError on
  non-numeric input to set_xlim"".  Avoid non-descriptive titles such as
  ""Addresses issue #8576"".

- The summary should provide at least 1-2 sentences describing the pull request
  in detail (Why is this change required?  What problem does it solve?) and
  link to any relevant issues.

- If you are contributing fixes to docstrings, please pay attention to
  http://matplotlib.org/devel/documenting_mpl.html#formatting.  In particular,
  note the difference between using single backquotes, double backquotes, and
  asterisks in the markup.

We understand that PRs can sometimes be overwhelming, especially as the
reviews start coming in.  Please let us know if the reviews are unclear or
the recommended next step seems overly demanding, if you would like help in
addressing a reviewer's comments, or if you have been waiting too long to hear
back on your PR.
-->
",anntzer,closed,2021-03-21 14:54:41,,2021-03-21 21:43:55,timhoffm,2021-03-21 21:56:11,0,"Maintenance, backend/pgf",v3.5.0,59
836894984,"Cleanup backend_tools docstrings, and minor refactorings.","Properties already show up with their docstrings in the generated docs,
so no need to list them in a separate API section (also note that the
document type of the figure attribute was wrong).

## PR Summary

## PR Checklist

<!-- Please mark any checkboxes that do not apply to this PR as [N/A]. -->

- [ ] Has pytest style unit tests (and `pytest` passes).
- [ ] Is [Flake 8](https://flake8.pycqa.org/en/latest/) compliant (run `flake8` on changed files to check).
- [ ] New features are documented, with examples if plot related.
- [ ] Documentation is sphinx and numpydoc compliant (the docs should [build](https://matplotlib.org/devel/documenting_mpl.html#building-the-docs) without error).
- [ ] Conforms to Matplotlib style conventions (install `flake8-docstrings` and run `flake8 --docstring-convention=all`).
- [ ] New features have an entry in `doc/users/next_whats_new/` (follow instructions in README.rst there).
- [ ] API changes documented in `doc/api/next_api_changes/` (follow instructions in README.rst there).

<!--
Thank you so much for your PR!  To help us review your contribution, please
consider the following points:

- A development guide is available at https://matplotlib.org/devdocs/devel/index.html.

- Help with git and github is available at
  https://matplotlib.org/devel/gitwash/development_workflow.html.

- Do not create the PR out of master, but out of a separate branch.

- The PR title should summarize the changes, for example ""Raise ValueError on
  non-numeric input to set_xlim"".  Avoid non-descriptive titles such as
  ""Addresses issue #8576"".

- The summary should provide at least 1-2 sentences describing the pull request
  in detail (Why is this change required?  What problem does it solve?) and
  link to any relevant issues.

- If you are contributing fixes to docstrings, please pay attention to
  http://matplotlib.org/devel/documenting_mpl.html#formatting.  In particular,
  note the difference between using single backquotes, double backquotes, and
  asterisks in the markup.

We understand that PRs can sometimes be overwhelming, especially as the
reviews start coming in.  Please let us know if the reviews are unclear or
the recommended next step seems overly demanding, if you would like help in
addressing a reviewer's comments, or if you have been waiting too long to hear
back on your PR.
-->
",anntzer,closed,2021-03-20 19:38:04,,2021-03-23 23:24:36,timhoffm,2021-03-24 07:48:02,0,"Documentation, Maintenance",v3.5.0,59
836888612,Update some matplotlib.lines docstrings.,"(The comment at the end regarding instance methods is completely
outdated and doesn't even match the current code anymore.)

## PR Summary

## PR Checklist

<!-- Please mark any checkboxes that do not apply to this PR as [N/A]. -->

- [ ] Has pytest style unit tests (and `pytest` passes).
- [ ] Is [Flake 8](https://flake8.pycqa.org/en/latest/) compliant (run `flake8` on changed files to check).
- [ ] New features are documented, with examples if plot related.
- [ ] Documentation is sphinx and numpydoc compliant (the docs should [build](https://matplotlib.org/devel/documenting_mpl.html#building-the-docs) without error).
- [ ] Conforms to Matplotlib style conventions (install `flake8-docstrings` and run `flake8 --docstring-convention=all`).
- [ ] New features have an entry in `doc/users/next_whats_new/` (follow instructions in README.rst there).
- [ ] API changes documented in `doc/api/next_api_changes/` (follow instructions in README.rst there).

<!--
Thank you so much for your PR!  To help us review your contribution, please
consider the following points:

- A development guide is available at https://matplotlib.org/devdocs/devel/index.html.

- Help with git and github is available at
  https://matplotlib.org/devel/gitwash/development_workflow.html.

- Do not create the PR out of master, but out of a separate branch.

- The PR title should summarize the changes, for example ""Raise ValueError on
  non-numeric input to set_xlim"".  Avoid non-descriptive titles such as
  ""Addresses issue #8576"".

- The summary should provide at least 1-2 sentences describing the pull request
  in detail (Why is this change required?  What problem does it solve?) and
  link to any relevant issues.

- If you are contributing fixes to docstrings, please pay attention to
  http://matplotlib.org/devel/documenting_mpl.html#formatting.  In particular,
  note the difference between using single backquotes, double backquotes, and
  asterisks in the markup.

We understand that PRs can sometimes be overwhelming, especially as the
reviews start coming in.  Please let us know if the reviews are unclear or
the recommended next step seems overly demanding, if you would like help in
addressing a reviewer's comments, or if you have been waiting too long to hear
back on your PR.
-->
",anntzer,closed,2021-03-20 19:06:28,,2021-03-21 00:49:44,story645,2021-03-22 20:54:38,0,Documentation,v3.5.0,59
836815595,Simplify maxdict implementation.,"... by relying on dicts maintaining insertion order (which is what was
previously tracked separately in `_killkeys`).

Note that both the original and new implementations actually evict keys
by *insertion* order, not as LRU.

## PR Summary

## PR Checklist

<!-- Please mark any checkboxes that do not apply to this PR as [N/A]. -->

- [ ] Has pytest style unit tests (and `pytest` passes).
- [ ] Is [Flake 8](https://flake8.pycqa.org/en/latest/) compliant (run `flake8` on changed files to check).
- [ ] New features are documented, with examples if plot related.
- [ ] Documentation is sphinx and numpydoc compliant (the docs should [build](https://matplotlib.org/devel/documenting_mpl.html#building-the-docs) without error).
- [ ] Conforms to Matplotlib style conventions (install `flake8-docstrings` and run `flake8 --docstring-convention=all`).
- [ ] New features have an entry in `doc/users/next_whats_new/` (follow instructions in README.rst there).
- [ ] API changes documented in `doc/api/next_api_changes/` (follow instructions in README.rst there).

<!--
Thank you so much for your PR!  To help us review your contribution, please
consider the following points:

- A development guide is available at https://matplotlib.org/devdocs/devel/index.html.

- Help with git and github is available at
  https://matplotlib.org/devel/gitwash/development_workflow.html.

- Do not create the PR out of master, but out of a separate branch.

- The PR title should summarize the changes, for example ""Raise ValueError on
  non-numeric input to set_xlim"".  Avoid non-descriptive titles such as
  ""Addresses issue #8576"".

- The summary should provide at least 1-2 sentences describing the pull request
  in detail (Why is this change required?  What problem does it solve?) and
  link to any relevant issues.

- If you are contributing fixes to docstrings, please pay attention to
  http://matplotlib.org/devel/documenting_mpl.html#formatting.  In particular,
  note the difference between using single backquotes, double backquotes, and
  asterisks in the markup.

We understand that PRs can sometimes be overwhelming, especially as the
reviews start coming in.  Please let us know if the reviews are unclear or
the recommended next step seems overly demanding, if you would like help in
addressing a reviewer's comments, or if you have been waiting too long to hear
back on your PR.
-->
",anntzer,closed,2021-03-20 13:59:16,,2021-03-21 09:40:52,timhoffm,2021-03-21 11:34:13,0,Maintenance,v3.5.0,59
836811146,Remove unused _find_dedent_regex & _dedent_regex.,"They are unused since the replacement of cbook.dedent by
inspect.cleandoc.

## PR Summary

## PR Checklist

<!-- Please mark any checkboxes that do not apply to this PR as [N/A]. -->

- [ ] Has pytest style unit tests (and `pytest` passes).
- [ ] Is [Flake 8](https://flake8.pycqa.org/en/latest/) compliant (run `flake8` on changed files to check).
- [ ] New features are documented, with examples if plot related.
- [ ] Documentation is sphinx and numpydoc compliant (the docs should [build](https://matplotlib.org/devel/documenting_mpl.html#building-the-docs) without error).
- [ ] Conforms to Matplotlib style conventions (install `flake8-docstrings` and run `flake8 --docstring-convention=all`).
- [ ] New features have an entry in `doc/users/next_whats_new/` (follow instructions in README.rst there).
- [ ] API changes documented in `doc/api/next_api_changes/` (follow instructions in README.rst there).

<!--
Thank you so much for your PR!  To help us review your contribution, please
consider the following points:

- A development guide is available at https://matplotlib.org/devdocs/devel/index.html.

- Help with git and github is available at
  https://matplotlib.org/devel/gitwash/development_workflow.html.

- Do not create the PR out of master, but out of a separate branch.

- The PR title should summarize the changes, for example ""Raise ValueError on
  non-numeric input to set_xlim"".  Avoid non-descriptive titles such as
  ""Addresses issue #8576"".

- The summary should provide at least 1-2 sentences describing the pull request
  in detail (Why is this change required?  What problem does it solve?) and
  link to any relevant issues.

- If you are contributing fixes to docstrings, please pay attention to
  http://matplotlib.org/devel/documenting_mpl.html#formatting.  In particular,
  note the difference between using single backquotes, double backquotes, and
  asterisks in the markup.

We understand that PRs can sometimes be overwhelming, especially as the
reviews start coming in.  Please let us know if the reviews are unclear or
the recommended next step seems overly demanding, if you would like help in
addressing a reviewer's comments, or if you have been waiting too long to hear
back on your PR.
-->
",anntzer,closed,2021-03-20 13:45:37,,2021-03-21 01:21:02,timhoffm,2021-03-21 11:34:05,0,Maintenance,v3.5.0,59
836785949,Incorrect & inconsistent coloring in .imshow() with LogNorm,"<!--To help us understand and resolve your issue, please fill out the form to the best of your ability.-->
<!--You can feel free to delete the sections that do not apply.-->

### Bug report

**Bug summary**

.imshow() with LogNorm produces incorrect and inconsistent coloring. 

<!--A short 1-2 sentences that succinctly describes the bug-->

**Code for reproduction**

In this example the same array was plotted twice. The first .imshow() call plots the whole array. The following two plot two halves of the same array separately. 

The `mpl_toolkits` is used only to fix axes and colorbar positioning; problems with coloring remain even without it.

```python
import matplotlib as mpl
import matplotlib.pyplot as plt
from mpl_toolkits.axes_grid1 import make_axes_locatable

import numpy as np

a = 10. ** np.arange(100)

fig, ax = plt.subplots(1)
norm = mpl.colors.LogNorm(np.min(a), np.max(a))

img1 = ax.imshow(a[None,   :  ], extent = (0,  100,   0, 10),
                                 cmap = 'gray', norm = norm  )
img2 = ax.imshow(a[None,   :50], extent = (0,   50, -10,  0),
                                 cmap = 'gray', norm = norm  )
img3 = ax.imshow(a[None, 50:  ], extent = (50, 100, -10,  0),
                                 cmap = 'gray', norm = norm  )

plt.xlim(  0, 100)
plt.ylim(-10,  10)

divider = make_axes_locatable(plt.gca())
cax = divider.append_axes(""bottom"",
                          size=0.2,
                          pad=0.4 )
plt.colorbar(img1, cax = cax, orientation='horizontal')

plt.tight_layout()

plt.show()
```

**Actual outcome**

As we can see, left parts of each patch produced by .imshow() is completely black. It seems like rounding occurred somewhere. It also can be seen, that different colors are used to represent the same numbers in different arrays.

![Figure_1](https://user-images.githubusercontent.com/81013639/111867666-7908ea00-896d-11eb-9c4f-3e19bec31211.png)


**Expected outcome**

It was expected to see smooth transition from black to white from left to right. It was also expected not to see any difference in colors representing same numbers.
<!--A description of the expected outcome from the code snippet-->
<!--If this used to work in an earlier version of Matplotlib, please note the version it used to work on-->

**Matplotlib version**
<!--Please specify your platform and versions of the relevant libraries you are using:-->
  * Operating system: Linux
  * Matplotlib version (`import matplotlib; print(matplotlib.__version__)`): 3.3.3
  * Matplotlib backend (`print(matplotlib.get_backend())`): Qt5Agg
  * Python version: 3.7.3

The matplotlib package was installed with pip.
<!--Please tell us how you installed matplotlib and python e.g., from source, pip, conda-->
<!--If you installed from conda, please specify which channel you used if not the default-->

",mdmisch,open,2021-03-20 11:32:50,,,,2021-04-03 02:50:53,5,"status: confirmed bug, topic: images",v3.5.0,59
836766150,points to data coordinates,"<!--To help us understand and resolve your issue, please fill out the form to the best of your ability.-->
<!--You can feel free to delete the sections that do not apply.-->

### Problem

<!--


* I found [...] to be unclear because [...]
* [...] made me think that [...] when really it should be [...]
* There is no example showing how to do [...]
-->
In the [transform tutorial](https://matplotlib.org/stable/tutorials/advanced/transforms_tutorial.html), section: 'Data coordinates', there is no reference to how to transform data from points to data coordinates and despite days of researching I can't wrap my head around it.



### Suggested Improvement
Since in the code snippet of that section the 'offset points' coordindate system is used, it would be extremely useful to know how to convert from points to data coordinates.
<!--
If you have an idea to improve the documentation please suggest it here

* This line should be be changed to say [...]
* Include a paragraph explaining [...]
* Add a figure showing [...]
-->

**Matplotlib version**
<!--Please specify the version of matplotlib and the version of the documentation that you are using:-->
  * Operating system: ubuntu18
  * Matplotlib version 3.3.4:
  * Matplotlib documentation version 3.3.4:
",marnec,closed,2021-03-20 09:38:38,,2021-03-20 14:29:40,jklymak,2021-03-20 14:29:40,1,"Community support, Documentation",,
836466111,Fix resizing in nbAgg.,"## PR Summary

The WebSocket wrapper around the IPython comm does not define `readyState`, and so resizes are never forwarded to the Python side.

## PR Checklist

- [n/a] Has pytest style unit tests (and `pytest` passes).
- [x] Is [Flake 8](https://flake8.pycqa.org/en/latest/) compliant (run `flake8` on changed files to check).
- [n/a] New features are documented, with examples if plot related.
- [n/a] Documentation is sphinx and numpydoc compliant (the docs should [build](https://matplotlib.org/devel/documenting_mpl.html#building-the-docs) without error).
- [x] Conforms to Matplotlib style conventions (install `flake8-docstrings` and run `flake8 --docstring-convention=all`).
- [n/a] New features have an entry in `doc/users/next_whats_new/` (follow instructions in README.rst there).
- [n/a] API changes documented in `doc/api/next_api_changes/` (follow instructions in README.rst there).",QuLogic,closed,2021-03-19 23:18:41,,2021-03-22 19:01:27,jklymak,2021-03-24 02:19:06,4,"GUI/nbagg, Release critical",v3.4.0,53
836242303,matplotlib.pyplot picture is corrupted when the picture is too wide,"<!--To help us understand and resolve your issue, please fill out the form to the best of your ability.-->
<!--You can feel free to delete the sections that do not apply.-->

### Bug report

matplotlib.pyplot picture is corrupted when the picture is too wide

**Code for reproduction**

A minimum working example is here:
```python
import matplotlib.pyplot as plt
import numpy as np

num_points = 1000
op_norms = range(1, num_points + 1)
op_names = [""name {}"".format(p) for p in op_norms]
    
for figwidth in [300, 400]:
    f = plt.figure(num=None, figsize=(figwidth, 6), facecolor='w', edgecolor='k')
    for i, op_norm in enumerate(op_norms):
        plt.semilogy(i, op_norm, ""o"")

    plt.xticks(np.arange(num_points), op_names, rotation=90)
    plt.tight_layout()
    plt.grid(True)
    plt.savefig(""wideplot_width_{}.png"".format(figwidth), bbox_inches='tight')
    plt.close()```
```
**Expected outcome**: 
When `figwidth=300`, everything is fine; see [here](https://i.stack.imgur.com/DTeTE.png). However, when it is increased to `figwidth=400`, the plot is corrupted (boarder is not complete, x axis label not complete, dirty ink etc.); see [here](https://i.stack.imgur.com/1cMCl.png). 

  * Operating system: Debian GNU/Linux 10 (buster)
  * Matplotlib version (`import matplotlib; print(matplotlib.__version__)`): 3.3.2
  * Matplotlib backend (`print(matplotlib.get_backend())`): agg
  * Python version: 3.7.9

matplotlib is installed from conda.

Any hint would be very much appreciated! Thanks!",optyang,closed,2021-03-19 18:03:16,,2021-03-19 18:19:16,jklymak,2021-03-19 18:23:25,1,"status: duplicate, status: won't or can't fix",,
835884041,TextBox does not accept dead keys,"<!--To help us understand and resolve your issue, please fill out the form to the best of your ability.-->
<!--You can feel free to delete the sections that do not apply.-->

### Bug report

**Bug summary**

<!--A short 1-2 sentences that succinctly describes the bug-->
Typing a dead key (a key which is not written directly after a keypress, e.g. ^, ´, `) into a TextBox widget raises a TypeError. This also occurs when you press CapsLock. This prevents the user from entering some characters like ""^"" or using CapsLock.

Edit: After about version `3.4` no error is being raised. Now CapsLock works but the TextBox just ignores dead keys.

**Code for reproduction**

<!--A minimum code snippet required to reproduce the bug.
Please make sure to minimize the number of dependencies required, and provide
any necessary plotted data.
Avoid using threads, as Matplotlib is (explicitly) not thread-safe.-->

```python
from matplotlib import pyplot as plt
from matplotlib.widgets import TextBox

fig, ax = plt.subplots(figsize=(6, 3))
fig.subplots_adjust(bottom=0.2)
text_box_ax = fig.add_axes([0.4, 0.02, 0.5, 0.06])
text_box = TextBox(text_box_ax, ""Type diacritic character (e.g. ^): "")
plt.show()
```

**Actual outcome**

<!--The output produced by the above code, which may be a screenshot, console output, etc.-->
```
Traceback (most recent call last):
  File ""\matplotlib\cbook\__init__.py"", line 196, in process
    func(*args, **kwargs)
  File ""\matplotlib\widgets.py"", line 790, in _keypress
    if len(key) == 1:
TypeError: object of type 'NoneType' has no len()
```

**Expected outcome**
Normal behaviour of those characters when typing them in editors or searchbars etc.

<!--A description of the expected outcome from the code snippet-->
<!--If this used to work in an earlier version of Matplotlib, please note the version it used to work on-->

**Matplotlib version**
<!--Please specify your platform and versions of the relevant libraries you are using:-->
  * Operating system: windows 10, build 19041.867
  * Matplotlib version: `3.2.2`
  * Matplotlib backend: `TkAgg`
  * Python version: 3.8
  * Jupyter version (if applicable): 
  * Other libraries: 

<!--Please tell us how you installed matplotlib and python e.g., from source, pip, conda-->
<!--If you installed from conda, please specify which channel you used if not the default-->

",johnbow,open,2021-03-19 11:36:08,,,,2021-04-05 09:45:34,7,"GUI/tk, widgets/UI",,
835573967,ENH: allow fig.legend outside axes...,"## PR Summary

*Much* simpler redo of #13072.  Closes #13023.

### old 

```python
import numpy as np
import matplotlib.pyplot as plt

fig, axs = plt.subplots(1, 3, constrained_layout=True)

for i, ax in enumerate(axs):
    ax.plot(range(10), label=f'Boo{i}')
    if i == 0:
        ax.set_ylabel('Booo')
lg = fig.legend(loc='upper right') 
fig.suptitle('Top')
plt.show()
```

doesn't place the legend outside the axes...

![Old](https://user-images.githubusercontent.com/1562854/111733912-35f82b00-8836-11eb-8c51-74077d93f298.png)

### new

Added an `outside` kwarg to fig.legend:

```python
...
fig.legend(loc='upper right', outside=True) 
...
```

![New](https://user-images.githubusercontent.com/1562854/111733967-5cb66180-8836-11eb-84b1-a4acab25fa61.png)

If we want it in the upper right, but on top, instead of beside, then

```python
...
fig.legend(loc='upper right', outside='upper') 
...
```

![New](https://user-images.githubusercontent.com/1562854/111734109-a7d07480-8836-11eb-8d8b-b734826efef9.png)

'upper' only works for 'upper right' and 'upper left' (and 'upper center') and 'lower' works for 'lower right/left'.

### Caveats

There is no magic here - multiple legends will over-run each other.  The legends will also overlap with a suptitle/supxlabel/supylabel if they are present.  They all get put in the same ""margin"", but basic functionality is there.  

## PR Checklist

<!-- Please mark any checkboxes that do not apply to this PR as [N/A]. -->

- [x] Has pytest style unit tests (and `pytest` passes).
- [ ] Is [Flake 8](https://flake8.pycqa.org/en/latest/) compliant (run `flake8` on changed files to check).
- [ ] New features are documented, with examples if plot related.
- [ ] Documentation is sphinx and numpydoc compliant (the docs should [build](https://matplotlib.org/devel/documenting_mpl.html#building-the-docs) without error).
- [x] Conforms to Matplotlib style conventions (install `flake8-docstrings` and run `flake8 --docstring-convention=all`).
- [ ] New features have an entry in `doc/users/next_whats_new/` (follow instructions in README.rst there).
- [ ] API changes documented in `doc/api/next_api_changes/` (follow instructions in README.rst there).

<!--
Thank you so much for your PR!  To help us review your contribution, please
consider the following points:

- A development guide is available at https://matplotlib.org/devdocs/devel/index.html.

- Help with git and github is available at
  https://matplotlib.org/devel/gitwash/development_workflow.html.

- Do not create the PR out of master, but out of a separate branch.

- The PR title should summarize the changes, for example ""Raise ValueError on
  non-numeric input to set_xlim"".  Avoid non-descriptive titles such as
  ""Addresses issue #8576"".

- The summary should provide at least 1-2 sentences describing the pull request
  in detail (Why is this change required?  What problem does it solve?) and
  link to any relevant issues.

- If you are contributing fixes to docstrings, please pay attention to
  http://matplotlib.org/devel/documenting_mpl.html#formatting.  In particular,
  note the difference between using single backquotes, double backquotes, and
  asterisks in the markup.

We understand that PRs can sometimes be overwhelming, especially as the
reviews start coming in.  Please let us know if the reviews are unclear or
the recommended next step seems overly demanding, if you would like help in
addressing a reviewer's comments, or if you have been waiting too long to hear
back on your PR.
-->
",jklymak,open,2021-03-19 05:13:17,,,,2021-03-25 00:54:19,5,"topic: geometry manager, topic: legend",v3.5.0,59
835461821,Backport PR #19741 on branch v3.4.x (Only override pickradius when picker is not a bool.),Backport PR #19741: Only override pickradius when picker is not a bool.,meeseeksmachine,closed,2021-03-19 02:13:16,,2021-03-19 02:49:26,QuLogic,2021-03-19 02:49:27,0,,v3.4.0,53
835355792,Only override pickradius when picker is not a bool.,"## PR Summary

This was done when the deprecation was added, but then removed when it was undeprecated. However, people now seem to be relying on this new behaviour, and it seems more correct, so we should add it back.

Fixes #19700.

## PR Checklist

- [x] Has pytest style unit tests (and `pytest` passes).
- [x] Is [Flake 8](https://flake8.pycqa.org/en/latest/) compliant (run `flake8` on changed files to check).
- [n/a] New features are documented, with examples if plot related.
- [n/a] Documentation is sphinx and numpydoc compliant (the docs should [build](https://matplotlib.org/devel/documenting_mpl.html#building-the-docs) without error).
- [x] Conforms to Matplotlib style conventions (install `flake8-docstrings` and run `flake8 --docstring-convention=all`).
- [n/a] New features have an entry in `doc/users/next_whats_new/` (follow instructions in README.rst there).
- [n/a] API changes documented in `doc/api/next_api_changes/` (follow instructions in README.rst there).",QuLogic,closed,2021-03-18 23:18:34,,2021-03-19 01:17:07,tacaswell,2021-03-19 02:11:44,1,Release critical,v3.4.0,53
835231705,Minor backend docstring fixes.,"(The authorship formulation for the pdf backend matches the one for
cairo.)

## PR Summary

## PR Checklist

<!-- Please mark any checkboxes that do not apply to this PR as [N/A]. -->

- [ ] Has pytest style unit tests (and `pytest` passes).
- [ ] Is [Flake 8](https://flake8.pycqa.org/en/latest/) compliant (run `flake8` on changed files to check).
- [ ] New features are documented, with examples if plot related.
- [ ] Documentation is sphinx and numpydoc compliant (the docs should [build](https://matplotlib.org/devel/documenting_mpl.html#building-the-docs) without error).
- [ ] Conforms to Matplotlib style conventions (install `flake8-docstrings` and run `flake8 --docstring-convention=all`).
- [ ] New features have an entry in `doc/users/next_whats_new/` (follow instructions in README.rst there).
- [ ] API changes documented in `doc/api/next_api_changes/` (follow instructions in README.rst there).

<!--
Thank you so much for your PR!  To help us review your contribution, please
consider the following points:

- A development guide is available at https://matplotlib.org/devdocs/devel/index.html.

- Help with git and github is available at
  https://matplotlib.org/devel/gitwash/development_workflow.html.

- Do not create the PR out of master, but out of a separate branch.

- The PR title should summarize the changes, for example ""Raise ValueError on
  non-numeric input to set_xlim"".  Avoid non-descriptive titles such as
  ""Addresses issue #8576"".

- The summary should provide at least 1-2 sentences describing the pull request
  in detail (Why is this change required?  What problem does it solve?) and
  link to any relevant issues.

- If you are contributing fixes to docstrings, please pay attention to
  http://matplotlib.org/devel/documenting_mpl.html#formatting.  In particular,
  note the difference between using single backquotes, double backquotes, and
  asterisks in the markup.

We understand that PRs can sometimes be overwhelming, especially as the
reviews start coming in.  Please let us know if the reviews are unclear or
the recommended next step seems overly demanding, if you would like help in
addressing a reviewer's comments, or if you have been waiting too long to hear
back on your PR.
-->
",anntzer,closed,2021-03-18 20:33:38,,2021-03-18 22:48:55,jklymak,2021-03-19 07:50:28,0,Documentation,v3.5.0,59
835228136,Changed 'python -mpip' to 'python -m pip' for consistency,"The top-level files INSTALL.rst and README.rst both use the version with the space between the -m and the module in the command that is executed. To be more consistent, this was changed here as well.

## PR Summary

## PR Checklist

<!-- Please mark any checkboxes that do not apply to this PR as [N/A]. -->

- [N/A] Has pytest style unit tests (and `pytest` passes).
- [N/A] Is [Flake 8](https://flake8.pycqa.org/en/latest/) compliant (run `flake8` on changed files to check).
- [N/A] New features are documented, with examples if plot related.
- [N/A] Documentation is sphinx and numpydoc compliant (the docs should [build](https://matplotlib.org/devel/documenting_mpl.html#building-the-docs) without error).
- [N/A] Conforms to Matplotlib style conventions (install `flake8-docstrings` and run `flake8 --docstring-convention=all`).
- [N/A] New features have an entry in `doc/users/next_whats_new/` (follow instructions in README.rst there).
- [N/A] API changes documented in `doc/api/next_api_changes/` (follow instructions in README.rst there).

<!--
Thank you so much for your PR!  To help us review your contribution, please
consider the following points:

- A development guide is available at https://matplotlib.org/devdocs/devel/index.html.

- Help with git and github is available at
  https://matplotlib.org/devel/gitwash/development_workflow.html.

- Do not create the PR out of master, but out of a separate branch.

- The PR title should summarize the changes, for example ""Raise ValueError on
  non-numeric input to set_xlim"".  Avoid non-descriptive titles such as
  ""Addresses issue #8576"".

- The summary should provide at least 1-2 sentences describing the pull request
  in detail (Why is this change required?  What problem does it solve?) and
  link to any relevant issues.

- If you are contributing fixes to docstrings, please pay attention to
  http://matplotlib.org/devel/documenting_mpl.html#formatting.  In particular,
  note the difference between using single backquotes, double backquotes, and
  asterisks in the markup.

We understand that PRs can sometimes be overwhelming, especially as the
reviews start coming in.  Please let us know if the reviews are unclear or
the recommended next step seems overly demanding, if you would like help in
addressing a reviewer's comments, or if you have been waiting too long to hear
back on your PR.
-->
",chbauman,closed,2021-03-18 20:30:18,,2021-03-21 17:47:04,jklymak,2021-03-25 19:35:39,6,,v3.4.0,53
835108311,Problem with imshow when using masked data.,"Hello everyone,

I am having some trouble using imshow to plot images that have masked data. It looks like a sample problem when plotting the data. The code works fine with matplotlib 2.2.5 but breaks with versions 3.3.4 and 3.3.2.

I was not able to reproduce the problem with artificial data. I've saved some data to reproduce the problem as .txt:

[numpy_raster.txt](https://github.com/matplotlib/matplotlib/files/6166273/numpy_raster.txt)

## Code:

```
import numpy as np
import numpy.ma as ma
from numpy import genfromtxt
import matplotlib.pyplot as plt

data = genfromtxt('numpy_raster.csv', delimiter=',') # loading data

data_masked = ma.masked_values(data, -1) # masking data for value equals -1

fig, ax = plt.subplots(1,1,figsize=(8,8)) # plot data
ax.imshow(data_masked, cmap='viridis')
plt.show()
```

## Results

The correct result for version 2.2.5 is:

![image](https://user-images.githubusercontent.com/32001527/111670506-ab440b80-87f6-11eb-8c88-06f398c1d4e0.png)

This is the expected result. I've checked with other libraries in different languages.

The wrong result for version 3.3.4 and 3.3.2 is:

![image](https://user-images.githubusercontent.com/32001527/111670866-17267400-87f7-11eb-871a-5dd6b70a03b8.png)



**Matplotlib version**
<!--Please specify your platform and versions of the relevant libraries you are using:-->
  * Operating system: Windows 10
  * Matplotlib version: As noted above 2.2.5 works fine but 3.3.2 and 3.3.4 do not work
  * Matplotlib backend: module://ipykernel.pylab.backend_inline 
  * Python version: 3.8

This problem happens installing matplotlib via conda and/or pip.

Thank you all, 

Best,

Rafael
",RafaelCarlquist,closed,2021-03-18 18:04:48,,2021-03-18 22:41:59,RafaelCarlquist,2021-03-18 22:41:59,2,Community support,,
835103629,Specify Colors with RGB as copied from a color picker with [0-255] interval,"According to the [matplotlib docs](https://matplotlib.org/stable/tutorials/colors/colors.html), you can specify colors as an RGB ""tuple of float values in closed interval [0, 1] (e.g., (0.1, 0.2, 0.5) or (0.1, 0.2, 0.5, 0.3))"".

This is a limitation to users because color picker tools give RGB values as integers from [0-255]

Copying an RGB color from [W3 schools color picker](https://www.w3schools.com/colors/colors_picker.asp)
![image](https://user-images.githubusercontent.com/6249613/111672032-c4d55b00-87d6-11eb-9bdf-e9248bfdf9d5.png)

Copying RGB color from Google Color Picker
![image](https://user-images.githubusercontent.com/6249613/111673960-bdaf4c80-87d8-11eb-9683-1c19b3af7823.png)

Copying RGB from VS code color picker
![image](https://user-images.githubusercontent.com/6249613/111672086-d454a400-87d6-11eb-82fc-eec88e09ad6e.png)


When I copy an RGB color value from a color picker, it is a bit cumbersome that I need to convert it to a numpy array and then divide by 255 to get the RGB values in the [0-1] interval. Instead, I would like to the use RGB values in the form they are copied from color picker tools. 

**Could matplotlib add the ability to also accept a tuple of values [0-255] as an acceptable color?**


## The current method to use RGB values copied from a color picker
```python
import matplotlib.pyplot as plt
RGB = (37, 240, 10)
RGB = np.array(RGB)/255
plt.plot([1,2,3], color=RGB)
```
## What I would like to do
```python
import matplotlib.pyplot as plt
plt.plot([1,2,3], color=(39, 82, 224))       # <--  ValueError: RGBA values should be within 0-1 range
```

Note: alpha values would still be a decimal, `(39, 82, 224, 0.45)`",blaylockbk,closed,2021-03-18 17:58:57,,2021-03-18 22:54:48,jklymak,2021-03-18 22:55:07,2,"New feature, status: won't or can't fix",,
835037168,subplot_mosaic axes are not added in consistent order,"<!--To help us understand and resolve your issue, please fill out the form to the best of your ability.-->
<!--You can feel free to delete the sections that do not apply.-->

### Bug report

**Bug summary**

The axes of a subplot_mosaic show up in a random order in `fig.axes` (likely due to the use of a `set` for uniquification in `_identify_keys_and_nested`).

**Code for reproduction**

<!--A minimum code snippet required to reproduce the bug.
Please make sure to minimize the number of dependencies required, and provide
any necessary plotted data.
Avoid using threads, as Matplotlib is (explicitly) not thread-safe.-->

```sh
for _ in $(seq 10); do python -c 'from pylab import *; fig, axs = subplot_mosaic(""ab""); print(fig.axes.index(axs[""a""]))'; done
```

**Actual outcome**

<!--The output produced by the above code, which may be a screenshot, console output, etc.-->

```
1
0
1
1
1
0
0
0
0
1
```

**Expected outcome**

Axes should be added in a consistent order.  I guess a reasonable one would be as if iterating the spec in C order (dropping duplicates).

Not release critical (especially as the order was not fixed, so fixing an order is not a backcompat break), but would be nice to get this sorted out before the API moves out of being experimental.

**Matplotlib version**
<!--Please specify your platform and versions of the relevant libraries you are using:-->
  * Operating system: linux
  * Matplotlib version (`import matplotlib; print(matplotlib.__version__)`): head
  * Matplotlib backend (`print(matplotlib.get_backend())`): any
  * Python version: 39
  * Jupyter version (if applicable): 
  * Other libraries: 

<!--Please tell us how you installed matplotlib and python e.g., from source, pip, conda-->
<!--If you installed from conda, please specify which channel you used if not the default-->

---

Note: the simple solution of replacing `unique_ids = set()` by `unique_ids = cbook._OrderedSet()` is good enough for the non-nested case, but doesn't handle nested layouts such as `subplot_mosaic([[""a"", [[""b1"", ""b2""], [""b3"", ""b4""]]], [""c"", ""d""]])` because currently the nested submosaic is always added after all the non-nested axes.",anntzer,open,2021-03-18 16:45:33,,,,2021-03-22 13:44:44,0,,,
834939229,index in pick_event invalid and inconsistent for mplot3d scatter plot (z ordering?),"### Bug report

**Bug summary**

The index returned in the pick_event (event.ind) does not correspond to the index of the source data.
It also changes depending on the view onto the data.

The example contains two points. 
When you click on a point, the event.ind is printed out.
The one at (0,0,0) should have index 0, the other index 1.

Rotate the plot so that the second point is further behind (semi transparent). Now it has index 0. 
Rotate the plot so that the second point is further in front (full opacity). Now it has index 1.

**Code for reproduction**

`
```python
import numpy as np
import matplotlib
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D


if __name__ == ""__main__"":
    fig = plt.figure(constrained_layout=True, figsize=(6,6))

    ax = fig.add_subplot(111, projection='3d')

    num_points = 2
    data = np.zeros([num_points,3])
    data[:,0] = np.linspace(1,0,num_points)
    print(data)

    path_collection = ax.scatter(xs=data[:,0],
                                 ys=data[:,1],
                                 zs=data[:,2],
                                 picker=True)

    ax.set_xlabel(""x"")
    ax.set_ylabel(""y"")
    ax.set_zlabel(""z"")
    ax.set_xlim(-1,1)
    ax.set_ylim(-1,1)
    ax.set_zlim(-1,1)

    def onpick(event):
        print(event.ind)

    fig.canvas.mpl_connect('pick_event', onpick)

    plt.show()`
```

**Actual outcome**

The example contains two points. 
When you click on a point, the event.ind is printed out.
The one at (0,0,0) should have index 0, the other index 1.

Rotate the plot so that the second point is further behind (semi transparent). Now it has index 0. 
Rotate the plot so that the second point is further in front (full opacity). Now it has index 1.

**Expected outcome**

The returned event.ind should not depend on view.
For the point in the centre it should always return 0, for the point to the right, it should always return 1.

**Matplotlib version**
  * Operating system: macOS Catalina; 10.15.4
  * Matplotlib version (`import matplotlib; print(matplotlib.__version__)`): '3.3.4'
  * Matplotlib backend (`print(matplotlib.get_backend())`): 'MacOSX'
  * Python version: Python 3.6.9
  * Jupyter version (if applicable): 
  * Other libraries: 

",saasbk,open,2021-03-18 15:24:11,,,,2021-04-02 23:28:07,5,"status: confirmed bug, topic: mplot3d",v3.5.0,59
834789082,Remove unused _fonts attribute in RendererSVG.,"(It is unused since the removal of svg fonts, deprecated in 5072e59 and
removed after.)

## PR Summary

## PR Checklist

<!-- Please mark any checkboxes that do not apply to this PR as [N/A]. -->

- [ ] Has pytest style unit tests (and `pytest` passes).
- [ ] Is [Flake 8](https://flake8.pycqa.org/en/latest/) compliant (run `flake8` on changed files to check).
- [ ] New features are documented, with examples if plot related.
- [ ] Documentation is sphinx and numpydoc compliant (the docs should [build](https://matplotlib.org/devel/documenting_mpl.html#building-the-docs) without error).
- [ ] Conforms to Matplotlib style conventions (install `flake8-docstrings` and run `flake8 --docstring-convention=all`).
- [ ] New features have an entry in `doc/users/next_whats_new/` (follow instructions in README.rst there).
- [ ] API changes documented in `doc/api/next_api_changes/` (follow instructions in README.rst there).

<!--
Thank you so much for your PR!  To help us review your contribution, please
consider the following points:

- A development guide is available at https://matplotlib.org/devdocs/devel/index.html.

- Help with git and github is available at
  https://matplotlib.org/devel/gitwash/development_workflow.html.

- Do not create the PR out of master, but out of a separate branch.

- The PR title should summarize the changes, for example ""Raise ValueError on
  non-numeric input to set_xlim"".  Avoid non-descriptive titles such as
  ""Addresses issue #8576"".

- The summary should provide at least 1-2 sentences describing the pull request
  in detail (Why is this change required?  What problem does it solve?) and
  link to any relevant issues.

- If you are contributing fixes to docstrings, please pay attention to
  http://matplotlib.org/devel/documenting_mpl.html#formatting.  In particular,
  note the difference between using single backquotes, double backquotes, and
  asterisks in the markup.

We understand that PRs can sometimes be overwhelming, especially as the
reviews start coming in.  Please let us know if the reviews are unclear or
the recommended next step seems overly demanding, if you would like help in
addressing a reviewer's comments, or if you have been waiting too long to hear
back on your PR.
-->
",anntzer,closed,2021-03-18 13:08:16,,2021-03-18 20:10:17,QuLogic,2021-03-18 20:30:41,0,"Maintenance, backend/svg",v3.5.0,59
834668431,Reword AutoDateFormatter docs.,"In particular, it is not necessary to create a FuncFormatter; a plain
callable works fine.

## PR Summary

## PR Checklist

<!-- Please mark any checkboxes that do not apply to this PR as [N/A]. -->

- [ ] Has pytest style unit tests (and `pytest` passes).
- [ ] Is [Flake 8](https://flake8.pycqa.org/en/latest/) compliant (run `flake8` on changed files to check).
- [ ] New features are documented, with examples if plot related.
- [ ] Documentation is sphinx and numpydoc compliant (the docs should [build](https://matplotlib.org/devel/documenting_mpl.html#building-the-docs) without error).
- [ ] Conforms to Matplotlib style conventions (install `flake8-docstrings` and run `flake8 --docstring-convention=all`).
- [ ] New features have an entry in `doc/users/next_whats_new/` (follow instructions in README.rst there).
- [ ] API changes documented in `doc/api/next_api_changes/` (follow instructions in README.rst there).

<!--
Thank you so much for your PR!  To help us review your contribution, please
consider the following points:

- A development guide is available at https://matplotlib.org/devdocs/devel/index.html.

- Help with git and github is available at
  https://matplotlib.org/devel/gitwash/development_workflow.html.

- Do not create the PR out of master, but out of a separate branch.

- The PR title should summarize the changes, for example ""Raise ValueError on
  non-numeric input to set_xlim"".  Avoid non-descriptive titles such as
  ""Addresses issue #8576"".

- The summary should provide at least 1-2 sentences describing the pull request
  in detail (Why is this change required?  What problem does it solve?) and
  link to any relevant issues.

- If you are contributing fixes to docstrings, please pay attention to
  http://matplotlib.org/devel/documenting_mpl.html#formatting.  In particular,
  note the difference between using single backquotes, double backquotes, and
  asterisks in the markup.

We understand that PRs can sometimes be overwhelming, especially as the
reviews start coming in.  Please let us know if the reviews are unclear or
the recommended next step seems overly demanding, if you would like help in
addressing a reviewer's comments, or if you have been waiting too long to hear
back on your PR.
-->
",anntzer,closed,2021-03-18 11:06:56,,2021-03-18 13:18:07,jklymak,2021-03-18 20:06:46,0,"Documentation, topic: date handling",v3.5.0,59
834668112,Reword the axis_artist module docstring.,"## PR Summary

## PR Checklist

<!-- Please mark any checkboxes that do not apply to this PR as [N/A]. -->

- [ ] Has pytest style unit tests (and `pytest` passes).
- [ ] Is [Flake 8](https://flake8.pycqa.org/en/latest/) compliant (run `flake8` on changed files to check).
- [ ] New features are documented, with examples if plot related.
- [ ] Documentation is sphinx and numpydoc compliant (the docs should [build](https://matplotlib.org/devel/documenting_mpl.html#building-the-docs) without error).
- [ ] Conforms to Matplotlib style conventions (install `flake8-docstrings` and run `flake8 --docstring-convention=all`).
- [ ] New features have an entry in `doc/users/next_whats_new/` (follow instructions in README.rst there).
- [ ] API changes documented in `doc/api/next_api_changes/` (follow instructions in README.rst there).

<!--
Thank you so much for your PR!  To help us review your contribution, please
consider the following points:

- A development guide is available at https://matplotlib.org/devdocs/devel/index.html.

- Help with git and github is available at
  https://matplotlib.org/devel/gitwash/development_workflow.html.

- Do not create the PR out of master, but out of a separate branch.

- The PR title should summarize the changes, for example ""Raise ValueError on
  non-numeric input to set_xlim"".  Avoid non-descriptive titles such as
  ""Addresses issue #8576"".

- The summary should provide at least 1-2 sentences describing the pull request
  in detail (Why is this change required?  What problem does it solve?) and
  link to any relevant issues.

- If you are contributing fixes to docstrings, please pay attention to
  http://matplotlib.org/devel/documenting_mpl.html#formatting.  In particular,
  note the difference between using single backquotes, double backquotes, and
  asterisks in the markup.

We understand that PRs can sometimes be overwhelming, especially as the
reviews start coming in.  Please let us know if the reviews are unclear or
the recommended next step seems overly demanding, if you would like help in
addressing a reviewer's comments, or if you have been waiting too long to hear
back on your PR.
-->
",anntzer,closed,2021-03-18 11:06:44,,2021-03-18 20:34:06,timhoffm,2021-03-26 21:38:28,1,"Documentation, topic: mpl_toolkit",v3.4-doc,62
834406489,DOC: first pass at switching to pydata theme,"## PR Summary

Still super busted.

Probably have to mostly remove CSS.",tacaswell,open,2021-03-18 05:27:07,,,,2021-03-28 00:34:38,5,Documentation,v3.5.0,59
834397516,Adding subplots dynamically with constrained_layout,"For an interactive interface where the user can add more plots, it seems impossible to use constrained_layout.
The whole adding a new axes is unnecesarily complex but it can be done. A new gridspec is set-up and the current axes are repositioned into their new ""slots"". This is working.

However the constrained_layout solver fails (error that height or width is 0).

### Proposed Solution

It seems that some work has already been performed as part of setting a colorbar. It seems to me that with some effort it would be possible to extend that solution to be more generic.

Otherwise the whole layout boxes set-up could be exposed to the external API, such that the users can use it in a similar fashion.

(Ideally the matploplib API could make simpler adapating the gridspec after it has been created)

### Additional context and prior art

None",juliospain,closed,2021-03-18 05:09:20,,2021-03-21 15:32:00,jklymak,2021-03-21 15:32:01,8,"New feature, status: needs clarification",,
834384899,Creating Virtual environment Docs is Depreciated,"<!--To help us understand and resolve your issue, please fill out the form to the best of your ability.-->
<!--You can feel free to delete the sections that do not apply.-->

### Problem
Creating a dedicated environment for setting up Matplotlib for development needs to be updated 
https://matplotlib.org/devdocs/devel/development_setup.html#installing-for-devs
<!--
If you are referencing an existing piece of documentation or example please provide a link.

* I found [...] to be unclear because [...]
* [...] made me think that [...] when really it should be [...]
* There is no example showing how to do [...]
-->


### Suggested Improvement
https://packaging.python.org/guides/installing-using-pip-and-virtual-environments/
as per this website the process to create a virtual environment is different 
<!--
If you have an idea to improve the documentation please suggest it here

* This line should be be changed to say [...]
* Include a paragraph explaining [...]
* Add a figure showing [...]
-->

**Matplotlib version**
<!--Please specify the version of matplotlib and the version of the documentation that you are using:-->
  * Operating system: any
  * Matplotlib version (`import matplotlib; print(matplotlib.__version__)`):
  * Matplotlib documentation version (is listed under the logo):
",rajpratyush,open,2021-03-18 04:42:00,,,,2021-03-25 02:59:45,5,Documentation,,
834292337,Factor out clip-path attr handling in backend_svg.,"Replace _get_clip (which just returns a clip id) by _get_clip_attrs,
which also takes care of formatting it and preparing to pass it as as
xml attribute.

## PR Summary

## PR Checklist

<!-- Please mark any checkboxes that do not apply to this PR as [N/A]. -->

- [ ] Has pytest style unit tests (and `pytest` passes).
- [ ] Is [Flake 8](https://flake8.pycqa.org/en/latest/) compliant (run `flake8` on changed files to check).
- [ ] New features are documented, with examples if plot related.
- [ ] Documentation is sphinx and numpydoc compliant (the docs should [build](https://matplotlib.org/devel/documenting_mpl.html#building-the-docs) without error).
- [ ] Conforms to Matplotlib style conventions (install `flake8-docstrings` and run `flake8 --docstring-convention=all`).
- [ ] New features have an entry in `doc/users/next_whats_new/` (follow instructions in README.rst there).
- [ ] API changes documented in `doc/api/next_api_changes/` (follow instructions in README.rst there).

<!--
Thank you so much for your PR!  To help us review your contribution, please
consider the following points:

- A development guide is available at https://matplotlib.org/devdocs/devel/index.html.

- Help with git and github is available at
  https://matplotlib.org/devel/gitwash/development_workflow.html.

- Do not create the PR out of master, but out of a separate branch.

- The PR title should summarize the changes, for example ""Raise ValueError on
  non-numeric input to set_xlim"".  Avoid non-descriptive titles such as
  ""Addresses issue #8576"".

- The summary should provide at least 1-2 sentences describing the pull request
  in detail (Why is this change required?  What problem does it solve?) and
  link to any relevant issues.

- If you are contributing fixes to docstrings, please pay attention to
  http://matplotlib.org/devel/documenting_mpl.html#formatting.  In particular,
  note the difference between using single backquotes, double backquotes, and
  asterisks in the markup.

We understand that PRs can sometimes be overwhelming, especially as the
reviews start coming in.  Please let us know if the reviews are unclear or
the recommended next step seems overly demanding, if you would like help in
addressing a reviewer's comments, or if you have been waiting too long to hear
back on your PR.
-->
",anntzer,closed,2021-03-18 01:00:34,,2021-03-23 00:07:05,QuLogic,2021-03-23 03:20:06,0,"Maintenance, backend/svg",v3.5.0,59
834209586,DOC: simplify API index,"
## PR Summary

This yields a much quicker ingress to the useful parts of the API page, and a quick example to orient the reader...


<img width=""600"" alt=""API"" src=""https://user-images.githubusercontent.com/1562854/111649273-723d7400-87c1-11eb-808f-b414ba0947b2.png"">

## PR Checklist

<!-- Please mark any checkboxes that do not apply to this PR as [N/A]. -->

- [ ] Has pytest style unit tests (and `pytest` passes).
- [ ] Is [Flake 8](https://flake8.pycqa.org/en/latest/) compliant (run `flake8` on changed files to check).
- [ ] New features are documented, with examples if plot related.
- [ ] Documentation is sphinx and numpydoc compliant (the docs should [build](https://matplotlib.org/devel/documenting_mpl.html#building-the-docs) without error).
- [ ] Conforms to Matplotlib style conventions (install `flake8-docstrings` and run `flake8 --docstring-convention=all`).
- [ ] New features have an entry in `doc/users/next_whats_new/` (follow instructions in README.rst there).
- [ ] API changes documented in `doc/api/next_api_changes/` (follow instructions in README.rst there).

<!--
Thank you so much for your PR!  To help us review your contribution, please
consider the following points:

- A development guide is available at https://matplotlib.org/devdocs/devel/index.html.

- Help with git and github is available at
  https://matplotlib.org/devel/gitwash/development_workflow.html.

- Do not create the PR out of master, but out of a separate branch.

- The PR title should summarize the changes, for example ""Raise ValueError on
  non-numeric input to set_xlim"".  Avoid non-descriptive titles such as
  ""Addresses issue #8576"".

- The summary should provide at least 1-2 sentences describing the pull request
  in detail (Why is this change required?  What problem does it solve?) and
  link to any relevant issues.

- If you are contributing fixes to docstrings, please pay attention to
  http://matplotlib.org/devel/documenting_mpl.html#formatting.  In particular,
  note the difference between using single backquotes, double backquotes, and
  asterisks in the markup.

We understand that PRs can sometimes be overwhelming, especially as the
reviews start coming in.  Please let us know if the reviews are unclear or
the recommended next step seems overly demanding, if you would like help in
addressing a reviewer's comments, or if you have been waiting too long to hear
back on your PR.
-->
",jklymak,closed,2021-03-17 21:58:30,,2021-03-24 23:09:39,timhoffm,2021-03-24 23:22:13,5,Documentation,v3.5.0,59
834198729,Backport PR #19505 on branch v3.4.x (Move some advanced documentation away from Installation Guide),Backport PR #19505: Move some advanced documentation away from Installation Guide,meeseeksmachine,closed,2021-03-17 21:39:24,,2021-03-18 20:08:05,QuLogic,2021-03-18 20:08:05,0,,v3.4.0,53
834196969,Cleanup installing docs,"## PR Summary

- Move ""Installing from source"" contents to it's own page to declutter the main installing page.
  The [Installation FAQ](https://matplotlib.org/devdocs/faq/installing_faq.html) should be merged in to the new ""Installing from source"" page, but that's for a separate PR.
- Rewording.

Adresses part of #17327. Still to do is merging the Installation FAQ (see above).",timhoffm,closed,2021-03-17 21:36:20,,2021-03-20 01:26:10,timhoffm,2021-03-26 21:38:21,2,Documentation,v3.4-doc,62
834051111,Issue in horizontally packing different patches in matplotlib: gaps between patches,"
## Description

### Applicability

Dear all,

Lately, I have been studying the applicability of the matplotlib.offset classes (i.e.: AuxTransformBox, VPacker, HPacker, TextArea) for CollectionPatch generation. The case scenarios in which I have been working with involved creating scalebars (in data units) for projected matplotlib's axes, and these projected axes were generated by means of cartopy.

### **Bug summary**

I verified that sometimes the Packer classes (VPacker and HPacker) do insert some gaps between the provided patches. Therefore, their concatenation becomes clumsy, if not all wrong. 

In the script below, I try to apply the matplotlib.offset classes for creating a scalebar for each of the geoaxes (cartopy's geoaxes). Notice that the AnchoredScaleBar (a subclass of the AnchoredOffsetbox) implements the whole VPacker and HPacker operations. Within each of the returned maps, there is a scalebar (or at least patches of it).

**See Image 1 below** 


Observation 1:
After some attempts, I noticed that if line 86 of the code (where it is stated ""ATBs.append(child)"") is changed to ""ATBs.append(ATB)"", then the scalebars are properly placed without gaps.

Nevertheless, if one does that, the scalebar loses all the ticklabels of each respective patch (rectangles in black and white). 

**See Image 2 below** 

-------------------------------------------------------------------------------------------------------------------------------------

## **Code for reproduction**

```
import cartopy.crs as ccrs
import cartopy.geodesic as cgeo
import matplotlib.pyplot as plt
import numpy as np
from matplotlib.patches import Rectangle
from matplotlib.offsetbox import (AuxTransformBox, VPacker, HPacker, TextArea)
import matplotlib.transforms as transforms


from matplotlib.offsetbox import AnchoredOffsetbox


class AnchoredScaleBar(AnchoredOffsetbox):
    def __init__(self, ax, transform, xcoords, height, xlabels=None,
                 ylabels=None, fontsize=4,
                 pad=0.1, borderpad=0.1, sep=2, prop=None, **kwargs):
        """"""
        Draw a horizontal and/or vertical  bar with the size in
        data coordinate of the give axes. A label will be drawn
        underneath (center-aligned).

        - transform : the coordinate frame (typically axes.transData)

        - sizex,sizey : width of x,y bar, in data units. 0 to omit

        - labelx,labely : labels for x,y bars; None to omit

        - pad, borderpad : padding, in fraction of the legend
        font size (or prop)

        - sep : separation between labels and bars in points.

        - **kwargs : additional arguments passed to base class

        constructor
        """"""

        ATBs = []
        
        for enum, xcor in enumerate(xcoords[1:]):
            width = xcoords[1] - xcoords[0]
            if enum % 2 == 0:
                fc = 'white'
            else:
                fc = 'black'


            Rect = Rectangle((0, 0), width, height, fc=fc,
                             edgecolor='k', zorder=99+enum)
            
            ATB = AuxTransformBox(transform)

            ATB.add_artist(Rect)

            xlabel = xlabels[enum]

            xlabel = int(xlabel)
            
            Txt_xlabel = TextArea(xlabel,
                                  textprops=dict(fontsize=fontsize),
                                  minimumdescent=True)

            # vertically packing a single stripe with respective label

            child = VPacker(children=[Txt_xlabel,
                                      ATB],
                            align=""right"", pad=5, sep=0)

            # TODO: add legend to the child
            # If we use ATBs.append(ATB), the resultant scalebar will have
            # no ticks next to each strap

            # If we use ATBs.append(child), there will be ticks. Though
            # there will be spaces between each strap.

            # While there is no solution for the problem, I am suggesting
            # the first case scenario

            # Therefore (TODO): add legend to the child
            ATBs.append(child)

        # horizontally packing all child packs in a single offsetBox

        Children = HPacker(children=list(ATBs),
                           align=""right"", pad=0, sep=0)

        Txt = TextArea('Km',
                       minimumdescent=False)

        child = VPacker(children=[Children, Txt],
                        align=""center"", pad=2, sep=2)

        AnchoredOffsetbox.__init__(self,
                                   loc='center left',
                                   borderpad=borderpad,
                                   child=child,
                                   prop=prop,
                                   frameon=False,
                                   **kwargs)


def _add_scalebar(ax, xcoords, height, xlabels=None,
                 ylabels=None, 
                 fontsize=4,
                 bbox_to_anchor=(0.2, 0.5),
                 bbox_transform='axes fraction',
                 **kwargs):
    """""" Add scalebars to axes
    Adds a set of scale bars to *ax*, matching the size
    to the ticks of the plot
    and optionally hiding the x and y axes
    - ax : the axis to attach ticks to
    - matchx,matchy : if True, set size of scale bars to spacing
    between ticks
                    if False, size should be set using sizex and
                    sizey params

    - hidex,hidey : if True, hide x-axis and y-axis of parent

    - **kwargs : additional arguments passed to AnchoredScaleBars

    Returns
        created scalebar object
    """"""

    blended_transform = transforms.blended_transform_factory(
        ax.transData, ax.get_figure().dpi_scale_trans)

    sb = AnchoredScaleBar(ax,
                          blended_transform,
                          xcoords,
                          height,
                          xlabels=xlabels,
                          ylabels=ylabels,
                          fontsize=fontsize,
                          bbox_transform=ax.transAxes,
                          bbox_to_anchor=bbox_to_anchor,
                          **kwargs)

    sb.set_clip_on(False)
    ax.add_artist(sb)

    return sb


def get_unit_converter(unit):

    lookuptable = {'km': 1000,
                   'mi': 1.60934 * 1000,
                   'dm': 1e-1,
                   'cm': 1e-2,
                   'mm': 1e-3,
                   'um': 1e-6,
                   'nm': 1e-9}  # Miles to Km

    return lookuptable.get(unit, 'km')



def _point_along_line(ax, start, distance, projected=False, verbose=False):
    """"""Point at a given distance from start at a given angle.

    Args:
        ax:       CartoPy axes.
        start:    Starting point for the line in data coordinates.
        distance: Positive physical distance to travel in meters.
        angle:    Anti-clockwise angle for the bar, in degrees. Default: 0

    Returns:
        (lon,lat) coords of a point (a (2, 1)-shaped NumPy array)
    """"""

    # Direction vector of the line in axes coordinates.

    if not projected:

        geodesic = cgeo.Geodesic()

        Direct_R = geodesic.direct(start, 90, distance)

        target_longitude, target_latitude, forw_azi = Direct_R.base.T

        target_point = ([target_longitude[0], target_latitude[0]])

        actual_dist = geodesic.inverse(start,
                                       target_point).base.ravel()[0]
        if verbose:

            print('Starting point', start)

            print('target point', target_point)
            print('Expected distance between points: ', distance)

            print('Actual distance between points: ', actual_dist)

    if projected:

        longitude, latitude = start

        target_longitude = longitude + distance

        target_point = (target_longitude, latitude)

        if verbose:
            print('Axes is projected? ', projected)
            print('Expected distance between points: ', distance)

            print('Actual distance between points: ',
                  target_longitude - longitude)

    return start, target_point



def fancy_scalebar(ax,
                   bbox_to_anchor,
                   length,
                   unit_name='km',
                   dy=5,
                   max_stripes=5,
                   ytick_label_margins=0.25,
                   fontsize=8,
                   font_weight='bold',
                   rotation=45,
                   zorder=999,
                   paddings={'xmin': 0.1,
                             'xmax': 0.1,
                             'ymin': 0.3,
                             'ymax': 0.8},

                   bbox_kwargs={'facecolor': 'w',
                                'edgecolor': 'k',
                                'alpha': 0.7},
                   numeric_scale_bar=True,
                   numeric_scale_bar_kwgs={'x_text_offset': 0,
                                           'y_text_offset': -40,
                                           'box_x_coord': 0.5,
                                           'box_y_coord': 0.01},
                   verbose=False):
    '''
    Description

    ----------
        This function draws a scalebar in the given geoaxes.

    Parameters
    ----------
        ax (geoaxes):

        bbox_to_anchor (length 2 tuple):
            It sets where the scalebar will be drawn
            in axes fraction units.

        length (float):
            The distance in geodesic meters that will be used
            for generating the scalebar.

        unit_name (str):
            Standard (km).


        angle (int or float): in azimuth degrees.
            The angle that will be used for evaluating the scalebar.

            If 90 (degrees), the distance between each tick in the
            scalebar will be evaluated in respect to the longitude
            of the map.

            If 0 (degrees), the ticks will be evaluated in accordance
            to variation in the latitude of the map.

        dy (int or float):
            The hight of the scalebar in axes fraction.

        max_stripes (int):
            The number of stripes present in the scalebar.

        ytick_label_margins (int or float):
            The size of the margins for drawing the scalebar ticklabels.

        fontsize (int or float):
            The fontsize used for drawing the scalebar ticklabels.

        font_weight (str):
            the fontweight used for drawing the scalebar ticklabels.

        rotation (int or float):
            the rotation used for drawing the scalebar ticklabels.

        zorder(int):
            The zorder used for drawing the scalebar.

        paddings (dict):
            A dictionary defining the padding to draw a background box
            around the scalebar.

            Example of allowed arguments for padding:
                {'xmin': 0.3,
                 'xmax': 0.3,
                 'ymin': 0.3,
                 'ymax': 0.3}

        bbox_kwargs (dict):
            A dictionary defining the background box
            around the scalebar.

            Example of allowed arguments for padding:
                {'facecolor': 'w',
                 'edgecolor': 'k',
                 'alpha': 0.7}

        numeric_scale_bar(bool):
            whether or not to draw a number scalebar along side the
            graphic scalebar. Notice that this option can drastically
            vary in value, depending on the geoaxes projection used.

        numeric_scale_bar_kwgs (dict):
            A dictionary defining the numeric scale bar.

            Example of allowed arguments:
                {'x_text_offset': 0,
                 'y_text_offset': -40,
                 'box_x_coord': 0.5,
                 'box_y_coord': 0.01}

    Returns
    ----------
    None
    '''

    proj_units = ax.projection.proj4_params.get('units', 'degrees')
    if proj_units.startswith('deg'):
        projected = False

    elif proj_units.startswith('m'):
        projected = True

    # getting the basic unit converter for labeling the xticks
    unit_converter = get_unit_converter(unit_name)

    if verbose:
        print('Axes is projected? ', projected)

    # Convert all units and types.
   
    # Map central XY data coordinates
    x0, x1, y0, y1 = ax.get_extent()

    central_coord_map = np.mean([[x0, x1], [y0, y1]], axis=1).tolist()

    # End-point of bar in lon/lat coords.
    start, end = _point_along_line(ax,
                                   central_coord_map,
                                   length,
                                   projected=projected,
                                   verbose=verbose)

    # choose exact X points as sensible grid ticks with Axis 'ticker' helper
    xcoords = np.empty(max_stripes + 1)
    xlabels = []

    xcoords[0] = start[0]

    ycoords = np.empty_like(xcoords)

    for i in range(0, max_stripes):

        startp, endp = _point_along_line(ax, central_coord_map,
                                         length * (i + 1),
                                         projected=projected)

        xcoords[i + 1] = endp[0]

        ycoords[i + 1] = end[1]

        label = round(length * (i + 1) / unit_converter)

        xlabels.append(label)

    # Stacking data coordinates (the target ticks of the scalebar) in a list

    scalebar = _add_scalebar(ax, xcoords, dy, xlabels=xlabels,
                             ylabels=None,
                             fontsize=fontsize,
                             bbox_to_anchor=bbox_to_anchor)

    return scalebar, xlabels
    
if '__main__' == __name__:
    

    
    def test_scalebar():
        """"""Test""""""

        fig, axes = plt.subplots(2, 2,
                                 subplot_kw={'projection':
                                             ccrs.Mercator()})
        
        projections = [ccrs.Mercator(), ccrs.PlateCarree(),
                       ccrs.Mercator(), ccrs.PlateCarree()]

        axes = axes.ravel()
        
        scalebars = []
        for enum, (proj, ax) in enumerate(zip(projections, axes)):
            ax.projection = proj
            ax.set_title(str(proj).split(' ')[0].split('.')[-1])
            
            if enum>=2:
                length = 200_000
            else:
                length = 2_000_000
            scalebar, xlabels = fancy_scalebar(ax,
                           bbox_to_anchor=(0.2, 0.2),
                           length=length,
                           unit_name='km',

                           max_stripes=4,
                           fontsize=10,
                           dy=0.05)
            
            scalebars.append(scalebar)
            
            gl = ax.gridlines(draw_labels=True)
        
            gl.top_labels = False
            gl.right_labels = False

            ax.stock_img()
            ax.coastlines()
            
            if enum>=2:
                ax.set_extent([-70, -45, -15, 10])
            
            
        
        plt.tight_layout()
        
        return axes, scalebars, xlabels

    axes, scalebars, xlabels = test_scalebar()
```


-------------------------------------------------------------------------------------------------------------------------------------


**Actual outcome**

## resultant figures with respective maps (each with a given projection/extention).


### Image 1: Notice the gaps between the scalebar patches.

[Image 1: with gaps betwen Patches](https://i.stack.imgur.com/ToW2F.png)


-------------------------------------------------------------------------------------------------------------------------------------


### Image 2: Notice the lack of ticklabels above the scalebar

[Image2: without gaps between Patches](https://user-images.githubusercontent.com/32545466/111515446-8c2f7600-8731-11eb-95c0-b7c34f051c5a.png)
)


-------------------------------------------------------------------------------------------------------------------------------------


## **Expected outcome**

This is an expected [figure](https://i.stack.imgur.com/tNxRT.png), which the Patches would be properly concatenated (without gaps), and yet preserving its respective ticklabels

-------------------------------------------------------------------------------------------------------------------------------------


**Matplotlib version**
Name: matplotlib
Version: 3.3.4
Summary: Python plotting package
Home-page: https://matplotlib.org
Author: John D. Hunter, Michael Droettboom
Author-email: matplotlib-users@python.org
License: PSF
Requires: pyparsing, python-dateutil, cycler, kiwisolver, numpy, pillow
Required-by: seaborn, geoplot, descartes, contextily

**Matplotlib installation**

Via pip

**Cartopy version**

Name: Cartopy
Version: 0.18.0
Summary: A cartographic python library with Matplotlib support for visualisation
Home-page: https://scitools.org.uk/cartopy/docs/latest/
Author: UK Met Office
Author-email: None
License: LGPLv3
Requires: pyshp, six, numpy, setuptools, shapely
Required-by: geoplot


**Cartopy installation**

Via pip


## Observation

I would like to state that I don't know whether this Issue is solely a problem of matplotlib, or also cartopy's.

### Related link:

Topic also discussed in StackOverflow ([here](https://stackoverflow.com/questions/66032951/how-to-properly-horizontally-pack-different-patches-in-matplotlib-cartopy-geoaxe))
",PhilipeRLeal,open,2021-03-17 18:08:41,,,,2021-03-18 21:58:22,1,,,
833675330,bad autoscale_view() with long curved FancyArrowPatch,"<!--To help us understand and resolve your issue, please fill out the form to the best of your ability.-->
<!--You can feel free to delete the sections that do not apply.-->

### Bug report

When using a very long `FancyArrowPatch` with `connectionstyle=""arc3""`, subsequent axes autoscaling can badly squash the figure's content. Example below exhibits the problem, but more extreme squashing can easily be obtained. Possibly this is not limited to `FancyArrowPatch`?

**Code for reproduction**

```python
import matplotlib
import matplotlib.pyplot as plt

fap = matplotlib.patches.FancyArrowPatch(
    (10, 10),
    (20, 2e4),
    mutation_scale=50,
    connectionstyle=""arc3,rad=0.3"",
)

_, ax = plt.subplots()
ax.add_patch(fap)
ax.set_title(f""matplotlib {matplotlib.__version__}"")
ax.autoscale_view()
ax.figure.savefig(""curved-arrow.png"")
```

**Actual outcome**

<!--The output produced by the above code, which may be a screenshot, console output, etc.-->

![curved-arrow](https://user-images.githubusercontent.com/8665077/111459663-45cf1c80-871b-11eb-9255-cf475ef1725b.png)

**Expected outcome**

The axes view should span the drawn content. Any control point(s) required for the arc should be ignored.

**Matplotlib version**
<!--Please specify your platform and versions of the relevant libraries you are using:-->
  * Operating system: Linux
  * Matplotlib version: 3.3.4
  * Matplotlib backend: Reproducible with at least `GTK3Agg` and `agg`.
  * Python version: 3.9

<!--Please tell us how you installed matplotlib and python e.g., from source, pip, conda-->
<!--If you installed from conda, please specify which channel you used if not the default-->

Matplotlib installed via pip.",grahamgower,closed,2021-03-17 11:31:51,,2021-03-18 21:45:34,QuLogic,2021-03-18 21:45:41,1,status: duplicate,,
833627145,Masked arrays not working with categorical data,"### Bug report

**Bug summary**

Masked arrays are nicely supported by MPL. The masked data is not plotted and even the line interrupted.
However, when the data is str (categorical) the mask is completely ignored.

**Code for reproduction**

```import matplotlib.pyplot as plt
import numpy.ma
x = range(3)
y = numpy.ma.array(['hello', 'bye', 'bye2'], mask=[False, True, False])
plt.plot(x,y)
plt.show()
```

**Actual outcome**

![image](https://user-images.githubusercontent.com/68613826/111453655-179a0e80-8714-11eb-87ac-37c38a982865.png)

**Expected outcome**

Probably the ""bye"" label should not even be put in the y-axis.
There should be no line but two ""dots"" in hello and bye2.

**Matplotlib version**

  * Operating system: Windows
  * Matplotlib version (`import matplotlib; print(matplotlib.__version__)`): 3.3.4
  * Matplotlib backend (`print(matplotlib.get_backend())`): Qt5Agg
  * Python version: 3.8

Installed from conda-forge",juliospain,open,2021-03-17 10:32:37,,,,2021-03-17 17:23:09,0,topic: categorical,,
833581020,"head size of FancyArrowPatch is ""invisibly small"" by default","<!--To help us understand and resolve your issue, please fill out the form to the best of your ability.-->
<!--You can feel free to delete the sections that do not apply.-->

### Problem

The [`FancyArrowPatch`](https://matplotlib.org/stable/api/_as_gen/matplotlib.patches.FancyArrowPatch.html)  docs give the (mistaken) impression that the arrow will have display coords with `head_length=0.4`, `head_width=0.2`. However this cannot be the case, because with the default values FancyArrowPatch just produces a line (the arrow head is too small to be visible).

```python
import matplotlib
import matplotlib.pyplot as plt

fap = matplotlib.patches.FancyArrowPatch(
    (10, 10),
    (20, 20),
)
_, ax = plt.subplots()
ax.add_patch(fap)
ax.autoscale_view()
ax.set_title(f""matplotlib {matplotlib.__version__}"")
plt.show()
```
![arrow-is-line](https://user-images.githubusercontent.com/8665077/111445304-92aaf700-870b-11eb-9219-aefed9400687.png)

Compounding the problem, it's not clear what coordinate space is in use for the various [`ArrowStyle`](https://matplotlib.org/stable/api/_as_gen/matplotlib.patches.ArrowStyle.html) attributes (hint: it's not the data coords either). After some frustration, I discovered the most useful way to obtain a visible arrow head is to increase the FancyArrrowPatch's `mutation_scale`.

```python
import matplotlib
import matplotlib.pyplot as plt

fap = matplotlib.patches.FancyArrowPatch(
    (10, 10),
    (20, 20),
    mutation_scale=50,
)
_, ax = plt.subplots()
ax.add_patch(fap)
ax.autoscale_view()
ax.set_title(f""matplotlib {matplotlib.__version__}"")
plt.show()
```
![arrow-is-arrow](https://user-images.githubusercontent.com/8665077/111445331-99396e80-870b-11eb-8ec5-1edba42d4c8c.png)

### Suggested Improvement

Presumably this can't be fixed due to a desire for backwards compatibility. But the default behaviour is confusing. A note in the docs suggesting that the arrow head won't be visible with the default parameters would be helpful (and perhaps a suggestion to increase `mutation_scale`). More specific information about what coordinate space is being used would be a bonus.


**Matplotlib version**
<!--Please specify the version of matplotlib and the version of the documentation that you are using:-->
  * Operating system: Linux
  * Matplotlib version 3.3.4
  * Matplotlib documentation version 3.3.4
",grahamgower,open,2021-03-17 09:38:15,,,,2021-03-17 09:38:15,0,Documentation,,
833241131,The examples are not useful for people that want to plot real data instead of numpy functions.,,crogersarvr,closed,2021-03-16 22:22:00,,2021-03-24 02:06:49,tacaswell,2021-03-24 02:06:50,5,status: needs clarification,,
833233810,Respect antialiasing settings in cairo backends as well.,"I don't think there's many people who want non-antialiased output for
cairo; rather, this is mostly so that I can remove the ""agg-only"" point
in the docs (as mplcairo already supports these).

## PR Summary

## PR Checklist

<!-- Please mark any checkboxes that do not apply to this PR as [N/A]. -->

- [ ] Has pytest style unit tests (and `pytest` passes).
- [ ] Is [Flake 8](https://flake8.pycqa.org/en/latest/) compliant (run `flake8` on changed files to check).
- [ ] New features are documented, with examples if plot related.
- [ ] Documentation is sphinx and numpydoc compliant (the docs should [build](https://matplotlib.org/devel/documenting_mpl.html#building-the-docs) without error).
- [ ] Conforms to Matplotlib style conventions (install `flake8-docstrings` and run `flake8 --docstring-convention=all`).
- [ ] New features have an entry in `doc/users/next_whats_new/` (follow instructions in README.rst there).
- [ ] API changes documented in `doc/api/next_api_changes/` (follow instructions in README.rst there).

<!--
Thank you so much for your PR!  To help us review your contribution, please
consider the following points:

- A development guide is available at https://matplotlib.org/devdocs/devel/index.html.

- Help with git and github is available at
  https://matplotlib.org/devel/gitwash/development_workflow.html.

- Do not create the PR out of master, but out of a separate branch.

- The PR title should summarize the changes, for example ""Raise ValueError on
  non-numeric input to set_xlim"".  Avoid non-descriptive titles such as
  ""Addresses issue #8576"".

- The summary should provide at least 1-2 sentences describing the pull request
  in detail (Why is this change required?  What problem does it solve?) and
  link to any relevant issues.

- If you are contributing fixes to docstrings, please pay attention to
  http://matplotlib.org/devel/documenting_mpl.html#formatting.  In particular,
  note the difference between using single backquotes, double backquotes, and
  asterisks in the markup.

We understand that PRs can sometimes be overwhelming, especially as the
reviews start coming in.  Please let us know if the reviews are unclear or
the recommended next step seems overly demanding, if you would like help in
addressing a reviewer's comments, or if you have been waiting too long to hear
back on your PR.
-->
",anntzer,closed,2021-03-16 22:07:31,,2021-03-17 22:53:16,timhoffm,2021-03-26 21:38:38,1,backend/cairo,v3.4.1,61
833225935,Small style fixes to matplotlibrc.template.,"## PR Summary

## PR Checklist

<!-- Please mark any checkboxes that do not apply to this PR as [N/A]. -->

- [ ] Has pytest style unit tests (and `pytest` passes).
- [ ] Is [Flake 8](https://flake8.pycqa.org/en/latest/) compliant (run `flake8` on changed files to check).
- [ ] New features are documented, with examples if plot related.
- [ ] Documentation is sphinx and numpydoc compliant (the docs should [build](https://matplotlib.org/devel/documenting_mpl.html#building-the-docs) without error).
- [ ] Conforms to Matplotlib style conventions (install `flake8-docstrings` and run `flake8 --docstring-convention=all`).
- [ ] New features have an entry in `doc/users/next_whats_new/` (follow instructions in README.rst there).
- [ ] API changes documented in `doc/api/next_api_changes/` (follow instructions in README.rst there).

<!--
Thank you so much for your PR!  To help us review your contribution, please
consider the following points:

- A development guide is available at https://matplotlib.org/devdocs/devel/index.html.

- Help with git and github is available at
  https://matplotlib.org/devel/gitwash/development_workflow.html.

- Do not create the PR out of master, but out of a separate branch.

- The PR title should summarize the changes, for example ""Raise ValueError on
  non-numeric input to set_xlim"".  Avoid non-descriptive titles such as
  ""Addresses issue #8576"".

- The summary should provide at least 1-2 sentences describing the pull request
  in detail (Why is this change required?  What problem does it solve?) and
  link to any relevant issues.

- If you are contributing fixes to docstrings, please pay attention to
  http://matplotlib.org/devel/documenting_mpl.html#formatting.  In particular,
  note the difference between using single backquotes, double backquotes, and
  asterisks in the markup.

We understand that PRs can sometimes be overwhelming, especially as the
reviews start coming in.  Please let us know if the reviews are unclear or
the recommended next step seems overly demanding, if you would like help in
addressing a reviewer's comments, or if you have been waiting too long to hear
back on your PR.
-->
",anntzer,closed,2021-03-16 21:53:29,,2021-03-17 00:54:08,timhoffm,2021-03-17 06:56:54,1,Maintenance,v3.5.0,59
833091435,Don't sort lexicographially entries in SVG output.,"Sorting had been added in cb5893d for reproducible outputs, but dicts
now maintain insertion order so this is not needed anymore; moreover,
not sorting allows keeping attributes in a more semantic meaning --
e.g., attributes of the toplevel `<svg>` are now in the order
`xmlns:xlink width height viewBox xmlns version` rather than
`height version viewBox width xmlns xmlns:xlink`; the `<use>` elements
of ticks now have attributes `xlink:href x y style` rather than
`style x xlink:href y`.

The order is still not perfect due to other issues, but that'll be
addressed another time.

## PR Summary

## PR Checklist

<!-- Please mark any checkboxes that do not apply to this PR as [N/A]. -->

- [ ] Has pytest style unit tests (and `pytest` passes).
- [ ] Is [Flake 8](https://flake8.pycqa.org/en/latest/) compliant (run `flake8` on changed files to check).
- [ ] New features are documented, with examples if plot related.
- [ ] Documentation is sphinx and numpydoc compliant (the docs should [build](https://matplotlib.org/devel/documenting_mpl.html#building-the-docs) without error).
- [ ] Conforms to Matplotlib style conventions (install `flake8-docstrings` and run `flake8 --docstring-convention=all`).
- [ ] New features have an entry in `doc/users/next_whats_new/` (follow instructions in README.rst there).
- [ ] API changes documented in `doc/api/next_api_changes/` (follow instructions in README.rst there).

<!--
Thank you so much for your PR!  To help us review your contribution, please
consider the following points:

- A development guide is available at https://matplotlib.org/devdocs/devel/index.html.

- Help with git and github is available at
  https://matplotlib.org/devel/gitwash/development_workflow.html.

- Do not create the PR out of master, but out of a separate branch.

- The PR title should summarize the changes, for example ""Raise ValueError on
  non-numeric input to set_xlim"".  Avoid non-descriptive titles such as
  ""Addresses issue #8576"".

- The summary should provide at least 1-2 sentences describing the pull request
  in detail (Why is this change required?  What problem does it solve?) and
  link to any relevant issues.

- If you are contributing fixes to docstrings, please pay attention to
  http://matplotlib.org/devel/documenting_mpl.html#formatting.  In particular,
  note the difference between using single backquotes, double backquotes, and
  asterisks in the markup.

We understand that PRs can sometimes be overwhelming, especially as the
reviews start coming in.  Please let us know if the reviews are unclear or
the recommended next step seems overly demanding, if you would like help in
addressing a reviewer's comments, or if you have been waiting too long to hear
back on your PR.
-->
",anntzer,closed,2021-03-16 18:35:18,,2021-03-16 20:07:40,timhoffm,2021-03-16 20:17:49,0,"Maintenance, backend/svg",v3.5.0,59
833073233,Fix colon placement in issue template.,"It is now the same as in `bug_report.md`.

## PR Summary

## PR Checklist

<!-- Please mark any checkboxes that do not apply to this PR as [N/A]. -->

- [ ] Has pytest style unit tests (and `pytest` passes).
- [ ] Is [Flake 8](https://flake8.pycqa.org/en/latest/) compliant (run `flake8` on changed files to check).
- [ ] New features are documented, with examples if plot related.
- [ ] Documentation is sphinx and numpydoc compliant (the docs should [build](https://matplotlib.org/devel/documenting_mpl.html#building-the-docs) without error).
- [ ] Conforms to Matplotlib style conventions (install `flake8-docstrings` and run `flake8 --docstring-convention=all`).
- [ ] New features have an entry in `doc/users/next_whats_new/` (follow instructions in README.rst there).
- [ ] API changes documented in `doc/api/next_api_changes/` (follow instructions in README.rst there).

<!--
Thank you so much for your PR!  To help us review your contribution, please
consider the following points:

- A development guide is available at https://matplotlib.org/devdocs/devel/index.html.

- Help with git and github is available at
  https://matplotlib.org/devel/gitwash/development_workflow.html.

- Do not create the PR out of master, but out of a separate branch.

- The PR title should summarize the changes, for example ""Raise ValueError on
  non-numeric input to set_xlim"".  Avoid non-descriptive titles such as
  ""Addresses issue #8576"".

- The summary should provide at least 1-2 sentences describing the pull request
  in detail (Why is this change required?  What problem does it solve?) and
  link to any relevant issues.

- If you are contributing fixes to docstrings, please pay attention to
  http://matplotlib.org/devel/documenting_mpl.html#formatting.  In particular,
  note the difference between using single backquotes, double backquotes, and
  asterisks in the markup.

We understand that PRs can sometimes be overwhelming, especially as the
reviews start coming in.  Please let us know if the reviews are unclear or
the recommended next step seems overly demanding, if you would like help in
addressing a reviewer's comments, or if you have been waiting too long to hear
back on your PR.
-->
",anntzer,closed,2021-03-16 18:11:09,,2021-03-16 19:42:19,story645,2021-03-16 21:10:10,0,,v3.5.0,59
833071212,"Some API reference pages have no ""examples using this"" section, even though they are explicitly listed by some examples","<!--To help us understand and resolve your issue, please fill out the form to the best of your ability.-->
<!--You can feel free to delete the sections that do not apply.-->

### Problem

The `examples/showcase/bachelors_degree_by_gender.py` example explicitly lists `matplotlib.artist.Artist.set_visible` in its ""The use of the following functions, methods, classes and modules 
is shown in this example"" block, but https://matplotlib.org/devdocs/api/_as_gen/matplotlib.artist.Artist.set_visible.html#matplotlib.artist.Artist.set_visible currently has no ""Examples using set_visible"" block.

### Suggested Improvement

<!--
If you have an idea to improve the documentation please suggest it here

* This line should be be changed to say [...]
* Include a paragraph explaining [...]
* Add a figure showing [...]
-->

**Matplotlib version**
<!--Please specify the version of matplotlib and the version of the documentation that you are using:-->
  * Operating system:
  * Matplotlib version: (`import matplotlib; print(matplotlib.__version__)`)
  * Matplotlib documentation version: (is listed under the logo) 3.3.4.post2588",anntzer,open,2021-03-16 18:08:22,,,,2021-03-21 22:25:31,1,Documentation,,
832773579,"Unexpected MatplotlibDeprecationWarning: savefig() got unexpected keyword argument ""dpi""","### Bug report

**Bug summary**
Without manually calling `savefig()`, a `MatplotlibDeprecationWarning`  regarding `savefig()` is generated when calling `tight_layout()`.

**Code for reproduction**
```python
from matplotlib.figure import Figure
fig = Figure()
fig.add_subplot(111)
fig.tight_layout()
```
**Actual outcome**
The warning
`MatplotlibDeprecationWarning: savefig() got unexpected keyword argument ""dpi"" which is no longer supported as of 3.3 and will become an error two minor releases later
`
is displayed although savefig() was never called in the example.

**Expected outcome**
Figure instance generated without a warning.

**Matplotlib version**
***Testsetup 1:***
  * Operating system: openSUSE Leap 15.2
  * Matplotlib version 3.3.4
  * Matplotlib backend agg
  * Python version: 3.8.6
Matptlotlib was installed via `pip`.

***Testsetup 2:***
  * Operating system: Windows 10
  * Matplotlib version 3.3.2
  * Matplotlib backend Qt5agg
  * Python version: 3.6.12
Matptlotlib was installed via `conda` using the default channel.

",Aikhjarto,closed,2021-03-16 12:59:16,,2021-03-16 14:59:13,anntzer,2021-03-16 14:59:14,2,,,
832430698,DOC: Prepare What's new page for 3.4.0.,"## PR Summary

Still need to check whether any PRs were missed.

## PR Checklist

- [n/a] Has pytest style unit tests (and `pytest` passes).
- [x] Is [Flake 8](https://flake8.pycqa.org/en/latest/) compliant (run `flake8` on changed files to check).
- [x] New features are documented, with examples if plot related.
- [x] Documentation is sphinx and numpydoc compliant (the docs should [build](https://matplotlib.org/devel/documenting_mpl.html#building-the-docs) without error).
- [x] Conforms to Matplotlib style conventions (install `flake8-docstrings` and run `flake8 --docstring-convention=all`).
- [x] New features have an entry in `doc/users/next_whats_new/` (follow instructions in README.rst there).
- [n/a] API changes documented in `doc/api/next_api_changes/` (follow instructions in README.rst there).",QuLogic,closed,2021-03-16 05:36:51,,2021-03-19 03:30:23,tacaswell,2021-03-19 03:46:59,1,Documentation,v3.4.0,53
832240304,Backport PR #19707 on branch v3.4.x (DOC: fix dx in Arrow guide),Backport PR #19707: DOC: fix dx in Arrow guide,meeseeksmachine,closed,2021-03-15 22:24:57,,2021-03-16 00:04:00,QuLogic,2021-03-16 00:04:00,0,,v3.4.0,53
832170408,Backport PR #19709 on branch v3.4.x (Fix arrow_guide.py typo),Backport PR #19709: Fix arrow_guide.py typo,meeseeksmachine,closed,2021-03-15 20:33:23,,2021-03-15 22:24:08,QuLogic,2021-03-15 22:24:09,0,,v3.4.0,53
831843793,Sphinx copy button is overflowing outside the code snippet,"<!--To help us understand and resolve your issue, please fill out the form to the best of your ability.-->
<!--You can feel free to delete the sections that do not apply.-->

### Problem
The copy button generated by the sphinx copy button extension is outside the code snippet.
![Screenshot (705)](https://user-images.githubusercontent.com/53184883/111165570-33db6580-85c5-11eb-84d4-e7f7b13f2df2.png)

<!--
If you are referencing an existing piece of documentation or example please provide a link.

* I found [...] to be unclear because [...]
* [...] made me think that [...] when really it should be [...]
* There is no example showing how to do [...]
-->


### Suggested Improvement

<!--
If you have an idea to improve the documentation please suggest it here

* This line should be be changed to say [...]
* Include a paragraph explaining [...]
* Add a figure showing [...]
-->

**Matplotlib version**
<!--Please specify the version of matplotlib and the version of the documentation that you are using:-->
  * Operating system:
  * Matplotlib version: (`import matplotlib; print(matplotlib.__version__)`)
  * Matplotlib documentation version: (is listed under the logo)",rajpratyush,closed,2021-03-15 14:03:30,,2021-03-15 16:47:56,timhoffm,2021-03-15 22:22:59,2,"Documentation, status: upstream fix required",,
831689781,Fix arrow_guide.py typo,"## PR Summary
Just some corrections to the typos and redundancy in `arrow_guide.py`. 

## PR Checklist

<!-- Please mark any checkboxes that do not apply to this PR as [N/A]. -->

- [N/A] Has pytest style unit tests (and `pytest` passes).
- [x] Is [Flake 8](https://flake8.pycqa.org/en/latest/) compliant (run `flake8` on changed files to check).
- [N/A] New features are documented, with examples if plot related.
- [x] Documentation is sphinx and numpydoc compliant (the docs should [build](https://matplotlib.org/devel/documenting_mpl.html#building-the-docs) without error).
- [x] Conforms to Matplotlib style conventions (install `flake8-docstrings` and run `flake8 --docstring-convention=all`).
- [N/A] New features have an entry in `doc/users/next_whats_new/` (follow instructions in README.rst there).
- [N/A] API changes documented in `doc/api/next_api_changes/` (follow instructions in README.rst there).

<!--
Thank you so much for your PR!  To help us review your contribution, please
consider the following points:

- A development guide is available at https://matplotlib.org/devdocs/devel/index.html.

- Help with git and github is available at
  https://matplotlib.org/devel/gitwash/development_workflow.html.

- Do not create the PR out of master, but out of a separate branch.

- The PR title should summarize the changes, for example ""Raise ValueError on
  non-numeric input to set_xlim"".  Avoid non-descriptive titles such as
  ""Addresses issue #8576"".

- The summary should provide at least 1-2 sentences describing the pull request
  in detail (Why is this change required?  What problem does it solve?) and
  link to any relevant issues.

- If you are contributing fixes to docstrings, please pay attention to
  http://matplotlib.org/devel/documenting_mpl.html#formatting.  In particular,
  note the difference between using single backquotes, double backquotes, and
  asterisks in the markup.

We understand that PRs can sometimes be overwhelming, especially as the
reviews start coming in.  Please let us know if the reviews are unclear or
the recommended next step seems overly demanding, if you would like help in
addressing a reviewer's comments, or if you have been waiting too long to hear
back on your PR.
-->
",smartlixx,closed,2021-03-15 10:57:36,,2021-03-15 20:32:04,timhoffm,2021-03-16 00:56:19,2,Documentation,v3.4.0,53
831674341,MEP29,"<!--
Welcome! Thanks for thinking of a way to improve Matplotlib.


Before creating a new feature request please search the issues for relevant feature requests.
-->



### Problem

One serious problem is how to deal with text having both latex and html-like tags. [MEP29](https://matplotlib.org/stable/devel/MEP/MEP29.html)

<!--
Provide a clear and concise description of the problem this feature will solve. 

For example:
* I'm always frustrated when [...] because [...]
* I would like it if [...] happened when I [...] because [...]
* Here is a sample image of what I am asking for [...]
-->

### Proposed Solution

This MEP proposes to add lightweight markup to the text artist.

<!-- Provide a clear and concise description of a way to accomplish what you want. For example:

* Add an option so that when [...]  [...] will happen
 -->

### Additional context and prior art

Using different size/color/family in a text annotation is difficult because the text method accepts argument for size/color/family/weight/etc. that are used for the whole text. But, if one wants, for example, to have different colors, one has to look at the gallery where one such example is provided: http://matplotlib.org/examples/text_labels_and_annotations/rainbow_text.html

This example takes a list of strings as well as a list of colors which makes it cumbersome to use. An alternative would be to use a restricted set of pango-like markup and to interpret this markup.

<!-- Add any other context or screenshots about the feature request here. You can also include links to examples of other programs that have something similar to your request. For example:

* Another project [...] solved this by [...]
-->",MihaiAnton,closed,2021-03-15 10:38:39,,2021-03-26 00:42:23,QuLogic,2021-03-26 00:42:23,3,New feature,,
831446434,DOC: fix dx in Arrow guide,"## PR Summary

The arrow guide mistakenly made it sound like the arguments for FancyArrowPatch are (x, y) and (dx, dy), whereas they are (x_tail, y_tail) and (x_head, y_head).


## PR Checklist

<!-- Please mark any checkboxes that do not apply to this PR as [N/A]. -->

- [ ] Has pytest style unit tests (and `pytest` passes).
- [ ] Is [Flake 8](https://flake8.pycqa.org/en/latest/) compliant (run `flake8` on changed files to check).
- [ ] New features are documented, with examples if plot related.
- [ ] Documentation is sphinx and numpydoc compliant (the docs should [build](https://matplotlib.org/devel/documenting_mpl.html#building-the-docs) without error).
- [ ] Conforms to Matplotlib style conventions (install `flake8-docstrings` and run `flake8 --docstring-convention=all`).
- [ ] New features have an entry in `doc/users/next_whats_new/` (follow instructions in README.rst there).
- [ ] API changes documented in `doc/api/next_api_changes/` (follow instructions in README.rst there).

<!--
Thank you so much for your PR!  To help us review your contribution, please
consider the following points:

- A development guide is available at https://matplotlib.org/devdocs/devel/index.html.

- Help with git and github is available at
  https://matplotlib.org/devel/gitwash/development_workflow.html.

- Do not create the PR out of master, but out of a separate branch.

- The PR title should summarize the changes, for example ""Raise ValueError on
  non-numeric input to set_xlim"".  Avoid non-descriptive titles such as
  ""Addresses issue #8576"".

- The summary should provide at least 1-2 sentences describing the pull request
  in detail (Why is this change required?  What problem does it solve?) and
  link to any relevant issues.

- If you are contributing fixes to docstrings, please pay attention to
  http://matplotlib.org/devel/documenting_mpl.html#formatting.  In particular,
  note the difference between using single backquotes, double backquotes, and
  asterisks in the markup.

We understand that PRs can sometimes be overwhelming, especially as the
reviews start coming in.  Please let us know if the reviews are unclear or
the recommended next step seems overly demanding, if you would like help in
addressing a reviewer's comments, or if you have been waiting too long to hear
back on your PR.
-->
",jklymak,closed,2021-03-15 05:55:54,,2021-03-15 11:00:18,dstansby,2021-03-16 14:30:47,1,Documentation,v3.4.0,53
831385824,Updated Random Number Generation in Numpy,"## PR Summary
closes #19670 
## PR Checklist

<!-- Please mark any checkboxes that do not apply to this PR as [N/A]. -->

- [ ] Has pytest style unit tests (and `pytest` passes).
- [ ] Is [Flake 8](https://flake8.pycqa.org/en/latest/) compliant (run `flake8` on changed files to check).
- [x] New features are documented, with examples if plot related.
- [x] Documentation is sphinx and numpydoc compliant (the docs should [build](https://matplotlib.org/devel/documenting_mpl.html#building-the-docs) without error).
- [ ] Conforms to Matplotlib style conventions (install `flake8-docstrings` and run `flake8 --docstring-convention=all`).
- [ ] New features have an entry in `doc/users/next_whats_new/` (follow instructions in README.rst there).
- [ ] API changes documented in `doc/api/next_api_changes/` (follow instructions in README.rst there).

<!--
Thank you so much for your PR!  To help us review your contribution, please
consider the following points:

- A development guide is available at https://matplotlib.org/devdocs/devel/index.html.

- Help with git and github is available at
  https://matplotlib.org/devel/gitwash/development_workflow.html.

- Do not create the PR out of master, but out of a separate branch.

- The PR title should summarize the changes, for example ""Raise ValueError on
  non-numeric input to set_xlim"".  Avoid non-descriptive titles such as
  ""Addresses issue #8576"".

- The summary should provide at least 1-2 sentences describing the pull request
  in detail (Why is this change required?  What problem does it solve?) and
  link to any relevant issues.

- If you are contributing fixes to docstrings, please pay attention to
  http://matplotlib.org/devel/documenting_mpl.html#formatting.  In particular,
  note the difference between using single backquotes, double backquotes, and
  asterisks in the markup.

We understand that PRs can sometimes be overwhelming, especially as the
reviews start coming in.  Please let us know if the reviews are unclear or
the recommended next step seems overly demanding, if you would like help in
addressing a reviewer's comments, or if you have been waiting too long to hear
back on your PR.
-->
",rajpratyush,closed,2021-03-15 04:02:44,,2021-03-18 21:46:54,tacaswell,2021-03-18 21:47:03,8,,unassigned,15
831281124,Easier vectorized line segments and arrows ,"Per [this discussion](https://twitter.com/vsbuffalo/status/1371165907075039233) on Twitter, the matplotlib account suggested we create a feature request for easier arrows. In thinking about how this could be addressed, I think it ties in with another frustration I have with matplotlib: drawing lots of line segments and both could be tackled with the same new function.

### Problem

Visually, arrows can be used for a lot of different purposes. `plt.annotate()` is great for pointing to a feature and labeling it with text, but is not a solid solution for data-to-data pointing because the arrow tips don't fall in the center of the points, e.g.[see this example](https://twitter.com/vsbuffalo/status/1371216195194474497). 

`plt.arrow()` seems like the right solution. However, for general purposes, it has two main shortcomings. First, the scaling of the arrowhead is not automatic, so for certain scales of data the arrowheads look bizarre by default, and the arguments are not vectorized.

```python
# it looks fine if we don't divide by 100, but if we do, the scaling is way off
x0 = np.random.uniform(0, 1, 5) / 100
y0 = np.repeat(0, 5)

dx = np.random.normal(0, 0.1, 5) / 100
dy = np.repeat(1, 5)

for i in range(5):
    plt.arrow(x0[i], y0[i], dx[i], dy[i])
```

![Screen Shot 2021-03-14 at 3 35 21 PM](https://user-images.githubusercontent.com/160549/111086709-ea165080-84da-11eb-85b3-a3827d62cfec.png)

Second, as the example shows, the arguments `x`, `y`, `dx`, and `dy` are not vectorized and explicit looping is required. This relates to another section of the API that's undesirably complex in my view: to draw lots of line segments, one needs to use a `LineCollection` and use `ax.add_collection()`.

### Proposed Solution
Matplotlib could solve both of these issues with a new `ax.segments()` method. This would take `xto`, `xfrom`, `yto`, and `yfrom` arguments, and ideally a vector of colors or labels too, and then plot the line segments. Then, one could pass an `arrowstyle` argument too, which would turn this into a collection of line segments with arrow ends. Also, I think in general it would be easier if the API used to and from coordinates rather than from and dx, dy coordinates. Finally, the default should be that the arrows are lines, rather than filled rectangles as with `plt.arrow()`, which create visually odd thin-width arrow bodies depending on the angle is steep between the two and from points. 
",vsbuffalo,open,2021-03-14 22:47:05,,,,2021-03-15 02:47:30,2,New feature,,
831279017,Cleanup license page in docs,"## PR Summary

Partly adresses #19687.

Changes:

- Replaced the license text by a literal include of our license file `LICENSE/LICENSE` in the repo.
  We should not carry two versions of the license. Note that the deleted text used the explicit version `|version|` in many places, which `LICENSE` does not. As far as I understand licenses this is not necessary, and I haven't seen this in other licenses. so this technical change is ok. Anyway we cannot have two different license wordings.
- some capitalization of ""Matplotlib""

",timhoffm,closed,2021-03-14 22:36:40,,2021-03-15 03:10:53,jklymak,2021-03-15 21:34:37,2,Documentation,v3.5.0,59
831261047,DOC:  new plot gallery,"## PR Summary
Start on a new simple plot gallery just for plot types.  Heavily based on the cheatsheet @rougier, and suggested by @story645 

Closes #18277


## PR Checklist

<!-- Please mark any checkboxes that do not apply to this PR as [N/A]. -->

- [ ] Has pytest style unit tests (and `pytest` passes).
- [ ] Is [Flake 8](https://flake8.pycqa.org/en/latest/) compliant (run `flake8` on changed files to check).
- [ ] New features are documented, with examples if plot related.
- [ ] Documentation is sphinx and numpydoc compliant (the docs should [build](https://matplotlib.org/devel/documenting_mpl.html#building-the-docs) without error).
- [ ] Conforms to Matplotlib style conventions (install `flake8-docstrings` and run `flake8 --docstring-convention=all`).
- [ ] New features have an entry in `doc/users/next_whats_new/` (follow instructions in README.rst there).
- [ ] API changes documented in `doc/api/next_api_changes/` (follow instructions in README.rst there).

<!--
Thank you so much for your PR!  To help us review your contribution, please
consider the following points:

- A development guide is available at https://matplotlib.org/devdocs/devel/index.html.

- Help with git and github is available at
  https://matplotlib.org/devel/gitwash/development_workflow.html.

- Do not create the PR out of master, but out of a separate branch.

- The PR title should summarize the changes, for example ""Raise ValueError on
  non-numeric input to set_xlim"".  Avoid non-descriptive titles such as
  ""Addresses issue #8576"".

- The summary should provide at least 1-2 sentences describing the pull request
  in detail (Why is this change required?  What problem does it solve?) and
  link to any relevant issues.

- If you are contributing fixes to docstrings, please pay attention to
  http://matplotlib.org/devel/documenting_mpl.html#formatting.  In particular,
  note the difference between using single backquotes, double backquotes, and
  asterisks in the markup.

We understand that PRs can sometimes be overwhelming, especially as the
reviews start coming in.  Please let us know if the reviews are unclear or
the recommended next step seems overly demanding, if you would like help in
addressing a reviewer's comments, or if you have been waiting too long to hear
back on your PR.
-->
",jklymak,closed,2021-03-14 21:11:52,,2021-04-05 21:15:25,timhoffm,2021-04-05 23:26:25,23,Documentation/new page,v3.5.0,59
831172729,Convert docs to tutorials,"## PR Summary
Closes #19688 
## PR Checklist

<!-- Please mark any checkboxes that do not apply to this PR as [N/A]. -->

- [ ] Has pytest style unit tests (and `pytest` passes).
- [x] Is [Flake 8](https://flake8.pycqa.org/en/latest/) compliant (run `flake8` on changed files to check).
- [x] New features are documented, with examples if plot related.
- [ ] Documentation is sphinx and numpydoc compliant (the docs should [build](https://matplotlib.org/devel/documenting_mpl.html#building-the-docs) without error).
- [ ] Conforms to Matplotlib style conventions (install `flake8-docstrings` and run `flake8 --docstring-convention=all`).
- [ ] New features have an entry in `doc/users/next_whats_new/` (follow instructions in README.rst there).
- [ ] API changes documented in `doc/api/next_api_changes/` (follow instructions in README.rst there).

<!--
Thank you so much for your PR!  To help us review your contribution, please
consider the following points:

- A development guide is available at https://matplotlib.org/devdocs/devel/index.html.

- Help with git and github is available at
  https://matplotlib.org/devel/gitwash/development_workflow.html.

- Do not create the PR out of master, but out of a separate branch.

- The PR title should summarize the changes, for example ""Raise ValueError on
  non-numeric input to set_xlim"".  Avoid non-descriptive titles such as
  ""Addresses issue #8576"".

- The summary should provide at least 1-2 sentences describing the pull request
  in detail (Why is this change required?  What problem does it solve?) and
  link to any relevant issues.

- If you are contributing fixes to docstrings, please pay attention to
  http://matplotlib.org/devel/documenting_mpl.html#formatting.  In particular,
  note the difference between using single backquotes, double backquotes, and
  asterisks in the markup.

We understand that PRs can sometimes be overwhelming, especially as the
reviews start coming in.  Please let us know if the reviews are unclear or
the recommended next step seems overly demanding, if you would like help in
addressing a reviewer's comments, or if you have been waiting too long to hear
back on your PR.
-->
",rajpratyush,open,2021-03-14 14:37:01,,,,2021-03-21 17:50:06,1,"Documentation, status: needs revision",,
831153582,Notebook plotting regression in 3.4.0rc*,"<!--To help us understand and resolve your issue, please fill out the form to the best of your ability.-->
<!--You can feel free to delete the sections that do not apply.-->

### Bug report

**Bug summary**

<!--A short 1-2 sentences that succinctly describes the bug-->

Blitting support have been added in the notebook backend, however, it is fully working, see https://github.com/matplotlib/matplotlib/issues/19633 and in particular https://github.com/matplotlib/matplotlib/issues/19633#issuecomment-795966581.

This breaks plotting for libraries using the `supports_blit` property of the canvas to know if [blitting should be used](https://github.com/hyperspy/hyperspy/blob/5cd76133ae408d50e573d4bf6cf903b03fd8efb1/hyperspy/drawing/figure.py#L59). 

Even if I am really looking forward using blitting in the notebook/ipympl backend, in 3.4.0rc, it seems that this is not ready to be fully used and it breaks plotting in the notebook of hyperspy.
Would it be make sense to have `supports_blit` returns `False` for the notebook backend until blitting is working fine?

**Code for reproduction**

<!--A minimum code snippet required to reproduce the bug.
Please make sure to minimize the number of dependencies required, and provide
any necessary plotted data.
Avoid using threads, as Matplotlib is (explicitly) not thread-safe.-->

It is difficult to provide a minimum example because of https://github.com/matplotlib/matplotlib/issues/19633#issuecomment-795966581 but it can be reproduce using hyperspy:

```python
# Paste your code here
%matplotlib notebook
import hyperspy.api as hs

s = hs.datasets.artificial_data.get_core_loss_eels_line_scan_signal()
s.plot()
```
**Actual outcome**

![notebook_blitting](https://user-images.githubusercontent.com/11851990/111069015-fe4e5380-84c2-11eb-837d-8d3476f2b9bb.jpg)

Similarly ss reported in by @ianhi in #19633, this will use 100% of a CPU. Also, the width of the figure is not correct and the axes disappear when changing the size of the figure:
![notebook_blitting-resize](https://user-images.githubusercontent.com/11851990/111069361-9bf65280-84c4-11eb-9b94-f81a80f6b130.jpg)

**Expected outcome**

Using blitting should work as with other backend, until then, blitting should not be defined as supported for the notebook/ipympl backend.

<!--A description of the expected outcome from the code snippet-->
<!--If this used to work in an earlier version of Matplotlib, please note the version it used to work on-->

**Matplotlib version**
<!--Please specify your platform and versions of the relevant libraries you are using:-->
  * Operating system: 
  * Matplotlib version (`import matplotlib; print(matplotlib.__version__)`): 
  * Matplotlib backend (`print(matplotlib.get_backend())`): 
  * Python version: 
  * Jupyter version (if applicable): 
  * Other libraries: 

<!--Please tell us how you installed matplotlib and python e.g., from source, pip, conda-->
<!--If you installed from conda, please specify which channel you used if not the default-->

",ericpre,closed,2021-03-14 13:14:10,,2021-03-24 18:47:23,QuLogic,2021-03-24 18:53:03,2,Release critical,v3.4.0,53
831136943,Setting pickradius regression in 3.4.0rc,"<!--To help us understand and resolve your issue, please fill out the form to the best of your ability.-->
<!--You can feel free to delete the sections that do not apply.-->

### Bug report

**Bug summary**

The pickradius doesn't seem to be set in matplotlib 3.4.0rc, while this is working fine in 3.3.4.
Using ``axline.set_pickradius(value)`` works fine.

**Code for reproduction**

<!--A minimum code snippet required to reproduce the bug.
Please make sure to minimize the number of dependencies required, and provide
any necessary plotted data.
Avoid using threads, as Matplotlib is (explicitly) not thread-safe.-->

```python
import matplotlib.pyplot as plt

def pick_handler(event):
    print('picked')

fig, ax = plt.subplots()
plt.plot([0, 1, 2])
fig.canvas.mpl_connect('pick_event', pick_handler)

value = 15
axline = plt.axhline(y=1, color=""red"", pickradius=value, picker=True)
```

**Actual outcome**

<!--The output produced by the above code, which may be a screenshot, console output, etc.-->

The pickradius should be set in the call of `plt.axhline`.

**Expected outcome**

<!--A description of the expected outcome from the code snippet-->
<!--If this used to work in an earlier version of Matplotlib, please note the version it used to work on-->

**Matplotlib version**
<!--Please specify your platform and versions of the relevant libraries you are using:-->
  * Operating system: 
  * Matplotlib version (`import matplotlib; print(matplotlib.__version__)`): 
  * Matplotlib backend (`print(matplotlib.get_backend())`): 
  * Python version: 
  * Jupyter version (if applicable): 
  * Other libraries: 

<!--Please tell us how you installed matplotlib and python e.g., from source, pip, conda-->
<!--If you installed from conda, please specify which channel you used if not the default-->

",ericpre,closed,2021-03-14 11:50:55,,2021-03-19 01:17:06,tacaswell,2021-03-19 20:36:01,4,Release critical,v3.4.0,53
831016943,Backport PR #19695 on branch v3.4.x (DOC: Increase size of headings),Backport PR #19695: DOC: Increase size of headings,meeseeksmachine,closed,2021-03-13 22:59:05,,2021-03-14 13:44:31,timhoffm,2021-03-15 22:20:55,0,Documentation,v3.4.0,53
830927443," option for removing bounding box when saving as SVG with plt.savefig(""file.svg"")","
### Problem
When saving to svg, plt creates a bounding box. There is an option for setting this to transparent, but as svg format still recognises this as a path, it is not the same as bounding-box = None

### Proposed Solution

Add the option Bbox= True or False
### Additional context and prior art

This is how Matplotlib renders the result:
![image](https://user-images.githubusercontent.com/52834821/111035721-f8516780-841b-11eb-9785-2e239ae5ca68.png)
but this is what is actualy generated.
![image](https://user-images.githubusercontent.com/52834821/111035753-26cf4280-841c-11eb-9aa3-82b66b9b2917.png)
the current SVG still has the bounding box path ( although it is set to transparent) 
-->",ithinkido,closed,2021-03-13 15:52:05,,2021-03-16 20:38:49,ithinkido,2021-03-16 20:38:49,8,"New feature, status: needs clarification",,
830823795,Backport PR #19690 on branch v3.4.x (Only warn about existing redirects if content differs.),Backport PR #19690: Only warn about existing redirects if content differs.,meeseeksmachine,closed,2021-03-13 06:26:07,,2021-03-13 09:52:01,QuLogic,2021-03-13 09:52:01,0,,v3.4.0,53
830766872,Backport PR #19665 on branch v3.4.x (Changed FormatStrFormatter documentation to include how to get unicode minus),Backport PR #19665: Changed FormatStrFormatter documentation to include how to get unicode minus,meeseeksmachine,closed,2021-03-13 01:20:12,,2021-03-13 02:36:09,QuLogic,2021-03-13 02:36:09,0,,v3.4.0,53
830766173,DOC: Increase size of headings,"## PR Summary
Some time ago, we switch to Carlito, but this font seems to be a bit smaller than our body font.

The default styling makes fourth-level headings (`h4`) the same size as text, but bold:
![Screenshot_2021-03-12 Screenshot](https://user-images.githubusercontent.com/302469/111013960-891e3980-836f-11eb-9491-d1c5ae8cda6b.png)

With the smaller font, this incorrectly makes the fourth-level headings look smaller than the text:
![Screenshot_2021-03-12 Matplotlib Python plotting — Matplotlib 3 4 0rc3 post5 dev0+g78a0acba1d documentation](https://user-images.githubusercontent.com/302469/111013977-a4894480-836f-11eb-87ba-98e301a81f5f.png)

To match the body font, Carlito needs a base size of 16px (vs 14px), so re-scale all the headings using the CSS default em-size * 16px:
![Screenshot_2021-03-12 Matplotlib Python plotting — Matplotlib 3 4 0rc3 post5 dev0+g78a0acba1d documentation(1)](https://user-images.githubusercontent.com/302469/111013986-abb05280-836f-11eb-9077-762c1ea8a305.png)

Additionally, define the custom font under one name, instead of multiple. This means that styles use the normal CSS, and font fallbacks will get the right style.

## PR Checklist

- [n/a] Has pytest style unit tests (and `pytest` passes).
- [n/a] Is [Flake 8](https://flake8.pycqa.org/en/latest/) compliant (run `flake8` on changed files to check).
- [n/a] New features are documented, with examples if plot related.
- [x] Documentation is sphinx and numpydoc compliant (the docs should [build](https://matplotlib.org/devel/documenting_mpl.html#building-the-docs) without error).
- [x] Conforms to Matplotlib style conventions (install `flake8-docstrings` and run `flake8 --docstring-convention=all`).
- [n/a] New features have an entry in `doc/users/next_whats_new/` (follow instructions in README.rst there).
- [n/a] API changes documented in `doc/api/next_api_changes/` (follow instructions in README.rst there).",QuLogic,closed,2021-03-13 01:17:09,,2021-03-13 22:57:59,timhoffm,2021-03-15 20:44:03,0,Documentation,v3.4.0,53
830432299,Blitting SVG Animations,"<!--
Welcome! Thanks for thinking of a way to improve Matplotlib.


Before creating a new feature request please search the issues for relevant feature requests.
-->

### Problem

I'm thrilled that SVG animations will be fully supported in the upcoming release. I've been doing some testing to see how it compares to other animation formats, and to my surprise, the resulting file size of an jshtml svg animation is huge! Here's a small test program that compares the filesize of animations:

```python
import sys
import numpy as np
from tqdm.auto import tqdm, trange
import matplotlib.pyplot as plt
import matplotlib.animation as animation
from IPython.display import HTML

plt.rcParams['animation.embed_limit'] = 2**128

def anim_memfootprint(size, frame_format='png'):
    plt.rcParams['animation.frame_format'] = frame_format

    def update_line(num, data, line):
        line.set_data(data[..., :num])
        return line,
    fig1 = plt.figure()

    # Fixing random state for reproducibility
    np.random.seed(19680801)

    data = np.random.rand(2, size)
    l, = plt.plot([], [], 'r-')
    plt.xlim(0, 1)
    plt.ylim(0, 1)

    line_ani = animation.FuncAnimation(fig1, update_line, size, fargs=(data, l),
                                       interval=50, blit=True)
    footprint = sys.getsizeof(line_ani.to_jshtml())
    plt.close(fig1)
    
    return footprint

x = list(range(110, 5100, 100))
pngs =  [anim_memfootprint(i, 'png') for i in tqdm(x)]
svgs =  [anim_memfootprint(i, 'svg') for i in tqdm(x)]
jpegs =  [anim_memfootprint(i, 'jpeg') for i in tqdm(x)]

plt.plot(x, pngs, label='pngs')
plt.plot(x, svgs, label='svgs')
plt.plot(x, jpegs, label='jpegs')
plt.legend()
```  

If we plot this we get the following plot, with #points/frames on the X-axis and #bytes of the resulting animation on the Y-axis:

![image](https://user-images.githubusercontent.com/17375657/110992921-3d05d180-833c-11eb-9b34-4a3869cb3729.png)

The Y-axis is in 100s of MBs! Sure, there are up to 5000 frames and a max of 5000 points to plot, but still! 
If we consider that each point is an (x, y) pair, each 32bits then that's 5000x2x(32/8) = 40,000 bytes or about 0.04 MB of data to plot. Here, all the rest is static from frame to frame and therefore should be a constant overhead. 

<!--
Provide a clear and concise description of the problem this feature will solve. 

For example:
* I'm always frustrated when [...] because [...]
* I would like it if [...] happened when I [...] because [...]
* Here is a sample image of what I am asking for [...]
-->

### Proposed Solution

<!-- Provide a clear and concise description of a way to accomplish what you want. For example:

* Add an option so that when [...]  [...] will happen
 -->

In these animations, each frame is stored separately and displayed as an image using an image tag with a data URL (where the image is passed in as a base64 encoded string). This makes sense if the format is something like PNG or JPEG as we can't easily only redraw part of it, but for SVG we totally can!

In fact, manipulating SVG via JS is very common. We could have a single SVG image and use JS to only show the parts that are relevant for each frame. In the case of the above, we could do this via the `dashoffset` SVG property as showcased [here](https://jakearchibald.com/2013/animated-line-drawing-svg/).

Blitting this way is not always possible as animations can do more than animate paths. But there are other SVG attributes that can be set dynamically that can be used to not have to redraw the whole frame every time. For instance, the SVG `visibility` attribute (see [here](https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/visibility)) can be set as needed. This would enable SVG animations to only contain one ""master"" SVG document that is edited as needed. 

This is not necessarily complicated either, say there is very little overlap between frames because the animation shows a series of images. We'd have something like:
```svg
<svg width=""200"" height=""200""  xmlns=""http://www.w3.org/2000/svg"">
  <!--  A ton of metadata goes here -->
  <!--  Setup axes, title, legends, etc here -->
  <image id=""frame-1"" href=""..."" height=""200"" width=""200""/>
  <image id=""frame-2"" href=""..."" height=""200"" width=""200""/>
  <image id=""frame-3"" href=""..."" height=""200"" width=""200""/>
  <image id=""frame-4"" href=""..."" height=""200"" width=""200""/>
  <!-- etc -->
</svg>
```

Then the JS which is responsible for currently updating that image tag I mentioned previously can simply set the visibility of the current frame to `visible` and everything else to `hidden`. This would enable re-use of the rest of the figure, and allow for a huge reduction in filesize. 

I'm sure there are other tricks we can play here, but the point is that with SVG animations we can blit and it'll make everything so much faster. I'm routinely generating animations that are 200MB which could be only a few MBs. 

And if we can't effectively perform this blitting, then we can simply fall back on the current behavior!

<!-- ### Additional context and prior art -->

<!-- Add any other context or screenshots about the feature request here. You can also include links to examples of other programs that have something similar to your request. For example:

* Another project [...] solved this by [...]
-->",jungerm2,open,2021-03-12 20:43:25,,,,2021-04-01 23:27:49,20,"New feature, topic: animation",,
830391314,path.sketch doesn't apply to PolyCollection,"<!--To help us understand and resolve your issue, please fill out the form to the best of your ability.-->
<!--You can feel free to delete the sections that do not apply.-->

### Bug report

**Bug summary**
PolyCollection lines aren't affected by changes to the path.sketch rcparam, even though patches 
are-the docs say that polycollection defaults to patch RC params
![image](https://user-images.githubusercontent.com/1300499/110989164-7ab82980-833f-11eb-848a-0325e828974e.png)


**Code for reproduction**
```python
import numpy as np

import matplotlib.collections as mcollections
import matplotlib.patches as mpatches
import matplotlib.pyplot as plt
from matplotlib import rcParams


rcParams['path.sketch'] = (.5, 25, 20)

fig, (ax1, ax2) = plt.subplots(ncols=2)
f1 = mpatches.Rectangle((.25,.25), .5, .5, facecolor='white', edgecolor='C0', linewidth=2)
ax1.add_patch(f1)

verts = np.array([[[1,-1], [1,1], [2.4, 1.5], [2.4, -.5]],
                 [[-.4,1.5],[-.4,-.5],[1,-1],[1,1]],
                 [[-.4, 1.5], [1, 2],[2.4, 1.5], [1,1]]])
verts2 = verts*.25 + [.3]
p = mcollections.PolyCollection(np.vstack([verts, verts2]), facecolor='white', edgecolor='C0', linewidth=2)
ax2.add_collection(p)
```

**Matplotlib version**
  * Matplotlib version (`import matplotlib; print(matplotlib.__version__)`): 3.3.4
  * Matplotlib backend (`print(matplotlib.get_backend())`): jupyter inline
  ",story645,open,2021-03-12 19:35:02,,,,2021-03-12 19:35:02,0,"topic: path handling, topic: rcparams",,
830164049,DLL load failed while importing ft2font - V S Code,"<!--To help us understand and resolve your issue, please fill out the form to the best of your ability.-->
<!--You can feel free to delete the sections that do not apply.-->

### Bug report

**ImportError: DLL load failed while importing ft2font: The specified module could not be found.
Happens only in Visual Studio Code. Runs OK in Jupyter Lab**

<!---->

**Code for reproduction**

<!--A minimum code snippet required to reproduce the bug.
Please make sure to minimize the number of dependencies required, and provide
any necessary plotted data.
Avoid using threads, as Matplotlib is (explicitly) not thread-safe.-->

```python
import matplotlib
#
#
```

**Actual outcome**

<!--The output produced by the above code, which may be a screenshot, console output, etc.-->

```
ImportError: DLL load failed while importing ft2font: The specified module could not be found.
#
#
```

**Expected outcome**

<!--A description of the expected outcome from the code snippet-->
<!--If this used to work in an earlier version of Matplotlib, please note the version it used to work on-->

**Matplotlib version**
<!--Please specify your platform and versions of the relevant libraries you are using:-->
  * Operating system: Windows
  * Matplotlib version (`import matplotlib; print(matplotlib.__version__)`): :matplotlib-3.3.4-py38haa95532_0
  * Matplotlib backend (`print(matplotlib.get_backend())`): 
  * Python version: 3.8.5
  * Jupyter version (if applicable): 
  * Other libraries: 

<!--Please tell us how you installed matplotlib and python e.g., from source, pip, conda-->
<!--If you installed from conda, please specify which channel you used if not the default-->

",akrsrivastava,open,2021-03-12 14:20:56,,,,2021-03-12 14:20:56,0,,,
830014924,contour problem 90 degree angle,"### Bug report

**Bug summary**

The contour routine seems to produce strange results when a contour line must make a 90 degree angle. The problem is reproduced by contouring a small array with 3 rows and 5 columns. The value of the array equals zero along row 0 and along column 2 (the middle column). Contouring the 0 value does not follow this column and the first row. 

**Code for reproduction**

```
import numpy as np
import matplotlib.pyplot as plt
N = 5
h = np.empty((3, N))
h[0] = 0
h[1] = np.linspace(-1, 1, N)
h[2] = np.linspace(-2, 2, N)
print(h)
plt.contour(h, [-1.5, -1, -0.5, 0, 0.5, 1, 1.5], colors='b')
plt.contour(h, [0], colors='r')
plt.grid()
```

**Actual outcome**

<!--The output produced by the above code, which may be a screenshot, console output, etc.-->

<img width=""452"" alt=""Screenshot 2021-03-12 at 12 04 56"" src=""https://user-images.githubusercontent.com/1363400/110932088-4fc3da80-832b-11eb-9022-69073b518f24.png"">


**Expected outcome**

The red line, which represents the line for which `h=0` should have gone straight down to (2,0) and then make a 90 degree angle at the bottom of the figure. In fact, the entire bottom row of the figure equals 0. 

<img width=""452"" alt=""Screenshot 2021-03-12 at 14 20 10"" src=""https://user-images.githubusercontent.com/1363400/110945592-295b6a80-833e-11eb-92eb-ac385ac4b733.png"">


**Matplotlib version**
  * Operating system: MacOS
  * Matplotlib version 3.3.2
  * Matplotlib backend MacOS
  * Python version: 3.8 (standard Anaconda distribution)
  * Jupyter version: Jupyter Lab 2.2.6
  * Other libraries: numpy 1.19.2

",mbakker7,closed,2021-03-12 11:13:45,,2021-03-12 20:41:01,jklymak,2021-03-12 21:32:56,3,,,
829971476,Only warn about existing redirects if content differs.,"## PR Summary

This allows you to re-run doc builds without cleaning.

## PR Checklist

- [n/a] Has pytest style unit tests (and `pytest` passes).
- [x] Is [Flake 8](https://flake8.pycqa.org/en/latest/) compliant (run `flake8` on changed files to check).
- [n/a] New features are documented, with examples if plot related.
- [n/a] Documentation is sphinx and numpydoc compliant (the docs should [build](https://matplotlib.org/devel/documenting_mpl.html#building-the-docs) without error).
- [x] Conforms to Matplotlib style conventions (install `flake8-docstrings` and run `flake8 --docstring-convention=all`).
- [n/a] New features have an entry in `doc/users/next_whats_new/` (follow instructions in README.rst there).
- [n/a] API changes documented in `doc/api/next_api_changes/` (follow instructions in README.rst there).",QuLogic,closed,2021-03-12 10:22:47,,2021-03-13 06:25:55,jklymak,2021-03-13 06:36:13,0,Documentation,v3.4.0,53
829958699,Prepare API docs for v3.4.0,"## PR Checklist

- [n/a] Has pytest style unit tests (and `pytest` passes).
- [n/a] Is [Flake 8](https://flake8.pycqa.org/en/latest/) compliant (run `flake8` on changed files to check).
- [n/a] New features are documented, with examples if plot related.
- [x] Documentation is sphinx and numpydoc compliant (the docs should [build](https://matplotlib.org/devel/documenting_mpl.html#building-the-docs) without error).
- [x] Conforms to Matplotlib style conventions (install `flake8-docstrings` and run `flake8 --docstring-convention=all`).
- [n/a] New features have an entry in `doc/users/next_whats_new/` (follow instructions in README.rst there).
- [x] API changes documented in `doc/api/next_api_changes/` (follow instructions in README.rst there).",QuLogic,closed,2021-03-12 10:08:07,,2021-03-24 03:48:28,tacaswell,2021-03-24 04:05:44,0,Documentation,v3.4.0,53
829586129,Convert remaining narrative docs to tutorials,"The following docs should be converted to tutorials.

- `docs/users/interactive.rst`
- `docs/users/interactive_guide.rst`
- `docs/users/event_handling.rst`

They are the only narrative docs that is not a tutorial, and thus are hard to find. While they could use some work, moving them as is would already be a net win for discoverability.",timhoffm,open,2021-03-11 22:52:37,,,,2021-03-13 22:48:26,4,Documentation,,
829574338,License doc cleanup,"- We have the license text twice:
  - `docs/user/license.rst` includes `|version|` in multiple places. It says specifically ""License agreement for matplotlib |version|"".
  - `LICENSE/LICENSE` only states ""License agreement for matplotlib versions 1.3.0 and later""
  IMO we should only have one license text.
- We have extensive coverage for pre-1.3.0 copyright and license in https://matplotlib.org/stable/users/license.html. Do we have to provide that information at all? If we have to, would it be sufficient to ""For copyright and license of matplotlib prior to version 1.3.0 see https://matplotlib.org/1.3.0/users/license.html"".",timhoffm,closed,2021-03-11 22:32:14,timhoffm,2021-03-24 23:33:23,timhoffm,2021-03-25 00:18:38,6,Documentation,v3.5.0,59
829565129,Declare sphinxext.redirect_from parallel_read_safe,"## PR Summary

The new `redirect_from` plugin prevented sphinx from running in parallel and changed the doc build performance from awfully slow to insanely slow.

This change improves the performances again to awfully slow 😄 . It's only relevant for people who arebuilding the docs in parallel (`make html -j4`).
",timhoffm,open,2021-03-11 22:15:41,,,,2021-03-15 20:25:19,5,Documentation,,
829384308,Add ability to add a patch without updating data limits,"<!--
Welcome! Thanks for thinking of a way to improve Matplotlib.


Before creating a new feature request please search the issues for relevant feature requests.
-->

### Problem
In `sunpy` we have come across a case where we want to `imshow` and image, and then overplot a circle on top of that image. The circle is bigger than the image, and we want to keep the axes limits to those of the image, so ideally we would like a way to add a patch, without the patch updating the data limits. As far as I can tell this isn't possible currently.

To work around this we are using `add_artist()` instead of `add_patch()`, but as I understand from https://github.com/matplotlib/matplotlib/issues/19290 this might change in the future.

### Proposed Solution
`ax.plot()` can take `scalex, scaley` keywords, that indicate whether the x/y limits are updated, so maybe a similar API for `add_patch()`, or individual `Patch` objects would be helpful.

### Additional context and prior art

<!-- Add any other context or screenshots about the feature request here. You can also include links to examples of other programs that have something similar to your request. For example:

* Another project [...] solved this by [...]
-->",dstansby,open,2021-03-11 17:48:33,,,,2021-03-11 21:54:52,4,New feature,,
829150366,Canvas reset after using zoom and adding line,"<!--To help us understand and resolve your issue, please fill out the form to the best of your ability.-->
<!--You can feel free to delete the sections that do not apply.-->

### Bug report

When I create plot in qt, use zoom tool and then add another line, view limit resets. But when I create plot, use pan tool and then add another line, ax limits does not reset. 


**Code for reproduction**

```python

import sys
import numpy as np
from PySide2 import QtWidgets
from matplotlib.backends.backend_qt5agg import (
    FigureCanvas, NavigationToolbar2QT as NavigationToolbar)
from matplotlib.figure import Figure

class ApplicationWindow(QtWidgets.QMainWindow):
    def __init__(self):
        super().__init__()
        self._main = QtWidgets.QWidget()
        self.setCentralWidget(self._main)
        layout = QtWidgets.QVBoxLayout(self._main)

        canvas = FigureCanvas(Figure(constrained_layout=True))
        layout.addWidget(canvas)
        layout.addWidget(NavigationToolbar(canvas, self._main))
        button = QtWidgets.QPushButton('Click me')
        layout.addWidget(button)
        button.clicked.connect(self.add_line)

        self.ax = canvas.figure.subplots(1,1)

        x = np.arange(0,4*np.pi,0.1)
        y = np.sin(x)
        self.ax.plot(x,y)
        canvas.draw_idle()

    def add_line(self):
        x = np.arange(-8,4*np.pi,0.05)
        y = np.cos(x)
        self.ax.plot(x,y)
        self.ax.figure.canvas.draw_idle()

if __name__ == ""__main__"":
    qapp = QtWidgets.QApplication(sys.argv)
    app = ApplicationWindow()
    app.show()
    app.activateWindow()
    app.raise_()
    qapp.exec_()




```


**Expected behavior**
After using zoom tool and adding new line, ax limits should be preserved. I can't think why it behaves differently than pan tool, so I am reporting it as bug, but maybe it's a feature.

**Matplotlib version**
<!--Please specify your platform and versions of the relevant libraries you are using:-->
  * Operating system: Ubuntu 18.04.5 LTS
  * Matplotlib version: 3.3.4
  * Matplotlib backend: Qt5Agg
  * Python version: Python 3.8
  * PySide2 version: 5.15.2


",Stassels,closed,2021-03-11 13:25:46,,2021-03-13 23:23:00,timhoffm,2021-03-13 23:23:07,1,Community support,,
829068845,Matplotlib for [x] users cheetsheets #14966,"## PR Summary

Fixes #14966 
@katrielester, @mkoertshuis, @thomasvant, and I would work on creating a transition guide from Tableau and excel.

## PR Checklist

<!-- Please mark any checkboxes that do not apply to this PR as [N/A]. -->

- [ ] Has pytest style unit tests (and `pytest` passes).
- [ ] Is [Flake 8](https://flake8.pycqa.org/en/latest/) compliant (run `flake8` on changed files to check).
- [ ] New features are documented, with examples if plot related.
- [ ] Documentation is sphinx and numpydoc compliant (the docs should [build](https://matplotlib.org/devel/documenting_mpl.html#building-the-docs) without error).
- [ ] Conforms to Matplotlib style conventions (install `flake8-docstrings` and run `flake8 --docstring-convention=all`).
- [ ] New features have an entry in `doc/users/next_whats_new/` (follow instructions in README.rst there).
- [ ] API changes documented in `doc/api/next_api_changes/` (follow instructions in README.rst there).

<!--
Thank you so much for your PR!  To help us review your contribution, please
consider the following points:

- A development guide is available at https://matplotlib.org/devdocs/devel/index.html.

- Help with git and github is available at
  https://matplotlib.org/devel/gitwash/development_workflow.html.

- Do not create the PR out of master, but out of a separate branch.

- The PR title should summarize the changes, for example ""Raise ValueError on
  non-numeric input to set_xlim"".  Avoid non-descriptive titles such as
  ""Addresses issue #8576"".

- The summary should provide at least 1-2 sentences describing the pull request
  in detail (Why is this change required?  What problem does it solve?) and
  link to any relevant issues.

- If you are contributing fixes to docstrings, please pay attention to
  http://matplotlib.org/devel/documenting_mpl.html#formatting.  In particular,
  note the difference between using single backquotes, double backquotes, and
  asterisks in the markup.

We understand that PRs can sometimes be overwhelming, especially as the
reviews start coming in.  Please let us know if the reviews are unclear or
the recommended next step seems overly demanding, if you would like help in
addressing a reviewer's comments, or if you have been waiting too long to hear
back on your PR.
-->
",MihaiAnton,open,2021-03-11 11:37:42,,,,2021-04-05 09:57:16,1,Documentation/new page,,
829038413,pgf baseline images are OS-dependent,"### Describe the issue

**Summary**

https://github.com/matplotlib/matplotlib/pull/19255 seems to now be blocked on the fact that pgf baseline images that work on ubuntu 16.04 do not work on ubuntu 20.04, likely because some parts of texlive changed their outputs between the two releases.

In fact I have seen the same problem locally -- I have (since a long time ago) been unable to get the pgf tests to pass locally (arch or fedora, self-installed texlive), getting image comparison errors.

### Proposed fix

TBD

Some notes:
We could remove text from the baseline images, and move text testing to separate tests.  Looks like pdflatex's text output can be checked directly by parsing the pdf with pikepdf, but that's not the case for xelatex and lualatex (due to font charmap intricacies).  lualatex's text output, OTOH, could perhaps by tested using https://github.com/Josef-Friedrich/nodetree (which seems to come by default e.g. in texlive-luatex), or more simply something like http://wiki.luatex.org/index.php/Traversing_TeX_nodes.

Another solution would be to use *dvi* output (for the text tests), which is possible also for both xetex (`xelatex -no-pdf`) and luatex (`dvilualatex`), slightly expand matplotlib.dviread to parse xetex-dvi and luatex-dvi as well, and test these outputs.",anntzer,open,2021-03-11 10:57:59,,,,2021-03-21 15:35:32,0,"Maintenance, backend/pgf, topic: testing",,
828771685,Merge branch 'v3.4.x' into master,,QuLogic,closed,2021-03-11 05:44:02,,2021-03-27 07:55:54,QuLogic,2021-03-31 07:45:37,2,status: duplicate,v3.5.0,59
828643369,Backport PR #19402 on branch v3.4.x (Build aarch64 wheels),Backport PR #19402: Build aarch64 wheels,meeseeksmachine,closed,2021-03-11 03:00:20,,2021-03-11 03:34:41,QuLogic,2021-03-11 03:34:52,0,Build,v3.4.0,53
828443443,Add inheritance diagram to patches docs,,timhoffm,closed,2021-03-10 22:58:21,,2021-03-16 20:23:42,jklymak,2021-03-16 22:12:14,0,Documentation,v3.5.0,59
828378502,Backport PR #19671 on branch v3.4.x (Fix crash in early window raise in gtk3.),Backport PR #19671: Fix crash in early window raise in gtk3.,meeseeksmachine,closed,2021-03-10 21:49:48,,2021-03-10 23:48:58,QuLogic,2021-03-10 23:48:59,0,,v3.4.0,53
827698341,Convert axis limit units in Qt plot options widget,"## PR Summary

Qt backend's plot options widget converts axis limits to floats regardless of the actual data type. If the axes use e.g. datetime values, this makes editing the axis limits next to impossible.

This tries to solve the problem at least for datetime values by converting them to a proper type that can be shown in `QDateTime` widget. The solution is probably not ideal as discussed in the issue but at least it helps users that regularly use datetime X axis a lot.

Resolves #19075

## PR Checklist

<!-- Please mark any checkboxes that do not apply to this PR as [N/A]. -->

- [ ] Has pytest style unit tests (and `pytest` passes).
- [ ] Is [Flake 8](https://flake8.pycqa.org/en/latest/) compliant (run `flake8` on changed files to check).
- [ ] New features are documented, with examples if plot related.
- [ ] Documentation is sphinx and numpydoc compliant (the docs should [build](https://matplotlib.org/devel/documenting_mpl.html#building-the-docs) without error).
- [ ] Conforms to Matplotlib style conventions (install `flake8-docstrings` and run `flake8 --docstring-convention=all`).
- [ ] New features have an entry in `doc/users/next_whats_new/` (follow instructions in README.rst there).
- [ ] API changes documented in `doc/api/next_api_changes/` (follow instructions in README.rst there).

<!--
Thank you so much for your PR!  To help us review your contribution, please
consider the following points:

- A development guide is available at https://matplotlib.org/devdocs/devel/index.html.

- Help with git and github is available at
  https://matplotlib.org/devel/gitwash/development_workflow.html.

- Do not create the PR out of master, but out of a separate branch.

- The PR title should summarize the changes, for example ""Raise ValueError on
  non-numeric input to set_xlim"".  Avoid non-descriptive titles such as
  ""Addresses issue #8576"".

- The summary should provide at least 1-2 sentences describing the pull request
  in detail (Why is this change required?  What problem does it solve?) and
  link to any relevant issues.

- If you are contributing fixes to docstrings, please pay attention to
  http://matplotlib.org/devel/documenting_mpl.html#formatting.  In particular,
  note the difference between using single backquotes, double backquotes, and
  asterisks in the markup.

We understand that PRs can sometimes be overwhelming, especially as the
reviews start coming in.  Please let us know if the reviews are unclear or
the recommended next step seems overly demanding, if you would like help in
addressing a reviewer's comments, or if you have been waiting too long to hear
back on your PR.
-->
",soininen,open,2021-03-10 12:58:12,,,,2021-03-22 06:51:09,2,widgets/UI,,
827243969,inconsistent outputs for pdf and png using AnchoredText,"<!--To help us understand and resolve your issue, please fill out the form to the best of your ability.-->
<!--You can feel free to delete the sections that do not apply.-->

### Bug report

**Bug summary**

Using savefig to pdf and png, outputs are different.

<!--A short 1-2 sentences that succinctly describes the bug-->

**Code for reproduction**

<!--A minimum code snippet required to reproduce the bug.
Please make sure to minimize the number of dependencies required, and provide
any necessary plotted data.
Avoid using threads, as Matplotlib is (explicitly) not thread-safe.-->

```python
import numpy as np
import matplotlib.pyplot as plt
from matplotlib.offsetbox import AnchoredText

fig, ax = plt.subplots(1, 1, figsize=(3.2, 3.2))

ax.imshow(np.random.rand(100 ,100), cmap='Blues', vmin=-0.1, vmax=0.8)
at = AnchoredText(""texts"",
                  prop=dict(size=12), frameon=True,
                  loc='upper left',borderpad=0.05,
                  )
#at.patch.set_boxstyle(""round, pad=0.,rounding_size=0.2"")
at.patch.set_alpha(0.5)
at.patch.set_edgecolor([1, 1, 1, 0.5])
at.patch.set_linewidth(1)
ax.add_artist(at)

fig.savefig('test.pdf', dpi=300)
fig.savefig('test.png', dpi=300, transparent=False) 
```

**Actual outcome**

<!--The output produced by the above code, which may be a screenshot, console output, etc.-->

pdf:

![image](https://user-images.githubusercontent.com/15790176/110589554-8e358a00-81b1-11eb-9f02-8b78ead25127.png)

png:

![image](https://user-images.githubusercontent.com/15790176/110589579-9a214c00-81b1-11eb-9b43-cc2c73959740.png)

PNG output has extra lines around the text, which is undesired.

**Expected outcome**

<!--A description of the expected outcome from the code snippet-->
<!--If this used to work in an earlier version of Matplotlib, please note the version it used to work on-->

**Matplotlib version**
<!--Please specify your platform and versions of the relevant libraries you are using:-->
  * Operating system: Windows 10
  * Matplotlib version (`import matplotlib; print(matplotlib.__version__)`): 3.3.4
  * Matplotlib backend (`print(matplotlib.get_backend())`): Qt5Agg
  * Python version:  3.7
  * Jupyter version (if applicable): 
  * Other libraries: 

<!--Please tell us how you installed matplotlib and python e.g., from source, pip, conda-->
<!--If you installed from conda, please specify which channel you used if not the default-->

",jiadong93,closed,2021-03-10 07:04:31,,2021-03-13 23:13:14,timhoffm,2021-03-13 23:13:14,4,status: duplicate,,
826666797,How to multiply sequence by non int . Error,"![IMG_20210310_024818](https://user-images.githubusercontent.com/79998790/110540791-edad7e80-814c-11eb-874e-72dc2f6217d8.jpg)
![IMG_20210310_024828](https://user-images.githubusercontent.com/79998790/110540809-f2723280-814c-11eb-9740-2396482e4827.jpg)
",adityat9083,closed,2021-03-09 21:33:20,,2021-03-09 22:02:32,jklymak,2021-03-09 23:54:28,2,,,
826147912,"Add backend for Qt6 (support for PyQt6, PySide6) ","## PR Summary

This PR adds support for Qt6, with support for both PyQt6 and PySide6 libraries.

For the most part PySide6 is source-compatible with PySide2, aside from the imports and some small changes (see below). PyQt6 is quite different. The main changes that affect us here are 

* `Enums` are no longer available at the top level of modules/objects. For example, previously `Qt.GlobalColor.white` was previously available as `Qt.white`. This short style was present in PyQt5 & PySide2 and is still supported in PySide6. PySide6 also supports the longer version (but...)
* While enum types are identical between PyQt6 & PySide6, flag types have different names. So `Qt.GlobalColor.white` (enum) is the same in both. But alignment flags are in `Qt.Alignment.AlignLeft` in PyQt6 and `Qt.AlignmentFlag.AlignLeft` in PySide6.
* (this may be a bug) Mouse events in PyQt6 no longer have the `.pos()` attribute. We can use `.position()` instead.
* PyQt6 no longer supports using `exec_()`, must use `exec()`. PySide6 is exactly the reverse.
* `Qt.MidButton` is now `Qt.MiddleButton`

The code to work around these differences is in `qt_compat.py`. Because of the differences in flag naming, I've opted to just copy the entries from the enums/flags to the parent object (matching PyQt5/PySide2). There is a further shim for QDialog to account for PyQt no longer having `exec_()`.

Since this adds new files, the diff doesn't show the changes. Below is a diff between v5 and v6.

```diff
backends (qt6-backend) $ diff backend_qt5.py backend_qt6.py
158c158
<                     ""PyQt4"", ""sip"", ""PySide"", ""PySide2"", ""Shiboken""])
---
>                     ""PyQt4"", ""sip"", ""PySide"", ""PySide2"", ""PySide6"", ""Shiboken""])
205c205
<                QtCore.Qt.MidButton: MouseButton.MIDDLE,
---
>                QtCore.Qt.MiddleButton: MouseButton.MIDDLE,
279c279
<             x, y = self.mouseEventCoords(event.pos())
---
>             x, y = self.mouseEventCoords(event.position())
306c306
<         x, y = self.mouseEventCoords(event.pos())
---
>         x, y = self.mouseEventCoords(event.position())
313c313
<         x, y = self.mouseEventCoords(event.pos())
---
>         x, y = self.mouseEventCoords(event.position())
321c321
<         x, y = self.mouseEventCoords(event)
---
>         x, y = self.mouseEventCoords(event.position())
325c325
<         x, y = self.mouseEventCoords(event)
---
>         x, y = self.mouseEventCoords(event.position())
331,351c331,340
<     if QtCore.qVersion() >= ""5."":
<         def wheelEvent(self, event):
<             x, y = self.mouseEventCoords(event)
<             # from QWheelEvent::delta doc
<             if event.pixelDelta().x() == 0 and event.pixelDelta().y() == 0:
<                 steps = event.angleDelta().y() / 120
<             else:
<                 steps = event.pixelDelta().y()
<             if steps:
<                 FigureCanvasBase.scroll_event(
<                     self, x, y, steps, guiEvent=event)
<     else:
<         def wheelEvent(self, event):
<             x = event.x()
<             # flipy so y=0 is bottom of canvas
<             y = self.figure.bbox.height - event.y()
<             # from QWheelEvent::delta doc
<             steps = event.delta() / 120
<             if event.orientation() == QtCore.Qt.Vertical:
<                 FigureCanvasBase.scroll_event(
<                     self, x, y, steps, guiEvent=event)
---
>     def wheelEvent(self, event):
>         x, y = self.mouseEventCoords(event.position())
>         # from QWheelEvent::delta doc
>         if event.pixelDelta().x() == 0 and event.pixelDelta().y() == 0:
>             steps = event.angleDelta().y() / 120
>         else:
>             steps = event.pixelDelta().y()
>         if steps:
>             FigureCanvasBase.scroll_event(
>                 self, x, y, steps, guiEvent=event)
488c477,480
<                 pen = QtGui.QPen(QtCore.Qt.black, 1 / self._dpi_ratio)
---
>                 pen = QtGui.QPen(
>                     QtCore.Qt.black,
>                     1 / self._dpi_ratio
>                 )
1015c1007
< class _BackendQT5(_Backend):
---
> class _BackendQT6(_Backend):
```

The differences being so minor, it may make sense to implement Qt6 based on Qt5 (or both vs a base). 

## PR Checklist

<!-- Please mark any checkboxes that do not apply to this PR as [N/A]. -->

- [ ] Has pytest style unit tests (and `pytest` passes).
- [ ] Is [Flake 8](https://flake8.pycqa.org/en/latest/) compliant (run `flake8` on changed files to check).
- [ ] New features are documented, with examples if plot related.
- [ ] Documentation is sphinx and numpydoc compliant (the docs should [build](https://matplotlib.org/devel/documenting_mpl.html#building-the-docs) without error).
- [ ] Conforms to Matplotlib style conventions (install `flake8-docstrings` and run `flake8 --docstring-convention=all`).
- [ ] New features have an entry in `doc/users/next_whats_new/` (follow instructions in README.rst there).
- [ ] API changes documented in `doc/api/next_api_changes/` (follow instructions in README.rst there).

<!--
Thank you so much for your PR!  To help us review your contribution, please
consider the following points:

- A development guide is available at https://matplotlib.org/devdocs/devel/index.html.

- Help with git and github is available at
  https://matplotlib.org/devel/gitwash/development_workflow.html.

- Do not create the PR out of master, but out of a separate branch.

- The PR title should summarize the changes, for example ""Raise ValueError on
  non-numeric input to set_xlim"".  Avoid non-descriptive titles such as
  ""Addresses issue #8576"".

- The summary should provide at least 1-2 sentences describing the pull request
  in detail (Why is this change required?  What problem does it solve?) and
  link to any relevant issues.

- If you are contributing fixes to docstrings, please pay attention to
  http://matplotlib.org/devel/documenting_mpl.html#formatting.  In particular,
  note the difference between using single backquotes, double backquotes, and
  asterisks in the markup.

We understand that PRs can sometimes be overwhelming, especially as the
reviews start coming in.  Please let us know if the reviews are unclear or
the recommended next step seems overly demanding, if you would like help in
addressing a reviewer's comments, or if you have been waiting too long to hear
back on your PR.
-->
",mfitzp,closed,2021-03-09 15:56:56,,2021-03-09 16:16:40,mfitzp,2021-03-09 17:27:43,3,,,
826007662,_mathtext.py get_unicode_index: do not replace hyphen minus if rcParams['axes.unicode_minus'] == False,"_mathtext.py get_unicode_index replaced the hyphen minus by the unicode minus(U+2212) even if rcParams['axes.unicode_minus'] is set to False. some Fonts do not supply the unicode minus (U+2212). Disabling unicode_minus in the rc file should also affect mathtext, otherwise \mathdefault in combination with such a font leads to dummy symbols.
## PR Summary

## PR Checklist

<!-- Please mark any checkboxes that do not apply to this PR as [N/A]. -->

- [N/A] Has pytest style unit tests (and `pytest` passes).
- [x] Is [Flake 8](https://flake8.pycqa.org/en/latest/) compliant (run `flake8` on changed files to check).
- [N/A] New features are documented, with examples if plot related.
- [N/A] Documentation is sphinx and numpydoc compliant (the docs should [build](https://matplotlib.org/devel/documenting_mpl.html#building-the-docs) without error).
- [x] Conforms to Matplotlib style conventions (install `flake8-docstrings` and run `flake8 --docstring-convention=all`).
- [N/A] New features have an entry in `doc/users/next_whats_new/` (follow instructions in README.rst there).
- [ N/A] API changes documented in `doc/api/next_api_changes/` (follow instructions in README.rst there).

<!--
Thank you so much for your PR!  To help us review your contribution, please
consider the following points:

- A development guide is available at https://matplotlib.org/devdocs/devel/index.html.

- Help with git and github is available at
  https://matplotlib.org/devel/gitwash/development_workflow.html.

- Do not create the PR out of master, but out of a separate branch.

- The PR title should summarize the changes, for example ""Raise ValueError on
  non-numeric input to set_xlim"".  Avoid non-descriptive titles such as
  ""Addresses issue #8576"".

- The summary should provide at least 1-2 sentences describing the pull request
  in detail (Why is this change required?  What problem does it solve?) and
  link to any relevant issues.

- If you are contributing fixes to docstrings, please pay attention to
  http://matplotlib.org/devel/documenting_mpl.html#formatting.  In particular,
  note the difference between using single backquotes, double backquotes, and
  asterisks in the markup.

We understand that PRs can sometimes be overwhelming, especially as the
reviews start coming in.  Please let us know if the reviews are unclear or
the recommended next step seems overly demanding, if you would like help in
addressing a reviewer's comments, or if you have been waiting too long to hear
back on your PR.
-->
",s-daedalus,closed,2021-03-09 14:22:48,,2021-03-09 14:26:43,s-daedalus,2021-03-09 14:30:11,0,,,
825757811,Matplotlib plots lose transparency when saving as pdf,"<!--To help us understand and resolve your issue, please fill out the form to the best of your ability.-->
<!--You can feel free to delete the sections that do not apply.-->

### Bug report

**Bug summary**
Saving a plot using `fig.savefig()` with the argument `transparent=True` produces a plot without transparency if saved as `pdf`, this works for `svg` and `png`.

<!--A short 1-2 sentences that succinctly describes the bug-->

**Code for reproduction**
```python
import matplotlib.pyplot as plt
import numpy as np

x = np.linspace(0, 2*np.pi)
y = np.cos(x)

fig, ax = plt.subplots(figsize=(10,6))
ax.plot(x, y, '--')

fig.savefig('example.pdf', transparent=True, bbox_inches='tight')
fig.savefig('example.svg', transparent=True, bbox_inches='tight')
```

**Matplotlib version**
<!--Please specify your platform and versions of the relevant libraries you are using:-->
  * Operating system: Linux - EndeavourOS
  * Matplotlib version (`import matplotlib; print(matplotlib.__version__)`): 3.3.4
  * Matplotlib backend (`print(matplotlib.get_backend())`): Qt5Agg
  * Python version: 3.9.2
  * Jupyter version (if applicable): 
  * Other libraries: 

<!--Please tell us how you installed matplotlib and python e.g., from source, pip, conda-->
<!--If you installed from conda, please specify which channel you used if not the default-->
Matplotlib installed using conda
```bash
[morten@endeavour ~]$ conda list | grep matplotlib
matplotlib                3.3.4            py39hf3d152e_0    conda-forge
matplotlib-base           3.3.4            py39h62a2d02_0 
```
",mnissov,closed,2021-03-09 11:18:39,,2021-03-09 15:38:42,jklymak,2021-03-09 15:38:42,3,backend/pdf,,
825705564,Fix crash in early window raise in gtk3.,"Repro:

    import matplotlib as mpl
    import matplotlib.pyplot as plt
    mpl.use('GTK3Agg')
    plt.figure().canvas.mpl_connect('resize_event', lambda e: plt.pause(1))
    plt.show()

Closes https://github.com/matplotlib/matplotlib/issues/19593.

No test because heh.

## PR Summary

## PR Checklist

<!-- Please mark any checkboxes that do not apply to this PR as [N/A]. -->

- [ ] Has pytest style unit tests (and `pytest` passes).
- [ ] Is [Flake 8](https://flake8.pycqa.org/en/latest/) compliant (run `flake8` on changed files to check).
- [ ] New features are documented, with examples if plot related.
- [ ] Documentation is sphinx and numpydoc compliant (the docs should [build](https://matplotlib.org/devel/documenting_mpl.html#building-the-docs) without error).
- [ ] Conforms to Matplotlib style conventions (install `flake8-docstrings` and run `flake8 --docstring-convention=all`).
- [ ] New features have an entry in `doc/users/next_whats_new/` (follow instructions in README.rst there).
- [ ] API changes documented in `doc/api/next_api_changes/` (follow instructions in README.rst there).

<!--
Thank you so much for your PR!  To help us review your contribution, please
consider the following points:

- A development guide is available at https://matplotlib.org/devdocs/devel/index.html.

- Help with git and github is available at
  https://matplotlib.org/devel/gitwash/development_workflow.html.

- Do not create the PR out of master, but out of a separate branch.

- The PR title should summarize the changes, for example ""Raise ValueError on
  non-numeric input to set_xlim"".  Avoid non-descriptive titles such as
  ""Addresses issue #8576"".

- The summary should provide at least 1-2 sentences describing the pull request
  in detail (Why is this change required?  What problem does it solve?) and
  link to any relevant issues.

- If you are contributing fixes to docstrings, please pay attention to
  http://matplotlib.org/devel/documenting_mpl.html#formatting.  In particular,
  note the difference between using single backquotes, double backquotes, and
  asterisks in the markup.

We understand that PRs can sometimes be overwhelming, especially as the
reviews start coming in.  Please let us know if the reviews are unclear or
the recommended next step seems overly demanding, if you would like help in
addressing a reviewer's comments, or if you have been waiting too long to hear
back on your PR.
-->
",anntzer,closed,2021-03-09 10:40:20,,2021-03-10 21:49:00,QuLogic,2021-03-10 21:52:26,2,GUI/gtk,v3.4.0,53
825361050,The Recommended Random Number Generation In NumPy,"<!--To help us understand and resolve your issue, please fill out the form to the best of your ability.-->
<!--You can feel free to delete the sections that do not apply.-->

### Problem

Matplotlib documentation still uses old method of random number generation in NumPy. I think we can update the code to use newer method. Newer method was intropduced in NumPy 1.17 and recommended by NumPy over the older method (even though the older method still works)


<!--
If you are referencing an existing piece of documentation or example please provide a link.
-->
* I found [histogram example](https://matplotlib.org/stable/gallery/statistics/hist.html) can be updated with newer code.



### Suggested Improvement

<!-- 
If you have an idea to improve the documentation please suggest it here
-->

* We can change the code to shown in [this GitHub gist](https://gist.github.com/ArnuldOnData/3d298ccb3f4ba5b94006bdc55b8ea3d3)
* Entire documenation regarding recommended method is in [NumPy docs](https://numpy.org/doc/stable/reference/random/index.html#random-quick-start)  
* Here is a visualization/output from the code in gist above: 

![matplotlib-numpy-random](https://user-images.githubusercontent.com/60259411/110422384-42a5b200-80c5-11eb-888e-ad8fc9809b73.png)



**Matplotlib version**
<!--Please specify the version of matplotlib and the version of the documentation that you are using:-->
  * Operating system: **Arch Linux**
  * Matplotlib version: **3.3.4** (matplotlib.__version__)
  * Python version: **3.9.2**  (platform.python_version())
  * Matplotlib documentation version: **Doc version v3.3.4** (as seen at the bottom of the [histogram page](https://matplotlib.org/stable/gallery/statistics/hist.html) ) ",ArnuldOnData,closed,2021-03-09 05:30:22,,2021-03-18 21:48:56,tacaswell,2021-03-18 21:48:57,8,"Documentation, Good first issue",,
825154662,Backport PR #19661 on branch v3.4.x (Fix CoC link),Backport PR #19661: Fix CoC link,meeseeksmachine,closed,2021-03-09 01:40:41,,2021-03-09 03:13:48,QuLogic,2021-03-10 07:37:50,0,Documentation,v3.4.0,53
825153678,Backport PR #19663 on branch v3.4.x (ENH: add a copy method to colormaps),Backport PR #19663: ENH: add a copy method to colormaps,meeseeksmachine,closed,2021-03-09 01:39:19,,2021-03-09 03:13:23,QuLogic,2021-03-09 03:13:23,0,topic: color/color & colormaps,v3.4.0,53
824931558,Inconsistent error when plotting with FuncAnimation vs plt.plot,"<!--To help us understand and resolve your issue, please fill out the form to the best of your ability.-->
<!--You can feel free to delete the sections that do not apply.-->

### Bug report

**Bug summary**

<!--A short 1-2 sentences that succinctly describes the bug-->

The error thrown when there's a data mismatch when animating is not as expected, it doesn't get caught by matplotlib and instead numpy throws one. I was wondering if it would be possible to improve this error message and make it more informative. I wouldn't mind contributing to this small ""quality of life"" improvement, I'm just not sure where to start or if this is in fact an issue.  

**Code for reproduction**

<!--A minimum code snippet required to reproduce the bug.
Please make sure to minimize the number of dependencies required, and provide
any necessary plotted data.
Avoid using threads, as Matplotlib is (explicitly) not thread-safe.-->

This error can be reproduced with the following code:

```python
import numpy as np
import matplotlib.pyplot as plt
import matplotlib.animation as animation
from IPython.display import HTML

plt.rcParams['animation.frame_format'] = 'png'

def update_line(num, data, line):
    line.set_data(range(num+1), data[:num])  # Error gets thrown because of this shape mismatch
    return line,
fig1 = plt.figure()

# Fixing random state for reproducibility
np.random.seed(19680801)

size = 25
data = np.random.rand(size)
l, = plt.plot([], [], 'r-')
plt.xlim(0, size)
plt.ylim(0, 1)

line_ani = animation.FuncAnimation(fig1, update_line, size, fargs=(data, l),
                                   interval=50, blit=True)
anim = line_ani.to_jshtml()
plt.close(fig1)

HTML(anim)
```

**Actual outcome**

<!--The output produced by the above code, which may be a screenshot, console output, etc.-->

When plotting data with different dimensions while animating we get the following error that is thrown by numpy: 

```
ValueError                                Traceback (most recent call last)
<ipython-input-7-6fb730cf6bdf> in <module>
     22 line_ani = animation.FuncAnimation(fig1, update_line, size, fargs=(data, l),
     23                                    interval=50, blit=True)
---> 24 anim = line_ani.to_jshtml()
     25 plt.close(fig1)
     26 

~/.ml-venv/lib/python3.8/site-packages/matplotlib/animation.py in to_jshtml(self, fps, embed_frames, default_mode)
   1400                                     embed_frames=embed_frames,
   1401                                     default_mode=default_mode)
-> 1402                 self.save(str(path), writer=writer)
   1403                 self._html_representation = path.read_text()
   1404 

~/.ml-venv/lib/python3.8/site-packages/matplotlib/animation.py in save(self, filename, writer, fps, dpi, codec, bitrate, extra_args, metadata, extra_anim, savefig_kwargs, progress_callback)
   1171                 for anim, d in zip(all_anim, data):
   1172                     # TODO: See if turning off blit is really necessary
-> 1173                     anim._draw_next_frame(d, blit=False)
   1174                     if progress_callback is not None:
   1175                         progress_callback(frame_number, total_frames)

~/.ml-venv/lib/python3.8/site-packages/matplotlib/animation.py in _draw_next_frame(self, framedata, blit)
   1207         self._pre_draw(framedata, blit)
   1208         self._draw_frame(framedata)
-> 1209         self._post_draw(framedata, blit)
   1210 
   1211     def _init_draw(self):

~/.ml-venv/lib/python3.8/site-packages/matplotlib/animation.py in _post_draw(self, framedata, blit)
   1232             self._blit_draw(self._drawn_artists)
   1233         else:
-> 1234             self._fig.canvas.draw_idle()
   1235 
   1236     # The rest of the code in this class is to facilitate easy blitting

~/.ml-venv/lib/python3.8/site-packages/matplotlib/backend_bases.py in draw_idle(self, *args, **kwargs)
   2053         if not self._is_idle_drawing:
   2054             with self._idle_draw_cntx():
-> 2055                 self.draw(*args, **kwargs)
   2056 
   2057     def get_width_height(self):

~/.ml-venv/lib/python3.8/site-packages/matplotlib/backends/backend_agg.py in draw(self)
    404              (self.toolbar._wait_cursor_for_draw_cm() if self.toolbar
    405               else nullcontext()):
--> 406             self.figure.draw(self.renderer)
    407             # A GUI class may be need to update a window using this draw, so
    408             # don't forget to call the superclass.

~/.ml-venv/lib/python3.8/site-packages/matplotlib/artist.py in draw_wrapper(artist, renderer, *args, **kwargs)
     72     @wraps(draw)
     73     def draw_wrapper(artist, renderer, *args, **kwargs):
---> 74         result = draw(artist, renderer, *args, **kwargs)
     75         if renderer._rasterizing:
     76             renderer.stop_rasterizing()

~/.ml-venv/lib/python3.8/site-packages/matplotlib/artist.py in draw_wrapper(artist, renderer, *args, **kwargs)
     49                 renderer.start_filter()
     50 
---> 51             return draw(artist, renderer, *args, **kwargs)
     52         finally:
     53             if artist.get_agg_filter() is not None:

~/.ml-venv/lib/python3.8/site-packages/matplotlib/figure.py in draw(self, renderer)
   2723 
   2724             self.patch.draw(renderer)
-> 2725             mimage._draw_list_compositing_images(
   2726                 renderer, self, artists, self.suppressComposite)
   2727 

~/.ml-venv/lib/python3.8/site-packages/matplotlib/image.py in _draw_list_compositing_images(renderer, parent, artists, suppress_composite)
    130     if not_composite or not has_images:
    131         for a in artists:
--> 132             a.draw(renderer)
    133     else:
    134         # Composite any adjacent images together

~/.ml-venv/lib/python3.8/site-packages/matplotlib/artist.py in draw_wrapper(artist, renderer, *args, **kwargs)
     49                 renderer.start_filter()
     50 
---> 51             return draw(artist, renderer, *args, **kwargs)
     52         finally:
     53             if artist.get_agg_filter() is not None:

~/.ml-venv/lib/python3.8/site-packages/matplotlib/_api/deprecation.py in wrapper(*inner_args, **inner_kwargs)
    429                          else deprecation_addendum,
    430                 **kwargs)
--> 431         return func(*inner_args, **inner_kwargs)
    432 
    433     return wrapper

~/.ml-venv/lib/python3.8/site-packages/matplotlib/axes/_base.py in draw(self, renderer, inframe)
   2923             renderer.stop_rasterizing()
   2924 
-> 2925         mimage._draw_list_compositing_images(renderer, self, artists)
   2926 
   2927         renderer.close_group('axes')

~/.ml-venv/lib/python3.8/site-packages/matplotlib/image.py in _draw_list_compositing_images(renderer, parent, artists, suppress_composite)
    130     if not_composite or not has_images:
    131         for a in artists:
--> 132             a.draw(renderer)
    133     else:
    134         # Composite any adjacent images together

~/.ml-venv/lib/python3.8/site-packages/matplotlib/artist.py in draw_wrapper(artist, renderer, *args, **kwargs)
     49                 renderer.start_filter()
     50 
---> 51             return draw(artist, renderer, *args, **kwargs)
     52         finally:
     53             if artist.get_agg_filter() is not None:

~/.ml-venv/lib/python3.8/site-packages/matplotlib/lines.py in draw(self, renderer)
    749 
    750         if self._invalidy or self._invalidx:
--> 751             self.recache()
    752         self.ind_offset = 0  # Needed for contains() method.
    753         if self._subslice and self.axes:

~/.ml-venv/lib/python3.8/site-packages/matplotlib/lines.py in recache(self, always)
    669             y = self._y
    670 
--> 671         self._xy = np.column_stack(np.broadcast_arrays(x, y)).astype(float)
    672         self._x, self._y = self._xy.T  # views
    673 

<__array_function__ internals> in broadcast_arrays(*args, **kwargs)

~/.ml-venv/lib/python3.8/site-packages/numpy/lib/stride_tricks.py in broadcast_arrays(*args, **kwargs)
    262     args = [np.array(_m, copy=False, subok=subok) for _m in args]
    263 
--> 264     shape = _broadcast_shape(*args)
    265 
    266     if all(array.shape == shape for array in args):

~/.ml-venv/lib/python3.8/site-packages/numpy/lib/stride_tricks.py in _broadcast_shape(*args)
    189     # use the old-iterator because np.nditer does not handle size 0 arrays
    190     # consistently
--> 191     b = np.broadcast(*args[:32])
    192     # unfortunately, it cannot handle 32 or more arguments directly
    193     for pos in range(32, len(args), 31):

ValueError: shape mismatch: objects cannot be broadcast to a single shape
```

**Expected outcome**

<!--A description of the expected outcome from the code snippet-->
<!--If this used to work in an earlier version of Matplotlib, please note the version it used to work on-->

If we try plotting data with inconsistent dimensions (i.e: `plt.plot([1,2,3], [1, 2])`) we get the following error:

```
~/.ml-venv/lib/python3.8/site-packages/matplotlib/axes/_base.py in _plot_args(self, tup, kwargs, return_kwargs)
    499 
    500         if x.shape[0] != y.shape[0]:
--> 501             raise ValueError(f""x and y must have same first dimension, but ""
    502                              f""have shapes {x.shape} and {y.shape}"")
    503         if x.ndim > 2 or y.ndim > 2:

ValueError: x and y must have same first dimension, but have shapes (3,) and (2,)
``` 

I would expect the above code to produce a similar error. 

**Matplotlib version**
<!--Please specify your platform and versions of the relevant libraries you are using:-->
  * Operating system: Ubuntu 20.04
  * Matplotlib version: 3.3.4+2545.gbd7df7847 
  * Matplotlib backend: agg 
  * Python version: 3.8.5
  * Jupyter version (if applicable): 
      - jupyter core     : 4.6.3
      - jupyter-notebook : 6.1.4
      - qtconsole        : 5.0.1
      - ipython          : 7.18.1
      - ipykernel        : 5.3.4
      - jupyter client   : 6.1.7
      - jupyter lab      : 3.0.9
      - nbconvert        : 6.0.7
      - ipywidgets       : 7.6.3
      - nbformat         : 5.0.7
      - traitlets        : 5.0.4
  * Other libraries: N/A

<!--Please tell us how you installed matplotlib and python e.g., from source, pip, conda-->
<!--If you installed from conda, please specify which channel you used if not the default-->

",jungerm2,open,2021-03-08 20:38:00,,,,2021-03-09 03:37:51,4,API: argument checking,,
824065452,Change dictionary to list of tuples to permit duplicate keys,"## PR Summary
As described in [#19607](https://github.com/matplotlib/matplotlib/issues/19607), when multiple curves are given the same label, only the first one of each redundant label can be edited in the PyQT backend. This is because the curves and their corresponding labels have been saved in a dictionary. It's possible that a user may have a use case for giving multiple curves the same label, so they should be able to edit them separately as well.

To accommodate this, we modified the dictionary which was saving the labeled curves, replacing it with a list of tuples. The list of tuples is sorted in the same way.

I am not sure how to add the tests for this; so far I just tested it manually creating an instance of `NavigationToolbar2QT` and giving it redundantly named curves, and verify that they can be edited independently.
There is a test at `lib/matplotlib/tests/test_backend_qt.py::test_figureoptions`, but all it does is call a mock which will eventually call `figureoptions.figure_edit`, just creating it without checking the number of curves available to edit, seems insufficient.


## PR Checklist

<!-- Please mark any checkboxes that do not apply to this PR as [N/A]. -->

- [ ] Has pytest style unit tests (and `pytest` passes).
- [X] Is [Flake 8](https://flake8.pycqa.org/en/latest/) compliant (run `flake8` on changed files to check).
- [N/A] New features are documented, with examples if plot related.
- [N/A] Documentation is sphinx and numpydoc compliant (the docs should [build](https://matplotlib.org/devel/documenting_mpl.html#building-the-docs) without error).
- [x] Conforms to Matplotlib style conventions (install `flake8-docstrings` and run `flake8 --docstring-convention=all`).
- [N/A] New features have an entry in `doc/users/next_whats_new/` (follow instructions in README.rst there).
- [N/A] API changes documented in `doc/api/next_api_changes/` (follow instructions in README.rst there).

<!--
Thank you so much for your PR!  To help us review your contribution, please
consider the following points:

- A development guide is available at https://matplotlib.org/devdocs/devel/index.html.

- Help with git and github is available at
  https://matplotlib.org/devel/gitwash/development_workflow.html.

- Do not create the PR out of master, but out of a separate branch.

- The PR title should summarize the changes, for example ""Raise ValueError on
  non-numeric input to set_xlim"".  Avoid non-descriptive titles such as
  ""Addresses issue #8576"".

- The summary should provide at least 1-2 sentences describing the pull request
  in detail (Why is this change required?  What problem does it solve?) and
  link to any relevant issues.

- If you are contributing fixes to docstrings, please pay attention to
  http://matplotlib.org/devel/documenting_mpl.html#formatting.  In particular,
  note the difference between using single backquotes, double backquotes, and
  asterisks in the markup.

We understand that PRs can sometimes be overwhelming, especially as the
reviews start coming in.  Please let us know if the reviews are unclear or
the recommended next step seems overly demanding, if you would like help in
addressing a reviewer's comments, or if you have been waiting too long to hear
back on your PR.
-->
",PhilipSchiff,closed,2021-03-08 00:22:01,,2021-04-01 04:09:24,QuLogic,2021-04-04 02:59:23,3,widgets/UI,v3.5.0,59
824055567,Changed FormatStrFormatter documentation to include how to get unicode minus,"## PR Summary
Amended docstring for FormatStrFormatter so there is documentation for how to get a unicode minus instead of a dash.

Closes #17967.

## PR Checklist

<!-- Please mark any checkboxes that do not apply to this PR as [N/A]. -->

- [x] Has pytest style unit tests (and `pytest` passes).
- [x] Is [Flake 8](https://flake8.pycqa.org/en/latest/) compliant (run `flake8` on changed files to check).
- [x] New features are documented, with examples if plot related.
- [ ] Documentation is sphinx and numpydoc compliant (the docs should [build](https://matplotlib.org/devel/documenting_mpl.html#building-the-docs) without error).
- [x] Conforms to Matplotlib style conventions (install `flake8-docstrings` and run `flake8 --docstring-convention=all`).
- [x] New features have an entry in `doc/users/next_whats_new/` (follow instructions in README.rst there).
- [x] API changes documented in `doc/api/next_api_changes/` (follow instructions in README.rst there).

<!--
Thank you so much for your PR!  To help us review your contribution, please
consider the following points:

- A development guide is available at https://matplotlib.org/devdocs/devel/index.html.

- Help with git and github is available at
  https://matplotlib.org/devel/gitwash/development_workflow.html.

- Do not create the PR out of master, but out of a separate branch.

- The PR title should summarize the changes, for example ""Raise ValueError on
  non-numeric input to set_xlim"".  Avoid non-descriptive titles such as
  ""Addresses issue #8576"".

- The summary should provide at least 1-2 sentences describing the pull request
  in detail (Why is this change required?  What problem does it solve?) and
  link to any relevant issues.

- If you are contributing fixes to docstrings, please pay attention to
  http://matplotlib.org/devel/documenting_mpl.html#formatting.  In particular,
  note the difference between using single backquotes, double backquotes, and
  asterisks in the markup.

We understand that PRs can sometimes be overwhelming, especially as the
reviews start coming in.  Please let us know if the reviews are unclear or
the recommended next step seems overly demanding, if you would like help in
addressing a reviewer's comments, or if you have been waiting too long to hear
back on your PR.
-->
",The-Inky,closed,2021-03-07 23:43:14,,2021-03-10 20:56:21,timhoffm,2021-03-13 01:19:27,2,Documentation,v3.4.0,53
824020085,Does not compile on OpenBSD 6.8,"<!--To help us understand and resolve your issue, please fill out the form to the best of your ability.-->
<!--You can feel free to delete the sections that do not apply.-->

### Bug report

**Bug summary**

<!--A short 1-2 sentences that succinctly describes the bug-->

I'm trying to install my DataScience environment under OpenBSD 6.8, pip 21.0.1 and Python 3.6.8.

Installing `matplotlib` (3.3.4) requires building of `freetype` which fails with strang error: `""C compiler [gcc] cannot create executables""`

**Code for reproduction**

`python -m pip install matplotlib`

Error:
```
    cc -pthread -Wno-unused-result -Wsign-compare -Wunreachable-code -DNDEBUG -O2 -pipe -g -fPIC -O2 -pipe -g -O2 -pipe -g -fPIC -I/home/guigui/Python/DataScience/include -I/usr/local/include/python3.8 -c /tmp/tmp0_nawtw8.cpp -o tmp/tmp0_nawtw8.o -flto
    Building freetype in build/freetype-2.6.1
    
    FreeType build system -- automatic system detection
    
    The following settings are used:
    
      platform                    unix
      compiler                    cc
      configuration directory     ./builds/unix
      configuration rules         ./builds/unix/unix.mk
    
    If this does not correspond to your system or settings please remove the file
    `config.mk' from this directory then read the INSTALL file for help.
    
    Otherwise, simply type `gmake' again to build the library,
    or `gmake refdoc' to build the API reference (this needs python >= 2.6).
    
    cd builds/unix; \
            ./configure  '--with-zlib=no' '--with-bzip2=no' '--with-png=no' '--with-harfbuzz=no' '--enable-static' '--disable-shared'
    checking build system type... x86_64-unknown-openbsd6.8
    checking host system type... x86_64-unknown-openbsd6.8
    checking for gcc... gcc
    checking whether the C compiler works... no
    configure: error: in `/tmp/pip-install-p9_5dz9m/matplotlib_f3a86aca886742aea4d84c0455faa00f/build/freetype-2.6.1/builds/unix':
    configure: error: C compiler cannot create executables
    See `config.log' for more details
```

Extract from `config.log`
```
cc1: error: unrecognized command line option ""-flto""
```
 

<!--A minimum code snippet required to reproduce the bug.
Please make sure to minimize the number of dependencies required, and provide
any necessary plotted data.
Avoid using threads, as Matplotlib is (explicitly) not thread-safe.-->

```python
# Paste your code here
#
#
```

**Actual outcome**

<!--The output produced by the above code, which may be a screenshot, console output, etc.-->

```
# If applicable, paste the console output here
#
#
```

**Expected outcome**

<!--A description of the expected outcome from the code snippet-->
<!--If this used to work in an earlier version of Matplotlib, please note the version it used to work on-->

**Matplotlib version**
<!--Please specify your platform and versions of the relevant libraries you are using:-->
  * Operating system: 
  * Matplotlib version (`import matplotlib; print(matplotlib.__version__)`): 
  * Matplotlib backend (`print(matplotlib.get_backend())`): 
  * Python version: 
  * Jupyter version (if applicable): 
  * Other libraries: 

<!--Please tell us how you installed matplotlib and python e.g., from source, pip, conda-->
<!--If you installed from conda, please specify which channel you used if not the default-->

",liar666,open,2021-03-07 21:06:32,,,,2021-03-11 01:14:56,2,status: needs clarification,,
824019615,ENH: add a copy method to colormaps,"## PR Summary

Right now we are deprecating access to the global colormaps, but users can only avoid it by doing `newcmap = copy.copy(cmap)` which is a bit heavy-handed.  Here we provide a simple `copy` method to `Colormap` so we can do `newcmap = cmap.copy()`.  

See discussion in #19609, #16991, #18503


## PR Checklist

<!-- Please mark any checkboxes that do not apply to this PR as [N/A]. -->

- [ ] Has pytest style unit tests (and `pytest` passes).
- [ ] Is [Flake 8](https://flake8.pycqa.org/en/latest/) compliant (run `flake8` on changed files to check).
- [ ] New features are documented, with examples if plot related.
- [ ] Documentation is sphinx and numpydoc compliant (the docs should [build](https://matplotlib.org/devel/documenting_mpl.html#building-the-docs) without error).
- [ ] Conforms to Matplotlib style conventions (install `flake8-docstrings` and run `flake8 --docstring-convention=all`).
- [ ] New features have an entry in `doc/users/next_whats_new/` (follow instructions in README.rst there).
- [ ] API changes documented in `doc/api/next_api_changes/` (follow instructions in README.rst there).

<!--
Thank you so much for your PR!  To help us review your contribution, please
consider the following points:

- A development guide is available at https://matplotlib.org/devdocs/devel/index.html.

- Help with git and github is available at
  https://matplotlib.org/devel/gitwash/development_workflow.html.

- Do not create the PR out of master, but out of a separate branch.

- The PR title should summarize the changes, for example ""Raise ValueError on
  non-numeric input to set_xlim"".  Avoid non-descriptive titles such as
  ""Addresses issue #8576"".

- The summary should provide at least 1-2 sentences describing the pull request
  in detail (Why is this change required?  What problem does it solve?) and
  link to any relevant issues.

- If you are contributing fixes to docstrings, please pay attention to
  http://matplotlib.org/devel/documenting_mpl.html#formatting.  In particular,
  note the difference between using single backquotes, double backquotes, and
  asterisks in the markup.

We understand that PRs can sometimes be overwhelming, especially as the
reviews start coming in.  Please let us know if the reviews are unclear or
the recommended next step seems overly demanding, if you would like help in
addressing a reviewer's comments, or if you have been waiting too long to hear
back on your PR.
-->
",jklymak,closed,2021-03-07 21:04:50,,2021-03-09 01:38:44,QuLogic,2021-03-09 02:15:16,1,topic: color/color & colormaps,v3.4.0,53
823972615,imshow fails to render row with interpolation='none',"Unsure if intentional; also for `'nearest'`. Goal is to display data as-is, with minimal ""imputing"".

```python
import numpy as np
import matplotlib.pyplot as plt

g = np.zeros((392, 240))
g[337, :50] = 1
g[338, 50:200] = 1
g[339, 200:] = 1

plt.imshow(g, interpolation='none', aspect='auto')
plt.show()
```

<img src=""https://user-images.githubusercontent.com/16495490/110248797-4bdf3380-7f8c-11eb-8c91-a9ea1cd9a57e.png"" width=""500"">
",OverLordGoldDragon,closed,2021-03-07 17:32:58,,2021-03-07 17:46:39,jklymak,2021-03-07 17:46:50,1,,,
823970532,Fix CoC link,Fixes https://github.com/matplotlib/matplotlib/issues/19594,dstansby,closed,2021-03-07 17:23:37,,2021-03-08 23:27:17,QuLogic,2021-03-09 01:40:35,1,"Documentation, Release critical",v3.4.0,53
823962361,Allow PolygonSelector points to be removed,"## PR Summary
This allows one to remove individual points of a `PolygonSelector` by right-clicking on them (mouse button 3).

## PR Checklist

<!-- Please mark any checkboxes that do not apply to this PR as [N/A]. -->

- [x] Has pytest style unit tests (and `pytest` passes).
- [x] Is [Flake 8](https://flake8.pycqa.org/en/latest/) compliant (run `flake8` on changed files to check).
- [x] New features are documented, with examples if plot related.
- [x] Documentation is sphinx and numpydoc compliant (the docs should [build](https://matplotlib.org/devel/documenting_mpl.html#building-the-docs) without error).
- [x] Conforms to Matplotlib style conventions (install `flake8-docstrings` and run `flake8 --docstring-convention=all`).
- [x] New features have an entry in `doc/users/next_whats_new/` (follow instructions in README.rst there).
- [x] API changes documented in `doc/api/next_api_changes/` (follow instructions in README.rst there).

<!--
Thank you so much for your PR!  To help us review your contribution, please
consider the following points:

- A development guide is available at https://matplotlib.org/devdocs/devel/index.html.

- Help with git and github is available at
  https://matplotlib.org/devel/gitwash/development_workflow.html.

- Do not create the PR out of master, but out of a separate branch.

- The PR title should summarize the changes, for example ""Raise ValueError on
  non-numeric input to set_xlim"".  Avoid non-descriptive titles such as
  ""Addresses issue #8576"".

- The summary should provide at least 1-2 sentences describing the pull request
  in detail (Why is this change required?  What problem does it solve?) and
  link to any relevant issues.

- If you are contributing fixes to docstrings, please pay attention to
  http://matplotlib.org/devel/documenting_mpl.html#formatting.  In particular,
  note the difference between using single backquotes, double backquotes, and
  asterisks in the markup.

We understand that PRs can sometimes be overwhelming, especially as the
reviews start coming in.  Please let us know if the reviews are unclear or
the recommended next step seems overly demanding, if you would like help in
addressing a reviewer's comments, or if you have been waiting too long to hear
back on your PR.
-->
",dstansby,open,2021-03-07 16:53:20,,,,2021-04-05 09:10:49,0,widgets/UI,,
823777923,Improve docs for rgba conversion,,timhoffm,closed,2021-03-06 23:26:38,,2021-03-07 17:37:58,story645,2021-03-08 21:46:30,0,Documentation,v3.5.0,59
823720644,keypress events cause unavoidable beep sound with wxagg,"<!--To help us understand and resolve your issue, please fill out the form to the best of your ability.-->
<!--You can feel free to delete the sections that do not apply.-->

### Bug report

**Bug summary**

Pressing a key in a MPL plot causes a beep. This is not a serious problem, but is annoying. 

**Code for reproduction**

use the code here https://matplotlib.org/stable/gallery/event_handling/keypress_demo.html, but add 

```python
import matplotlib
matplotlib.use('wxAgg')
```

**Actual outcome**

Every time a key is pressed, I hear a bell sound (a beep). 

**Expected outcome**

I should be able to eliminate this using this in the callback:
```python
def on_press(event):
    event.guiEvent.Skip(False)
    ...
```

The reason for this is in this callback handler in `backend_wx.py`
```python
    def _onKeyDown(self, event):
        """"""Capture key press.""""""
        key = self._get_key(event)
        FigureCanvasBase.key_press_event(self, key, guiEvent=event)
        if self:
            event.Skip()
```
Since the method ends with `event.Skip()` (same as `event.Skip(True)`) the call to `event.guiEvent.Skip(False)` is ignored.
If this is rewritten as:
```python
    def _onKeyDown(self, event):
        """"""Capture key press.""""""
        if self:
            event.Skip()
        key = self._get_key(event)
        FigureCanvasBase.key_press_event(self, key, guiEvent=event)
```
Then existing code will function as before, but there is the option to suppress the beep.  One could argue that `.Skip(False)` should be the default, but that would be a change in how MPL functions. 

<!--A description of the expected outcome from the code snippet-->
<!--If this used to work in an earlier version of Matplotlib, please note the version it used to work on-->

**Matplotlib version**
<!--Please specify your platform and versions of the relevant libraries you are using:-->
  * Operating system: MacOS 10.15.7
  * Matplotlib version: 3.3.2
  * Matplotlib backend: MacOSX
  * Python version: 3.9.1
  * Jupyter version: N/A
  * Other libraries: wxpython 4.1.1

<!--Please tell us how you installed matplotlib and python e.g., from source, pip, conda-->
<!--If you installed from conda, please specify which channel you used if not the default-->
default conda channels except wxpython from pypi.
",briantoby,open,2021-03-06 18:53:24,,,,2021-03-06 19:29:25,0,GUI/wx,,
823694550,Allow Selectors to be dragged from anywhere within their patch,"## PR Summary
As it says in the what's new entry:

The `~matplotlib.widgets.RectangleSelector` and `~matplotlib.widgets.EllipseSelector` have a new keyword argument, ``select_whole_region``, which when set to `True` allows you to click and drag from anywhere inside the selector to move it. Previously it was only possible to move it by either activating the move modifier button, or clicking on the central handle.

Questions:
- Any opinions on turning this on by default?
- Does anyone have any better ideas for the keyword argument name? `select_whole_region` is the best I came up with, but it doesn't feel great.

Here's an example:

https://user-images.githubusercontent.com/6197628/110214508-c892e480-7e9c-11eb-8544-fa0dc196bb12.mov


## PR Checklist

<!-- Please mark any checkboxes that do not apply to this PR as [N/A]. -->

- [x] Has pytest style unit tests (and `pytest` passes).
- [x] Is [Flake 8](https://flake8.pycqa.org/en/latest/) compliant (run `flake8` on changed files to check).
- [x] New features are documented, with examples if plot related.
- [x] Documentation is sphinx and numpydoc compliant (the docs should [build](https://matplotlib.org/devel/documenting_mpl.html#building-the-docs) without error).
- [x] Conforms to Matplotlib style conventions (install `flake8-docstrings` and run `flake8 --docstring-convention=all`).
- [x] New features have an entry in `doc/users/next_whats_new/` (follow instructions in README.rst there).
- [ ] API changes documented in `doc/api/next_api_changes/` (follow instructions in README.rst there).

<!--
Thank you so much for your PR!  To help us review your contribution, please
consider the following points:

- A development guide is available at https://matplotlib.org/devdocs/devel/index.html.

- Help with git and github is available at
  https://matplotlib.org/devel/gitwash/development_workflow.html.

- Do not create the PR out of master, but out of a separate branch.

- The PR title should summarize the changes, for example ""Raise ValueError on
  non-numeric input to set_xlim"".  Avoid non-descriptive titles such as
  ""Addresses issue #8576"".

- The summary should provide at least 1-2 sentences describing the pull request
  in detail (Why is this change required?  What problem does it solve?) and
  link to any relevant issues.

- If you are contributing fixes to docstrings, please pay attention to
  http://matplotlib.org/devel/documenting_mpl.html#formatting.  In particular,
  note the difference between using single backquotes, double backquotes, and
  asterisks in the markup.

We understand that PRs can sometimes be overwhelming, especially as the
reviews start coming in.  Please let us know if the reviews are unclear or
the recommended next step seems overly demanding, if you would like help in
addressing a reviewer's comments, or if you have been waiting too long to hear
back on your PR.
-->
",dstansby,open,2021-03-06 16:56:35,,,,2021-04-04 10:48:05,1,widgets/UI,,
823685928,Invalid pixel ratio update when changing screen resolution,"### Bug report

**Bug summary**

When switching from an external monitor, with a dpi ratio of 1.0, to my MacBook Pro laptop, with a dpi ratio of 2.0, existing PyQt windows containing Matplotlib plots look fine after waking from sleep but switch to a quarter size as soon as I select the window, i.e., the fix in the PR #19123 doesn't seem to work in this scenario.

**Code for reproduction**

I am using the [NeXpy package](https://nexpy.github.io/nexpy/), which embeds Matplotlib canvases in separate PyQt5 windows. Each window is added to a dictionary, called `plotviews`, which is available to an embedded Python shell. If I initially plot on my external monitor, I get the following plot:
![external-monitor](https://user-images.githubusercontent.com/1193959/110212397-c7dc5d00-7e60-11eb-85b0-6f3dae41cd48.png)
In the shell, I see the following ratios.
```
In [1]: for pv in plotviews:
            print(plotviews[pv].canvas._dpi_ratio, plotviews[pv].canvas._dpi_ratio_prev)
1.0 1.0
1.0 1.0
1.0 1.0
```
**Actual outcome**
When I switch to my laptop, the plots look fine initially, but as soon as I select any window, the plot shrinks to quarter size:
<img width=""862"" alt=""laptop-screen"" src=""https://user-images.githubusercontent.com/1193959/110212448-0bcf6200-7e61-11eb-99fc-bbcbf5e3e072.png"">
```
In [2]: for pv in plotviews:
            print(plotviews[pv].canvas._dpi_ratio, plotviews[pv].canvas._dpi_ratio_prev)
2.0 1.0
2.0 1.0
2.0 1.0
```
After the plots have shrunk, the `_dpi_ratio_prev` has still not been updated.
```
In [3]: for pv in plotviews:
            print(plotviews[pv].canvas._dpi_ratio, plotviews[pv].canvas._dpi_ratio_prev)
2.0 1.0
2.0 1.0
2.0 1.0
```
**Expected outcome**
Obviously, the plots should not change size. Selecting the window does not appear to trigger the canvas `showEvent` function. I'm not sure what does. If I force an update, the plot does expand to the correct size. Note that `_dpi_ratio_prev` has been updated after the explicit call to `_update_screen` but only for the third figure. The others are still shrunk.
```
In [4]: screen=plotviews['Figure 3'].canvas.window().windowHandle()
In [5]: plotviews['Figure 3'].canvas._update_screen(screen.screen())
In [6]: for pv in plotviews:
            print(plotviews[pv].canvas._dpi_ratio, plotviews[pv].canvas._dpi_ratio_prev)
2.0 1.0
2.0 1.0
2.0 2.0
```
I wonder if the `screenChanged` signal should be connected to `_update_screen` at an earlier stage in initializing the window without depending on a call to `showEvent`.

**Matplotlib version**
  * Operating system: Mac OS X 10.15.7
  * Matplotlib version: 3.4.0rc1
  * Matplotlib backend: Qt5agg
  * Python version: 3.8.6
  * PyQt5 version: 5.15.2

I used pip to update to the latest release candidate within a conda environment.

Edited to correct reference to the screen.

",rayosborn,open,2021-03-06 16:19:08,,,,2021-03-07 17:20:53,1,OS/Apple,,
823643868,Deprecate Tick.apply_tickdir.,"apply_tickdir doesn't actually update the tick markers on the existing
Line2D objects used to draw the ticks (as can be checked with e.g.
`plt.gca().xaxis.majorTicks[2].apply_tickdir(""inout"")`), so it's really
mostly an internal helper that cannot be meaningfully called from
outside (it needs to cooperate with `_apply_params` to actually work).

## PR Summary

## PR Checklist

<!-- Please mark any checkboxes that do not apply to this PR as [N/A]. -->

- [ ] Has pytest style unit tests (and `pytest` passes).
- [ ] Is [Flake 8](https://flake8.pycqa.org/en/latest/) compliant (run `flake8` on changed files to check).
- [ ] New features are documented, with examples if plot related.
- [ ] Documentation is sphinx and numpydoc compliant (the docs should [build](https://matplotlib.org/devel/documenting_mpl.html#building-the-docs) without error).
- [ ] Conforms to Matplotlib style conventions (install `flake8-docstrings` and run `flake8 --docstring-convention=all`).
- [ ] New features have an entry in `doc/users/next_whats_new/` (follow instructions in README.rst there).
- [ ] API changes documented in `doc/api/next_api_changes/` (follow instructions in README.rst there).

<!--
Thank you so much for your PR!  To help us review your contribution, please
consider the following points:

- A development guide is available at https://matplotlib.org/devdocs/devel/index.html.

- Help with git and github is available at
  https://matplotlib.org/devel/gitwash/development_workflow.html.

- Do not create the PR out of master, but out of a separate branch.

- The PR title should summarize the changes, for example ""Raise ValueError on
  non-numeric input to set_xlim"".  Avoid non-descriptive titles such as
  ""Addresses issue #8576"".

- The summary should provide at least 1-2 sentences describing the pull request
  in detail (Why is this change required?  What problem does it solve?) and
  link to any relevant issues.

- If you are contributing fixes to docstrings, please pay attention to
  http://matplotlib.org/devel/documenting_mpl.html#formatting.  In particular,
  note the difference between using single backquotes, double backquotes, and
  asterisks in the markup.

We understand that PRs can sometimes be overwhelming, especially as the
reviews start coming in.  Please let us know if the reviews are unclear or
the recommended next step seems overly demanding, if you would like help in
addressing a reviewer's comments, or if you have been waiting too long to hear
back on your PR.
-->
",anntzer,closed,2021-03-06 13:06:42,,2021-03-10 00:24:46,timhoffm,2021-03-10 01:01:39,0,topic: ticks axis labels,v3.5.0,59
823639371,Dedupe various method implementations using functools.partialmethod.,"This is shorter and yields better signatures on the resulting methods
(as partialmethod forwards to the signature of the underlying helper).
For example, the signature of FigureCanvasCairo.print_ps is now
`(self, fobj, *, orientation='portrait')` rather than
`(self, fobj, *args, **kwargs)`.

For the cairo/wx print_foos, also note that we can delete the `*args` in
the various print methods with no deprecation as they were not supported
to start with (the underlying call to `_save` and `_print_image` would
have raised if such `*args` were passed in).

## PR Summary

## PR Checklist

<!-- Please mark any checkboxes that do not apply to this PR as [N/A]. -->

- [ ] Has pytest style unit tests (and `pytest` passes).
- [ ] Is [Flake 8](https://flake8.pycqa.org/en/latest/) compliant (run `flake8` on changed files to check).
- [ ] New features are documented, with examples if plot related.
- [ ] Documentation is sphinx and numpydoc compliant (the docs should [build](https://matplotlib.org/devel/documenting_mpl.html#building-the-docs) without error).
- [ ] Conforms to Matplotlib style conventions (install `flake8-docstrings` and run `flake8 --docstring-convention=all`).
- [ ] New features have an entry in `doc/users/next_whats_new/` (follow instructions in README.rst there).
- [ ] API changes documented in `doc/api/next_api_changes/` (follow instructions in README.rst there).

<!--
Thank you so much for your PR!  To help us review your contribution, please
consider the following points:

- A development guide is available at https://matplotlib.org/devdocs/devel/index.html.

- Help with git and github is available at
  https://matplotlib.org/devel/gitwash/development_workflow.html.

- Do not create the PR out of master, but out of a separate branch.

- The PR title should summarize the changes, for example ""Raise ValueError on
  non-numeric input to set_xlim"".  Avoid non-descriptive titles such as
  ""Addresses issue #8576"".

- The summary should provide at least 1-2 sentences describing the pull request
  in detail (Why is this change required?  What problem does it solve?) and
  link to any relevant issues.

- If you are contributing fixes to docstrings, please pay attention to
  http://matplotlib.org/devel/documenting_mpl.html#formatting.  In particular,
  note the difference between using single backquotes, double backquotes, and
  asterisks in the markup.

We understand that PRs can sometimes be overwhelming, especially as the
reviews start coming in.  Please let us know if the reviews are unclear or
the recommended next step seems overly demanding, if you would like help in
addressing a reviewer's comments, or if you have been waiting too long to hear
back on your PR.
-->
",anntzer,closed,2021-03-06 12:42:25,,2021-03-10 05:18:00,QuLogic,2021-03-10 09:12:01,0,Maintenance,v3.5.0,59
823625844,deprecate_privatize_attribute also works for privatizing methods.,"... with no changes (there's now a test for that).

## PR Summary

## PR Checklist

<!-- Please mark any checkboxes that do not apply to this PR as [N/A]. -->

- [ ] Has pytest style unit tests (and `pytest` passes).
- [ ] Is [Flake 8](https://flake8.pycqa.org/en/latest/) compliant (run `flake8` on changed files to check).
- [ ] New features are documented, with examples if plot related.
- [ ] Documentation is sphinx and numpydoc compliant (the docs should [build](https://matplotlib.org/devel/documenting_mpl.html#building-the-docs) without error).
- [ ] Conforms to Matplotlib style conventions (install `flake8-docstrings` and run `flake8 --docstring-convention=all`).
- [ ] New features have an entry in `doc/users/next_whats_new/` (follow instructions in README.rst there).
- [ ] API changes documented in `doc/api/next_api_changes/` (follow instructions in README.rst there).

<!--
Thank you so much for your PR!  To help us review your contribution, please
consider the following points:

- A development guide is available at https://matplotlib.org/devdocs/devel/index.html.

- Help with git and github is available at
  https://matplotlib.org/devel/gitwash/development_workflow.html.

- Do not create the PR out of master, but out of a separate branch.

- The PR title should summarize the changes, for example ""Raise ValueError on
  non-numeric input to set_xlim"".  Avoid non-descriptive titles such as
  ""Addresses issue #8576"".

- The summary should provide at least 1-2 sentences describing the pull request
  in detail (Why is this change required?  What problem does it solve?) and
  link to any relevant issues.

- If you are contributing fixes to docstrings, please pay attention to
  http://matplotlib.org/devel/documenting_mpl.html#formatting.  In particular,
  note the difference between using single backquotes, double backquotes, and
  asterisks in the markup.

We understand that PRs can sometimes be overwhelming, especially as the
reviews start coming in.  Please let us know if the reviews are unclear or
the recommended next step seems overly demanding, if you would like help in
addressing a reviewer's comments, or if you have been waiting too long to hear
back on your PR.
-->
",anntzer,closed,2021-03-06 11:27:09,,2021-03-09 01:12:27,QuLogic,2021-03-16 18:19:41,1,Maintenance,v3.5.0,59
823616868,Backport PR #19649 on branch v3.4.x (Use globals() instead of locals() for adding colormaps as names to cm module),Backport PR #19649: Use globals() instead of locals() for adding colormaps as names to cm module,meeseeksmachine,closed,2021-03-06 10:35:54,,2021-03-06 17:03:09,dstansby,2021-03-10 07:37:36,0,topic: color/color & colormaps,v3.4.0,53
823560543,Backport PR #19618 on branch v3.4.x (FIX: make the cache in font_manager._get_font keyed by thread id),Backport PR #19618: FIX: make the cache in font_manager._get_font keyed by thread id,meeseeksmachine,closed,2021-03-06 04:28:18,,2021-03-06 05:36:05,QuLogic,2021-03-06 05:36:05,0,,v3.4.0,53
823488368,Backport PR #19625 on branch v3.4.x (Restore _AxesStack to track a Figure's Axes order.),Backport PR #19625: Restore _AxesStack to track a Figure's Axes order.,meeseeksmachine,closed,2021-03-05 23:25:24,,2021-03-06 03:03:10,QuLogic,2021-03-06 03:03:10,0,,v3.4.0,53
823485142,Use globals() instead of locals() for adding colormaps as names to cm module,"## PR Summary

While this seems to have been working, manipulating `locals()` is not guaranteed to have any effect.
https://docs.python.org/3/library/functions.html#locals",timhoffm,closed,2021-03-05 23:16:00,,2021-03-06 10:34:32,anntzer,2021-03-06 10:43:51,0,topic: color/color & colormaps,v3.4.0,53
823461525,Backport PR #19643 on branch v3.4.x (Don't turn check_for_pgf into public API.),Backport PR #19643: Don't turn check_for_pgf into public API.,meeseeksmachine,closed,2021-03-05 22:21:41,,2021-03-06 00:57:13,QuLogic,2021-03-06 00:57:14,0,,v3.4.0,53
823461183,Backport PR #19645 on branch v3.4.x (Fix comment in RectangleSelector),Backport PR #19645: Fix comment in RectangleSelector,meeseeksmachine,closed,2021-03-05 22:20:54,,2021-03-06 03:02:53,QuLogic,2021-03-06 03:02:53,0,,v3.4.0,53
823392226,Add angle setter/getter to Rectangle,"This adds an `angle` property, such that the `Rectangle` is labelled stale when it is updated. All the other properties use `set_` and `get_`, but to maintain backwards compatibility I've used a property here since `Rectangle.angle` already existed.",dstansby,closed,2021-03-05 20:31:48,,2021-03-08 15:01:10,jklymak,2021-03-08 21:45:29,4,API: consistency,v3.5.0,59
823360390,Fix comment in RectangleSelector,"I'm doing some widget work, and this comment confused me for a little while. I think the implementation was probably intended to be clockwise, but as currently implemented the edges are actually returned in an anti-clockwise manner.",dstansby,closed,2021-03-05 19:37:34,,2021-03-05 22:20:43,tacaswell,2021-03-06 09:22:08,0,Documentation,v3.4.0,53
822787598,Backport PR #19611 on branch v3.4.x (Fix double picks.),Backport PR #19611: Fix double picks.,meeseeksmachine,closed,2021-03-05 06:23:09,,2021-03-05 07:47:27,QuLogic,2021-03-05 07:47:27,0,,v3.4.0,53
822627787,Don't turn check_for_pgf into public API.,"It was accidentally(?) added to the public API in the yet-to-be-released
1173770.

## PR Summary

## PR Checklist

<!-- Please mark any checkboxes that do not apply to this PR as [N/A]. -->

- [ ] Has pytest style unit tests (and `pytest` passes).
- [ ] Is [Flake 8](https://flake8.pycqa.org/en/latest/) compliant (run `flake8` on changed files to check).
- [ ] New features are documented, with examples if plot related.
- [ ] Documentation is sphinx and numpydoc compliant (the docs should [build](https://matplotlib.org/devel/documenting_mpl.html#building-the-docs) without error).
- [ ] Conforms to Matplotlib style conventions (install `flake8-docstrings` and run `flake8 --docstring-convention=all`).
- [ ] New features have an entry in `doc/users/next_whats_new/` (follow instructions in README.rst there).
- [ ] API changes documented in `doc/api/next_api_changes/` (follow instructions in README.rst there).

<!--
Thank you so much for your PR!  To help us review your contribution, please
consider the following points:

- A development guide is available at https://matplotlib.org/devdocs/devel/index.html.

- Help with git and github is available at
  https://matplotlib.org/devel/gitwash/development_workflow.html.

- Do not create the PR out of master, but out of a separate branch.

- The PR title should summarize the changes, for example ""Raise ValueError on
  non-numeric input to set_xlim"".  Avoid non-descriptive titles such as
  ""Addresses issue #8576"".

- The summary should provide at least 1-2 sentences describing the pull request
  in detail (Why is this change required?  What problem does it solve?) and
  link to any relevant issues.

- If you are contributing fixes to docstrings, please pay attention to
  http://matplotlib.org/devel/documenting_mpl.html#formatting.  In particular,
  note the difference between using single backquotes, double backquotes, and
  asterisks in the markup.

We understand that PRs can sometimes be overwhelming, especially as the
reviews start coming in.  Please let us know if the reviews are unclear or
the recommended next step seems overly demanding, if you would like help in
addressing a reviewer's comments, or if you have been waiting too long to hear
back on your PR.
-->
",anntzer,closed,2021-03-05 00:32:10,,2021-03-05 22:21:31,tacaswell,2021-03-06 09:40:23,0,"Release critical, topic: testing",v3.4.0,53
822627216,Unexpected (and unremovable) tick labels on log scale plots.,"### Bug report

Log scale plots will have sometimes have tick labels that cannot be removed by `plt.*ticks` and `ax.set_*ticklabels`, and are unaffected by `ax.set_*ticks`. These ticks labels only show up on the default axes (left and bottom).

In the examples below, the result is invariant to the positioning of all calls except `ax.set_*scale` (which is the ~expected behavior).

A colab notebook with the code for reproduction can be found [here](https://colab.research.google.com/drive/1Eshdw--Qyz6wnaIFYSpsWK2V-0gwp9rG?usp=sharing).

```python
import matplotlib.pyplot as plt
plt.style.use(""seaborn-whitegrid"")  # Not necessary but makes seeing expected ticks easier.
import numpy as np

# Other values for ymin, ymax, and step also error.
ymin = 220
ymax = 440
step = 1 / 12
ticks = 2 ** np.arange(np.log2(ymin), np.log2(ymax + step), step)
```

```python
# Unaffected by plt.*ticks and ax.set_*ticklabels.
fig, ax = plt.subplots()
ax.scatter([], [])
ax.set_yscale(""log"")
ax.set_ylim(ymin, ymax)
ax.set_yticklabels([])

# Shows expected behavior (not necessary to reproduce bug).
ax.tick_params(labelright=True)
```

![image](https://user-images.githubusercontent.com/40036383/110048565-f1807180-7d04-11eb-9528-c50417098c73.png)


```python
# Unaffected by ax.set_*ticks.
fig, ax = plt.subplots()

# Shows expected behavior (not necessary to reproduce bug).
ax.tick_params(labelright=True)

# Placing this after labelright has the same effect.
ax.scatter([], [])
ax.set_yscale(""log"")
ax.set_ylim(ymin, ymax)
ax.set_yticks(ticks)
```

![image](https://user-images.githubusercontent.com/40036383/110048932-b2065500-7d05-11eb-81f3-ed564cbfc69c.png)

### Environment info

  * Operating systems: Linux, macOS 
  * Matplotlib version: `3.2.2` via `pip`
  * Matplotlib backends: `module://ipykernel.pylab.backend_inline`, `MacOSX`
  * Python versions: `3.6.10`, `3.8.6`

",phoenix-meadowlark,closed,2021-03-05 00:30:50,,2021-03-05 03:14:28,jklymak,2021-03-05 21:50:31,2,Community support,,
821971588,Fix Bbox.frozen() not copying minposx/minposy,"## PR Summary
The problem that this PR resolves is that `Bbox.frozen()` does not copy the minpos values which is a problem when using log scaling. This should resolve #19296.

## PR Checklist

<!-- Please mark any checkboxes that do not apply to this PR as [N/A]. -->

- [x] Has pytest style unit tests (and `pytest` passes).
- [x] Is [Flake 8](https://flake8.pycqa.org/en/latest/) compliant (run `flake8` on changed files to check).
- [N/A] New features are documented, with examples if plot related.
- [N/A] Documentation is sphinx and numpydoc compliant (the docs should [build](https://matplotlib.org/devel/documenting_mpl.html#building-the-docs) without error).
- [N/A] Conforms to Matplotlib style conventions (install `flake8-docstrings` and run `flake8 --docstring-convention=all`).
- [N/A] New features have an entry in `doc/users/next_whats_new/` (follow instructions in README.rst there).
- [N/A] API changes documented in `doc/api/next_api_changes/` (follow instructions in README.rst there).

<!--
Thank you so much for your PR!  To help us review your contribution, please
consider the following points:

- A development guide is available at https://matplotlib.org/devdocs/devel/index.html.

- Help with git and github is available at
  https://matplotlib.org/devel/gitwash/development_workflow.html.

- Do not create the PR out of master, but out of a separate branch.

- The PR title should summarize the changes, for example ""Raise ValueError on
  non-numeric input to set_xlim"".  Avoid non-descriptive titles such as
  ""Addresses issue #8576"".

- The summary should provide at least 1-2 sentences describing the pull request
  in detail (Why is this change required?  What problem does it solve?) and
  link to any relevant issues.

- If you are contributing fixes to docstrings, please pay attention to
  http://matplotlib.org/devel/documenting_mpl.html#formatting.  In particular,
  note the difference between using single backquotes, double backquotes, and
  asterisks in the markup.

We understand that PRs can sometimes be overwhelming, especially as the
reviews start coming in.  Please let us know if the reviews are unclear or
the recommended next step seems overly demanding, if you would like help in
addressing a reviewer's comments, or if you have been waiting too long to hear
back on your PR.
-->
",m4reko,closed,2021-03-04 10:03:39,,2021-03-05 22:36:39,QuLogic,2021-03-05 22:36:52,1,topic: transforms and scales,v3.5.0,59
821843733,Backport PR #19639 on branch v3.4.x (FIX: do not allow single element list of str in subplot_mosaic),Backport PR #19639: FIX: do not allow single element list of str in subplot_mosaic,meeseeksmachine,closed,2021-03-04 07:25:39,,2021-03-04 10:02:47,QuLogic,2021-03-04 10:02:47,0,,v3.4.0,53
821726585,FIX: do not allow single element list of str in subplot_mosaic,"## PR Summary

Also check that the first element of the a list layout is not a string.

closes #19631 

## PR Checklist

<!-- Please mark any checkboxes that do not apply to this PR as [N/A]. -->

- [x] Has pytest style unit tests (and `pytest` passes).
- [x] Is [Flake 8](https://flake8.pycqa.org/en/latest/) compliant (run `flake8` on changed files to check).
",tacaswell,closed,2021-03-04 03:54:29,,2021-03-04 07:24:26,QuLogic,2021-03-04 07:24:26,0,,v3.4.0,53
821665732,Backport PR #19632 on branch v3.4.x (Fix handling of warn keyword in in Figure.show.),Backport PR #19632: Fix handling of warn keyword in in Figure.show.,meeseeksmachine,closed,2021-03-04 01:36:23,,2021-03-04 03:56:19,tacaswell,2021-03-04 03:56:19,0,,v3.4.0,53
821639269,Backport PR #19582 on branch v3.4.x (Add kerning to single-byte strings in PDFs),Backport PR #19582: Add kerning to single-byte strings in PDFs,meeseeksmachine,closed,2021-03-04 00:37:35,,2021-03-04 03:55:10,tacaswell,2021-03-04 03:55:10,0,"backend/pdf, topic: text",v3.4.0,53
821636160,Correctly check inaxes for multicursor,"## PR Summary
multicursor now checks if `event.inaxes` is one of the axes it will draw on.

Fixes: https://github.com/matplotlib/matplotlib/issues/19635

Before
![Peek 2021-03-03 18-59](https://user-images.githubusercontent.com/10111092/109891169-9bed8b80-7c56-11eb-8c42-c1b956162a9c.gif)
After:

![Peek 2021-03-03 19-28](https://user-images.githubusercontent.com/10111092/109891158-985a0480-7c56-11eb-90da-39815afebdbd.gif)


## PR Checklist


There aren't any multicursor tests - does this change need a test?

- [ NA? ] Has pytest style unit tests (and `pytest` passes).
- [x] Is [Flake 8](https://flake8.pycqa.org/en/latest/) compliant (run `flake8` on changed files to check).
- [NA] New features are documented, with examples if plot related.
- [ ] Documentation is sphinx and numpydoc compliant (the docs should [build](https://matplotlib.org/devel/documenting_mpl.html#building-the-docs) without error).
- [x] Conforms to Matplotlib style conventions (install `flake8-docstrings` and run `flake8 --docstring-convention=all`).
- [NA] New features have an entry in `doc/users/next_whats_new/` (follow instructions in README.rst there).
- [NA] API changes documented in `doc/api/next_api_changes/` (follow instructions in README.rst there).

<!--
Thank you so much for your PR!  To help us review your contribution, please
consider the following points:

- A development guide is available at https://matplotlib.org/devdocs/devel/index.html.

- Help with git and github is available at
  https://matplotlib.org/devel/gitwash/development_workflow.html.

- Do not create the PR out of master, but out of a separate branch.

- The PR title should summarize the changes, for example ""Raise ValueError on
  non-numeric input to set_xlim"".  Avoid non-descriptive titles such as
  ""Addresses issue #8576"".

- The summary should provide at least 1-2 sentences describing the pull request
  in detail (Why is this change required?  What problem does it solve?) and
  link to any relevant issues.

- If you are contributing fixes to docstrings, please pay attention to
  http://matplotlib.org/devel/documenting_mpl.html#formatting.  In particular,
  note the difference between using single backquotes, double backquotes, and
  asterisks in the markup.

We understand that PRs can sometimes be overwhelming, especially as the
reviews start coming in.  Please let us know if the reviews are unclear or
the recommended next step seems overly demanding, if you would like help in
addressing a reviewer's comments, or if you have been waiting too long to hear
back on your PR.
-->
",ianhi,closed,2021-03-04 00:31:21,,2021-03-13 23:00:16,timhoffm,2021-03-14 01:28:54,2,widgets/UI,v3.5.0,59
821621225,Multicursor updates to events for any axis,"<!--To help us understand and resolve your issue, please fill out the form to the best of your ability.-->
<!--You can feel free to delete the sections that do not apply.-->

### Bug report

**Bug summary**
The multicursor widget does not check if the events it receives are in the axes it received in `init`. So mouse move events on any axis in the figure will cause the cursor to move.


<!--A short 1-2 sentences that succinctly describes the bug-->

**Code for reproduction**

<!--A minimum code snippet required to reproduce the bug.
Please make sure to minimize the number of dependencies required, and provide
any necessary plotted data.
Avoid using threads, as Matplotlib is (explicitly) not thread-safe.-->

```python
import numpy as np
import matplotlib.pyplot as plt
from matplotlib.widgets import MultiCursor

t = np.arange(0.0, 2.0, 0.01)
s1 = np.sin(2*np.pi*t)
s2 = np.sin(4*np.pi*t)

fig, (ax1, ax2, ax3) = plt.subplots(3, sharex=True)
ax1.plot(t, s1)
ax2.plot(t, s2)

multi = MultiCursor(fig.canvas, (ax1, ax2), color='r', lw=1, useblit=False)
plt.show()
```

**Actual outcome**
![Peek 2021-03-03 18-59](https://user-images.githubusercontent.com/10111092/109889170-dce3a100-7c52-11eb-9951-20eb402e2b24.gif)

**Expected outcome**
Mouse moving in the bottom subplot does not affect the cursor position.


**Matplotlib version**
<!--Please specify your platform and versions of the relevant libraries you are using:-->
  * Operating system: Ubuntu
  * Matplotlib version (`import matplotlib; print(matplotlib.__version__)`): master
  * Matplotlib backend (`print(matplotlib.get_backend())`): any
  * Python version: 3.9.1
",ianhi,closed,2021-03-04 00:02:28,,2021-03-13 23:00:16,timhoffm,2021-03-15 22:24:26,2,widgets/UI,v3.5.0,59
821616158,Multicursor docstring missing a Parameters Section,"<!--To help us understand and resolve your issue, please fill out the form to the best of your ability.-->
<!--You can feel free to delete the sections that do not apply.-->

### Problem
The multicursor `__init__` method doesn't have a docstring, so there is no documentation of it's parameters


https://github.com/matplotlib/matplotlib/blob/bac91f5cb42b0caa89af3839ea70467003d0c806/lib/matplotlib/widgets.py#L1597-L1602


### Suggested Improvement
Add a docstring. In particular it seems that the xlim and ylim of the cursors are set by the last axis in `axes` so that should be explained in the docstring (or perhaps changed).",ianhi,open,2021-03-03 23:56:09,,,,2021-03-03 23:56:48,0,"Documentation, widgets/UI",,
821591059,Multicursor disappears when not moving on nbagg with useblit=False + burns CPU,"<!--To help us understand and resolve your issue, please fill out the form to the best of your ability.-->
<!--You can feel free to delete the sections that do not apply.-->

### Bug report

**Bug summary**
When on the nbagg backend if you stop moving the mouse the multicursor will disappear. The same example works fine on the qt backend.

Additionally I noticed that when I add the multicursor my cpu usage jumps and the kernel busy indicator constantly flashes on and off. 

Showing the plot without the multicursor:
![image](https://user-images.githubusercontent.com/10111092/109886513-28e01700-7c4e-11eb-8aac-d8a18832f787.png)
and with the multicursor (just displaying, not interacting with the plot):

![image](https://user-images.githubusercontent.com/10111092/109886579-490fd600-7c4e-11eb-94d8-ce4d9425559f.png)
That usage is pretty stable and my laptop's fan goes wild.

The issue with the dissappearing was originally noticed by @ipcoder in https://github.com/matplotlib/ipympl/issues/306

**Code for reproduction**

<!--A minimum code snippet required to reproduce the bug.
Please make sure to minimize the number of dependencies required, and provide
any necessary plotted data.
Avoid using threads, as Matplotlib is (explicitly) not thread-safe.-->

```python
%matplotlib nbagg
import numpy as np
import matplotlib.pyplot as plt
from matplotlib.widgets import MultiCursor

t = np.arange(0.0, 2.0, 0.01)
s1 = np.sin(2*np.pi*t)
s2 = np.sin(4*np.pi*t)

fig, (ax1, ax2) = plt.subplots(2, sharex=True)
ax1.plot(t, s1)
ax2.plot(t, s2)

multi = MultiCursor(fig.canvas, (ax1, ax2), color='r', lw=1, useblit=False)
plt.show()
```

**Actual outcome**

![Peek 2021-03-03 18-12](https://user-images.githubusercontent.com/10111092/109885329-54fa9880-7c4c-11eb-9caa-f765dda6f729.gif)

and the high CPU usage


**Expected outcome**
Red line doesn't disappear + my CPU doesn't get crushed.


<!--A description of the expected outcome from the code snippet-->
<!--If this used to work in an earlier version of Matplotlib, please note the version it used to work on-->

**Matplotlib version**
<!--Please specify your platform and versions of the relevant libraries you are using:-->
  * Operating system: Ubuntu
  * Matplotlib version (`import matplotlib; print(matplotlib.__version__)`): '3.3.4.post2456+gfd23bb238'
  * Matplotlib backend (`print(matplotlib.get_backend())`): nbagg
  * Python version: '3.9.1 | packaged by conda-forge | (default, Jan 26 2021, 01:34:10) \n[GCC 9.3.0]'
  * Jupyter version (if applicable): Notebook 6.2.0 - IPython 7.20.0

dev instlal of maptlotlib + conda-forge for the others 
",ianhi,open,2021-03-03 23:33:00,,,,2021-03-30 00:06:56,12,"GUI/nbagg, third-party integration: jupyter, widgets/UI",v3.5.0,59
821582669,Fix handling of warn keyword in in Figure.show.,"It was accidentally ignored since 154a616.

## PR Summary

## PR Checklist

<!-- Please mark any checkboxes that do not apply to this PR as [N/A]. -->

- [ ] Has pytest style unit tests (and `pytest` passes).
- [ ] Is [Flake 8](https://flake8.pycqa.org/en/latest/) compliant (run `flake8` on changed files to check).
- [ ] New features are documented, with examples if plot related.
- [ ] Documentation is sphinx and numpydoc compliant (the docs should [build](https://matplotlib.org/devel/documenting_mpl.html#building-the-docs) without error).
- [ ] Conforms to Matplotlib style conventions (install `flake8-docstrings` and run `flake8 --docstring-convention=all`).
- [ ] New features have an entry in `doc/users/next_whats_new/` (follow instructions in README.rst there).
- [ ] API changes documented in `doc/api/next_api_changes/` (follow instructions in README.rst there).

<!--
Thank you so much for your PR!  To help us review your contribution, please
consider the following points:

- A development guide is available at https://matplotlib.org/devdocs/devel/index.html.

- Help with git and github is available at
  https://matplotlib.org/devel/gitwash/development_workflow.html.

- Do not create the PR out of master, but out of a separate branch.

- The PR title should summarize the changes, for example ""Raise ValueError on
  non-numeric input to set_xlim"".  Avoid non-descriptive titles such as
  ""Addresses issue #8576"".

- The summary should provide at least 1-2 sentences describing the pull request
  in detail (Why is this change required?  What problem does it solve?) and
  link to any relevant issues.

- If you are contributing fixes to docstrings, please pay attention to
  http://matplotlib.org/devel/documenting_mpl.html#formatting.  In particular,
  note the difference between using single backquotes, double backquotes, and
  asterisks in the markup.

We understand that PRs can sometimes be overwhelming, especially as the
reviews start coming in.  Please let us know if the reviews are unclear or
the recommended next step seems overly demanding, if you would like help in
addressing a reviewer's comments, or if you have been waiting too long to hear
back on your PR.
-->
",anntzer,closed,2021-03-03 23:25:26,,2021-03-04 01:36:12,QuLogic,2021-03-04 08:45:24,0,,v3.4.0,53
821462701,subplot mosaic 1 element list,"**Bug summary**
Passing in a one element list splits it up as if it was string input, when it should treat it as 1 axes. 

**Code for reproduction**
```python
fig, axd = plt.subplot_mosaic(['triangle'])
```
**Actual outcome**
![image](https://user-images.githubusercontent.com/1300499/109868401-8f0c7000-7c35-11eb-82ab-eed516cd47f3.png)

<!--The output produced by the above code, which may be a screenshot, console output, etc.-->

**Expected outcome**
![image](https://user-images.githubusercontent.com/1300499/109868504-b2cfb600-7c35-11eb-9aad-926dbf6c9190.png)

<!--A description of the expected outcome from the code snippet-->
<!--If this used to work in an earlier version of Matplotlib, please note the version it used to work on-->

**Matplotlib version**
<!--Please specify your platform and versions of the relevant libraries you are using:-->
  * Operating system: 
  * Matplotlib version (`import matplotlib; print(matplotlib.__version__)`): 
  * Matplotlib backend (`print(matplotlib.get_backend())`): 
  * Python version: 
  * Jupyter version (if applicable): 
  * Other libraries: 

<!--Please tell us how you installed matplotlib and python e.g., from source, pip, conda-->
<!--If you installed from conda, please specify which channel you used if not the default-->

",story645,closed,2021-03-03 20:37:11,,2021-03-04 07:24:26,QuLogic,2021-03-04 07:24:40,5,,v3.4.0,53
821439041,Backport PR #19596 on branch v3.4.x (Fix for issue 17769: wx interactive figure close cause crash),Backport PR #19596: Fix for issue 17769: wx interactive figure close cause crash,meeseeksmachine,closed,2021-03-03 20:02:07,,2021-03-03 22:23:33,QuLogic,2021-03-03 22:23:33,0,GUI/wx,v3.4.0,53
821436015,Backport PR #19548 on branch v3.4.x (Increase tolerances for other arches.),Backport PR #19548: Increase tolerances for other arches.,meeseeksmachine,closed,2021-03-03 19:57:36,,2021-03-03 22:23:50,QuLogic,2021-03-03 22:23:51,0,topic: testing,v3.4.0,53
821173599,plt.figure() breaks std::stof,"### Bug report

I am using matplotlib in python code that also calls a python module written in cpp. I now noticed that `plt.figure()` breaks `std::stof` in the cpp extension.

**Code for reproduction**

Put this in `example.cpp`:
```cpp
#include <boost/python.hpp>
#include <string>

float start() {
  std::string str(""0.1"");
  return std::stof(str);
}

BOOST_PYTHON_MODULE (example) {
  boost::python::def(""start"", &start);
}
```
Then, compile it to `example.so` (I used `g++ example.cpp -fPIC -shared -I/usr/include/python3.9 -lboost_python39 -lpython3.9 -o example.so`).

In a python script in the same folder, execute
```python
import example
import matplotlib.pyplot as plt
print(example.start())
plt.figure()
print(example.start())
```

**Actual outcome**

```
0.10000000149011612
0.0
```

**Expected outcome**

Both times, the same result should be returned.

**Matplotlib version**
  * Operating system: Debian Testing
  * Matplotlib version (`import matplotlib; print(matplotlib.__version__)`): 3.3.4 (installed via pip)
  * Matplotlib backend (`print(matplotlib.get_backend())`): Qt5Agg
  * Python version: 3.9.1 (installed as system package)
  * Other libraries: Boost Python 1.74.0

I could not reproduce the issue on Ubuntu 18.04 (Python 3.6, Matplotlib 3.2.1 / agg), so it might be a problem with my setup.",timonegk,closed,2021-03-03 14:42:35,,2021-03-09 10:32:38,anntzer,2021-03-09 10:32:44,4,status: upstream fix required,,
821108857,Replace use of Python/C API with numpy::array_view in _tri.cpp and qhull_wrap.c,"`_tri.cpp` and `qhull_wrap.c` use the Python/C API to create numpy arrays, e.g.:

https://github.com/matplotlib/matplotlib/blob/bc972942bd41a32c7cd693a3f29a29442d2d6e3f/src/tri/_tri.cpp#L638-L639

It would be better to use our `numpy::array_view` wrappers instead, e.g.

https://github.com/matplotlib/matplotlib/blob/bc972942bd41a32c7cd693a3f29a29442d2d6e3f/src/_contour.cpp#L440

as it is simpler and deals with reference counting and raising exceptions for us.

Self-assigning.",ianthomas23,open,2021-03-03 13:27:00,,,,2021-03-15 13:30:27,4,Maintenance,,
820779451,Clean up E265 in examples.,"## PR Summary

For some reason we ignore E265 (block comment must start with `# `), but not E264 (inline comment must start with `# `). This is the first step in rectifying that discrepancy.

## PR Checklist

- [x] Has pytest style unit tests (and `pytest` passes).
- [x] Is [Flake 8](https://flake8.pycqa.org/en/latest/) compliant (run `flake8` on changed files to check).
- [n/a] New features are documented, with examples if plot related.
- [x] Documentation is sphinx and numpydoc compliant (the docs should [build](https://matplotlib.org/devel/documenting_mpl.html#building-the-docs) without error).
- [x] Conforms to Matplotlib style conventions (install `flake8-docstrings` and run `flake8 --docstring-convention=all`).
- [n/a] New features have an entry in `doc/users/next_whats_new/` (follow instructions in README.rst there).
- [n/a] API changes documented in `doc/api/next_api_changes/` (follow instructions in README.rst there).",QuLogic,closed,2021-03-03 06:02:02,,2021-03-04 01:25:17,QuLogic,2021-03-13 01:19:04,0,Documentation,v3.5.0,59
820506590,Restore _AxesStack to track a Figure's Axes order.,"## PR Summary

This is a simplified version of the `AxesStack` removed in #19153, but removing the key entry, and just tracking the index with the `Axes`. We no longer need to track keys.

Fixes #19598.

## PR Checklist

- [x] Has pytest style unit tests (and `pytest` passes).
- [x] Is [Flake 8](https://flake8.pycqa.org/en/latest/) compliant (run `flake8` on changed files to check).
- [n/a] New features are documented, with examples if plot related.
- [n/a] Documentation is sphinx and numpydoc compliant (the docs should [build](https://matplotlib.org/devel/documenting_mpl.html#building-the-docs) without error).
- [x] Conforms to Matplotlib style conventions (install `flake8-docstrings` and run `flake8 --docstring-convention=all`).
- [n/a] New features have an entry in `doc/users/next_whats_new/` (follow instructions in README.rst there).
- [n/a] API changes documented in `doc/api/next_api_changes/` (follow instructions in README.rst there).",QuLogic,closed,2021-03-03 00:32:54,,2021-03-05 22:45:05,jklymak,2021-03-05 23:25:14,5,Release critical,v3.4.0,53
820499821,Cannot add colorbar to figure after pickle,"### Bug report

**Bug summary**

After a figure has been pickled, a colorbar cannot be added to the figure and an exception is raised. I am sure there are other issues that more broadly cover this issue, but I am not sure of the extent of the problem(s).

**Code for reproduction**

```python
import pickle
import matplotlib.pyplot as plt

fig, ax = plt.subplots()
pc = ax.scatter([1, 2, 3, 4, 5], [6, 7, 8, 9, 10], c=[0, 1, 2, 3, 4])

pickle.dump(fig, open('test.pkl', 'wb'))
fig.colorbar(pc, ax=ax)

plt.show()

```

**Actual outcome**

```
Traceback (most recent call last):
  File "".\pypresn\pypresn\test2.py"", line 8, in <module>
    fig.colorbar(pc, ax=ax)
  File ""C:\Users\Lnk2pas\AppData\Local\Continuum\anaconda3\lib\site-packages\matplotlib\figure.py"", line 2207, in colorbar
    cax, kw = cbar.make_axes_gridspec(ax, **kw)
  File ""C:\Users\Lnk2pas\AppData\Local\Continuum\anaconda3\lib\site-packages\matplotlib\colorbar.py"", line 1519, in make_axes_gridspec
    layoutbox.nonetree(gs._layoutbox)
AttributeError: 'GridSpec' object has no attribute '_layoutbox'
```

**Expected outcome**

The figure should remain usable after being pickled and a colorbar can be added.

**Matplotlib version**

Tested on two systems:

```
Python 3.7.3 (default, Apr 24 2019, 15:29:51) [MSC v.1915 64 bit (AMD64)] :: Anaconda, Inc. on win32
Type ""help"", ""copyright"", ""credits"" or ""license"" for more information.
>>> import matplotlib; print(matplotlib.__version__)
3.1.0
>>> print(matplotlib.get_backend())
Qt5Agg
>>>
```

```
Python 3.7.1 (default, Dec 14 2018, 19:28:38)
[GCC 7.3.0] :: Anaconda Inc. on linux
Type ""help"", ""copyright"", ""credits"" or ""license"" for more information.
>>> import matplotlib; print(matplotlib.__version__)
3.0.2
>>> print(matplotlib.get_backend())
Qt5Agg
>>>
```

I know that not everything inside of a figure can be pickled and so some things are discarded, but this renders the figure unusable in some ways (I am not familiar enough to know the extent of this). In the versions of MPL  am using, the issue seems to come from these lines:

https://github.com/matplotlib/matplotlib/blob/v3.3.1/lib/matplotlib/figure.py#L2129
https://github.com/matplotlib/matplotlib/blob/v3.0.2/lib/matplotlib/figure.py#L1915

I have not had a chance to try this on master to see how it changes, since it looks like the `__getstate__` method is a little different now.
",Lnk2past,closed,2021-03-03 00:18:41,,2021-03-03 00:47:53,QuLogic,2021-03-03 03:48:42,2,,v3.4.0,53
820408920,FIX: Contour lines rendered incorrectly when closed loops,"## PR Summary

Fixes issue #19568 so that closed contour line loops are rendered correctly.

Solution is to use `PathCollection`s rather than `LineCollection`s, the same as for filled contours.  Added a specific test for this, and updated the 11 test images affected by the change.

To test the performance impact I've used the following code:
```python
import matplotlib
matplotlib.use('Agg')
import matplotlib.pyplot as plt
import numpy as np

shape = (500, 1000)
x, y = np.meshgrid(np.linspace(0.0, 1.0, shape[1]), np.linspace(0.0, 1.0, shape[0]))

np.random.seed(9876)
z = np.random.uniform(size=shape)
z = np.ma.array(z, mask=np.random.uniform(size=shape) < 0.1)

fig = plt.figure(figsize=(80, 40))
ax = fig.add_axes([0.0, 0.0, 1.0, 1.0])
ax.contour(x, y, z)
fig.savefig('contour_lines.png')
```
which creates an 8000x4000 PNG with 117,000 line loops and 201,000 line strips.  I timed it before and after this PR, 10 times each (yes I should have used `timeit` but I didn't) and the walltimes are:

- Before PR: minimum = 11.994 s, mean = 12.081 s, stddev = 0.046 s
- After PR: minimum = 12.273 s, mean = 12.301 s, stddev = 0.041 s

So minimum run time is 2.3% slower, mean run time is 1.8% slower.  Let's call it 2% slower (on my new but cheap laptop).  It is slower for 2 reasons:
1.  It is rendering more pixels.
2. Time taken to determine if a line segment is closed or not, which here is performed ~318k times.

Item 2 could be made faster by moving the calculations from Python to C++.  I would prefer to not to that now and instead consider it as part of a larger study into improving contouring performance.

## PR Checklist

- [x] Has pytest style unit tests (and `pytest` passes).
- [x] Is [Flake 8](https://flake8.pycqa.org/en/latest/) compliant (run `flake8` on changed files to check).
- [ ] New features are documented, with examples if plot related.
- [ ] Documentation is sphinx and numpydoc compliant (the docs should [build](https://matplotlib.org/devel/documenting_mpl.html#building-the-docs) without error).
- [ ] Conforms to Matplotlib style conventions (install `flake8-docstrings` and run `flake8 --docstring-convention=all`).
- [ ] New features have an entry in `doc/users/next_whats_new/` (follow instructions in README.rst there).
- [ ] API changes documented in `doc/api/next_api_changes/` (follow instructions in README.rst there).",ianthomas23,open,2021-03-02 21:33:20,,,,2021-03-29 15:47:07,7,topic: contour,v3.5.0,59
820328311,Prefer Axes.remove() over Figure.delaxes() in docs.,"remove() works for all artists, and is thus more useful to know than
delaxes() (which is does exactly the same, but only for axes).

See also https://github.com/matplotlib/matplotlib/pull/15290.

## PR Summary

## PR Checklist

<!-- Please mark any checkboxes that do not apply to this PR as [N/A]. -->

- [ ] Has pytest style unit tests (and `pytest` passes).
- [ ] Is [Flake 8](https://flake8.pycqa.org/en/latest/) compliant (run `flake8` on changed files to check).
- [ ] New features are documented, with examples if plot related.
- [ ] Documentation is sphinx and numpydoc compliant (the docs should [build](https://matplotlib.org/devel/documenting_mpl.html#building-the-docs) without error).
- [ ] Conforms to Matplotlib style conventions (install `flake8-docstrings` and run `flake8 --docstring-convention=all`).
- [ ] New features have an entry in `doc/users/next_whats_new/` (follow instructions in README.rst there).
- [ ] API changes documented in `doc/api/next_api_changes/` (follow instructions in README.rst there).

<!--
Thank you so much for your PR!  To help us review your contribution, please
consider the following points:

- A development guide is available at https://matplotlib.org/devdocs/devel/index.html.

- Help with git and github is available at
  https://matplotlib.org/devel/gitwash/development_workflow.html.

- Do not create the PR out of master, but out of a separate branch.

- The PR title should summarize the changes, for example ""Raise ValueError on
  non-numeric input to set_xlim"".  Avoid non-descriptive titles such as
  ""Addresses issue #8576"".

- The summary should provide at least 1-2 sentences describing the pull request
  in detail (Why is this change required?  What problem does it solve?) and
  link to any relevant issues.

- If you are contributing fixes to docstrings, please pay attention to
  http://matplotlib.org/devel/documenting_mpl.html#formatting.  In particular,
  note the difference between using single backquotes, double backquotes, and
  asterisks in the markup.

We understand that PRs can sometimes be overwhelming, especially as the
reviews start coming in.  Please let us know if the reviews are unclear or
the recommended next step seems overly demanding, if you would like help in
addressing a reviewer's comments, or if you have been waiting too long to hear
back on your PR.
-->
",anntzer,closed,2021-03-02 19:43:27,,2021-03-04 00:32:58,QuLogic,2021-03-04 00:34:29,6,Documentation,v3.5.0,59
820248900,"Dedupe docstrings of Figure.{get_axes,axes}.","I'd guess more people directly use the `.axes` property, so make that
handle the docstring as well, and just copy it for `get_axes`.  (Also, I
think reusing the property's docstring in the method reads better than
the other way round.)

## PR Summary

## PR Checklist

<!-- Please mark any checkboxes that do not apply to this PR as [N/A]. -->

- [ ] Has pytest style unit tests (and `pytest` passes).
- [ ] Is [Flake 8](https://flake8.pycqa.org/en/latest/) compliant (run `flake8` on changed files to check).
- [ ] New features are documented, with examples if plot related.
- [ ] Documentation is sphinx and numpydoc compliant (the docs should [build](https://matplotlib.org/devel/documenting_mpl.html#building-the-docs) without error).
- [ ] Conforms to Matplotlib style conventions (install `flake8-docstrings` and run `flake8 --docstring-convention=all`).
- [ ] New features have an entry in `doc/users/next_whats_new/` (follow instructions in README.rst there).
- [ ] API changes documented in `doc/api/next_api_changes/` (follow instructions in README.rst there).

<!--
Thank you so much for your PR!  To help us review your contribution, please
consider the following points:

- A development guide is available at https://matplotlib.org/devdocs/devel/index.html.

- Help with git and github is available at
  https://matplotlib.org/devel/gitwash/development_workflow.html.

- Do not create the PR out of master, but out of a separate branch.

- The PR title should summarize the changes, for example ""Raise ValueError on
  non-numeric input to set_xlim"".  Avoid non-descriptive titles such as
  ""Addresses issue #8576"".

- The summary should provide at least 1-2 sentences describing the pull request
  in detail (Why is this change required?  What problem does it solve?) and
  link to any relevant issues.

- If you are contributing fixes to docstrings, please pay attention to
  http://matplotlib.org/devel/documenting_mpl.html#formatting.  In particular,
  note the difference between using single backquotes, double backquotes, and
  asterisks in the markup.

We understand that PRs can sometimes be overwhelming, especially as the
reviews start coming in.  Please let us know if the reviews are unclear or
the recommended next step seems overly demanding, if you would like help in
addressing a reviewer's comments, or if you have been waiting too long to hear
back on your PR.
-->
",anntzer,closed,2021-03-02 17:53:54,,2021-03-03 23:56:53,timhoffm,2021-03-04 00:22:49,0,Maintenance,v3.5.0,59
820000946,Remove suggestion to remove rk4/rk45 integrators from streamplot.,"They have already been removed in d60c9fc.

## PR Summary

## PR Checklist

<!-- Please mark any checkboxes that do not apply to this PR as [N/A]. -->

- [ ] Has pytest style unit tests (and `pytest` passes).
- [ ] Is [Flake 8](https://flake8.pycqa.org/en/latest/) compliant (run `flake8` on changed files to check).
- [ ] New features are documented, with examples if plot related.
- [ ] Documentation is sphinx and numpydoc compliant (the docs should [build](https://matplotlib.org/devel/documenting_mpl.html#building-the-docs) without error).
- [ ] Conforms to Matplotlib style conventions (install `flake8-docstrings` and run `flake8 --docstring-convention=all`).
- [ ] New features have an entry in `doc/users/next_whats_new/` (follow instructions in README.rst there).
- [ ] API changes documented in `doc/api/next_api_changes/` (follow instructions in README.rst there).

<!--
Thank you so much for your PR!  To help us review your contribution, please
consider the following points:

- A development guide is available at https://matplotlib.org/devdocs/devel/index.html.

- Help with git and github is available at
  https://matplotlib.org/devel/gitwash/development_workflow.html.

- Do not create the PR out of master, but out of a separate branch.

- The PR title should summarize the changes, for example ""Raise ValueError on
  non-numeric input to set_xlim"".  Avoid non-descriptive titles such as
  ""Addresses issue #8576"".

- The summary should provide at least 1-2 sentences describing the pull request
  in detail (Why is this change required?  What problem does it solve?) and
  link to any relevant issues.

- If you are contributing fixes to docstrings, please pay attention to
  http://matplotlib.org/devel/documenting_mpl.html#formatting.  In particular,
  note the difference between using single backquotes, double backquotes, and
  asterisks in the markup.

We understand that PRs can sometimes be overwhelming, especially as the
reviews start coming in.  Please let us know if the reviews are unclear or
the recommended next step seems overly demanding, if you would like help in
addressing a reviewer's comments, or if you have been waiting too long to hear
back on your PR.
-->
",anntzer,closed,2021-03-02 13:06:15,,2021-03-02 23:22:21,QuLogic,2021-03-03 01:09:35,0,"Documentation, Maintenance",v3.5.0,59
819860619,Fix bug in shape assignment,"## PR Summary
`shape` returns first the y dimension, then the x dimension. The code had the order inverted

## PR Checklist

<!-- Please mark any checkboxes that do not apply to this PR as [N/A]. -->

- [ ] Has pytest style unit tests (and `pytest` passes).
- [ ] Is [Flake 8](https://flake8.pycqa.org/en/latest/) compliant (run `flake8` on changed files to check).
- [ ] New features are documented, with examples if plot related.
- [ ] Documentation is sphinx and numpydoc compliant (the docs should [build](https://matplotlib.org/devel/documenting_mpl.html#building-the-docs) without error).
- [ ] Conforms to Matplotlib style conventions (install `flake8-docstrings` and run `flake8 --docstring-convention=all`).
- [ ] New features have an entry in `doc/users/next_whats_new/` (follow instructions in README.rst there).
- [ ] API changes documented in `doc/api/next_api_changes/` (follow instructions in README.rst there).

<!--
Thank you so much for your PR!  To help us review your contribution, please
consider the following points:

- A development guide is available at https://matplotlib.org/devdocs/devel/index.html.

- Help with git and github is available at
  https://matplotlib.org/devel/gitwash/development_workflow.html.

- Do not create the PR out of master, but out of a separate branch.

- The PR title should summarize the changes, for example ""Raise ValueError on
  non-numeric input to set_xlim"".  Avoid non-descriptive titles such as
  ""Addresses issue #8576"".

- The summary should provide at least 1-2 sentences describing the pull request
  in detail (Why is this change required?  What problem does it solve?) and
  link to any relevant issues.

- If you are contributing fixes to docstrings, please pay attention to
  http://matplotlib.org/devel/documenting_mpl.html#formatting.  In particular,
  note the difference between using single backquotes, double backquotes, and
  asterisks in the markup.

We understand that PRs can sometimes be overwhelming, especially as the
reviews start coming in.  Please let us know if the reviews are unclear or
the recommended next step seems overly demanding, if you would like help in
addressing a reviewer's comments, or if you have been waiting too long to hear
back on your PR.
-->
",r03ert0,open,2021-03-02 10:08:16,,,,2021-04-02 16:04:49,5,status: needs tests,v3.4.2,63
819655806,FIX: make the cache in font_manager._get_font keyed by thread id,"

## PR Summary

This prevents segfaults when multiple threads try to manipulate the
FT2Font object simultaneously.

closes #19560

Co-authored-by: Antony Lee <anntzer.lee@gmail.com>

## PR Checklist

<!-- Please mark any checkboxes that do not apply to this PR as [N/A]. -->

- [x] Has pytest style unit tests (and `pytest` passes).
- [x] Is [Flake 8](https://flake8.pycqa.org/en/latest/) compliant (run `flake8` on changed files to check).
- [x] Conforms to Matplotlib style conventions (install `flake8-docstrings` and run `flake8 --docstring-convention=all`).

<!--
Thank you so much for your PR!  To help us review your contribution, please
consider the following points:

- A development guide is available at https://matplotlib.org/devdocs/devel/index.html.

- Help with git and github is available at
  https://matplotlib.org/devel/gitwash/development_workflow.html.

- Do not create the PR out of master, but out of a separate branch.

- The PR title should summarize the changes, for example ""Raise ValueError on
  non-numeric input to set_xlim"".  Avoid non-descriptive titles such as
  ""Addresses issue #8576"".

- The summary should provide at least 1-2 sentences describing the pull request
  in detail (Why is this change required?  What problem does it solve?) and
  link to any relevant issues.

- If you are contributing fixes to docstrings, please pay attention to
  http://matplotlib.org/devel/documenting_mpl.html#formatting.  In particular,
  note the difference between using single backquotes, double backquotes, and
  asterisks in the markup.

We understand that PRs can sometimes be overwhelming, especially as the
reviews start coming in.  Please let us know if the reviews are unclear or
the recommended next step seems overly demanding, if you would like help in
addressing a reviewer's comments, or if you have been waiting too long to hear
back on your PR.
-->
",tacaswell,closed,2021-03-02 05:47:44,,2021-03-06 03:01:54,QuLogic,2021-03-06 04:27:21,2,Release critical,v3.4.0,53
819418174,Backport PR #19571 on branch v3.4.x (Fail early when setting Text color to a non-colorlike.),Backport PR #19571: Fail early when setting Text color to a non-colorlike.,meeseeksmachine,closed,2021-03-01 23:48:48,,2021-03-02 05:48:45,tacaswell,2021-03-02 05:48:45,0,"API: argument checking, topic: text",v3.4.0,53
819417431,"Backport PR #19577 on branch v3.4.x (Fix ""return""->""enter"" mapping in key names.)","Backport PR #19577: Fix ""return""->""enter"" mapping in key names.",meeseeksmachine,closed,2021-03-01 23:47:09,,2021-03-02 05:48:56,QuLogic,2021-03-02 05:48:56,0,"GUI/gtk, GUI/tk, Release critical",v3.4.0,53
819405007,Backport PR #19583 on branch v3.4.x (FIX: check for a set during color conversion),Backport PR #19583: FIX: check for a set during color conversion,meeseeksmachine,closed,2021-03-01 23:29:43,,2021-03-02 05:48:25,QuLogic,2021-03-02 05:48:26,0,"Release critical, topic: color/color & colormaps",v3.4.0,53
819398495,Backport PR #19597 on branch v3.4.x (Fix IPython import issue),Backport PR #19597: Fix IPython import issue,meeseeksmachine,closed,2021-03-01 23:21:42,,2021-03-02 04:30:57,QuLogic,2021-03-02 04:30:58,0,,v3.4.0,53
819372229,Backport PR #19546 on branch v3.4.x (Move unrendered README.wx to thirdpartypackages/index.rst.),Backport PR #19546: Move unrendered README.wx to thirdpartypackages/index.rst.,meeseeksmachine,closed,2021-03-01 22:44:23,,2021-03-01 23:45:14,QuLogic,2021-03-01 23:45:14,0,"Documentation, GUI/wx",v3.4.0,53
819366364,installing matplotlib changes behavior of importlib,"### Bug report

After installing matplotlib, `import importlib` causes `importlib.machinery` to be available.

Before installing matplotlib (or after uninstalling it), `import importlib.machinery` is necessary to access the `machinery` module.

This may seem benign (after all, I'm not saying matplotlib *breaks* importlib) but I lost a chunk of time tracing down the source of the inconsistency.  I can't see any reason why this package should change importlib's behavior.

**Code for reproduction**

**Expected behavior**

```bash
$ python -c 'import importlib; print(importlib.machinery)'
Traceback (most recent call last):
  File ""<string>"", line 1, in <module>
AttributeError: module 'importlib' has no attribute 'machinery'
```

**Actual behavior**

```
$ pip install matplotlib
Looking in indexes: https://pypi.org/simple
Collecting matplotlib
  Using cached matplotlib-3.3.4-cp38-cp38-manylinux1_x86_64.whl (11.6 MB)
...
Successfully installed matplotlib-3.3.4

$ python -c 'import importlib; print(importlib.machinery)'
<module 'importlib.machinery' from '/opt/python/Python-3.8.1/Lib/importlib/machinery.py'>
```

**Matplotlib version**
  * Operating system: confirmed on linux (ubuntu 14.04, 18.04) and macos 10.15
  * Matplotlib version: 3.3.4
  * Python version: 3.8.6

",odoublewen,closed,2021-03-01 22:38:56,,2021-03-02 04:53:18,QuLogic,2021-03-02 04:53:18,1,,,
819178192,Fix double picks.,"pick_events were previously incorrectly emitted twice due to the
combination of two recent(ish) chnages: Figures now always start with a
FigureCanvasBase attached -- eventually switching to a concrete subclass
of FigureCanvasBase for display or saving --, and callbacks are now
actually stored at the Figure level rather than the Canvas level.
Hence, the button_pick_id callback (in charge of emitting picks) would
previously be both registered both through the FigureCanvasBase and the
concrete subclass.  The fix is to also move that callback to the Figure
level, so that each Figure only has one such callback.

## PR Summary

## PR Checklist

<!-- Please mark any checkboxes that do not apply to this PR as [N/A]. -->

- [ ] Has pytest style unit tests (and `pytest` passes).
- [ ] Is [Flake 8](https://flake8.pycqa.org/en/latest/) compliant (run `flake8` on changed files to check).
- [ ] New features are documented, with examples if plot related.
- [ ] Documentation is sphinx and numpydoc compliant (the docs should [build](https://matplotlib.org/devel/documenting_mpl.html#building-the-docs) without error).
- [ ] Conforms to Matplotlib style conventions (install `flake8-docstrings` and run `flake8 --docstring-convention=all`).
- [ ] New features have an entry in `doc/users/next_whats_new/` (follow instructions in README.rst there).
- [ ] API changes documented in `doc/api/next_api_changes/` (follow instructions in README.rst there).

<!--
Thank you so much for your PR!  To help us review your contribution, please
consider the following points:

- A development guide is available at https://matplotlib.org/devdocs/devel/index.html.

- Help with git and github is available at
  https://matplotlib.org/devel/gitwash/development_workflow.html.

- Do not create the PR out of master, but out of a separate branch.

- The PR title should summarize the changes, for example ""Raise ValueError on
  non-numeric input to set_xlim"".  Avoid non-descriptive titles such as
  ""Addresses issue #8576"".

- The summary should provide at least 1-2 sentences describing the pull request
  in detail (Why is this change required?  What problem does it solve?) and
  link to any relevant issues.

- If you are contributing fixes to docstrings, please pay attention to
  http://matplotlib.org/devel/documenting_mpl.html#formatting.  In particular,
  note the difference between using single backquotes, double backquotes, and
  asterisks in the markup.

We understand that PRs can sometimes be overwhelming, especially as the
reviews start coming in.  Please let us know if the reviews are unclear or
the recommended next step seems overly demanding, if you would like help in
addressing a reviewer's comments, or if you have been waiting too long to hear
back on your PR.
-->
",anntzer,closed,2021-03-01 19:27:45,,2021-03-05 04:46:51,QuLogic,2021-03-05 07:17:13,4,Release critical,v3.4.0,53
819073629,BUG: #16220 doubled pick events for subclassed figure with a button,"<!--To help us understand and resolve your issue, please fill out the form to the best of your ability.-->
<!--You can feel free to delete the sections that do not apply.-->

### Bug report

Pick events are fired twice instead of once following #16220. This example is a bit wacky, but it's the minimal version of a [much more complete GUI](https://mne.tools/dev/auto_tutorials/raw/plot_30_annotate_raw.html#operations-on-annotations-objects):

<details>

```python
# -*- coding: utf-8 -*-

import numpy as np
from matplotlib.figure import Figure
from matplotlib.text import Text
import matplotlib  # noqa
from matplotlib.pyplot import figure
from matplotlib.widgets import Button
from mpl_toolkits.axes_grid1.axes_size import Fixed
from mpl_toolkits.axes_grid1.axes_divider import make_axes_locatable
# matplotlib.use('Agg', force=True)


class Figure1(Figure):
    """"""Interactive figure with scrollbars, for data browsing.""""""

    def __init__(self, yticks, **kwargs):
        super().__init__(figsize=(6, 6))
        ax_main = self.add_subplot(1, 1, 1, position=[0.1, 0.1, 0.9, 0.9])
        div = make_axes_locatable(ax_main)
        ax_button = div.append_axes(position='bottom', size=Fixed(0.5), pad=0)
        self._button = Button(ax_button, 'Help')

        # main plot
        offsets = np.arange(len(yticks))
        ax_main.set(xlim=[0, 1], yticks=offsets)
        ax_main.set_yticklabels(yticks, picker=True)
        ax_main.plot([0, 1], [offsets, offsets])


picked = list()


def on_pick(event):
    """"""Handle matplotlib pick events.""""""
    if isinstance(event.artist, Text):
        ch_name = event.artist.get_text()
        print(f'pick {ch_name}')
        picked.append(ch_name)


yticks = list(x * 5 for x in 'ABCD')
fig = figure(FigureClass=Figure1, yticks=yticks)
fig.canvas.mpl_connect('pick_event', on_pick)
fig.canvas.draw()


ax = fig.axes[0]
x, y = ax.transData.transform_point((-0.1, 0))
func = fig.canvas.button_press_event(x=x, y=y, button=1, guiEvent=None)
assert 'AAAAA' in picked
assert len(picked) == 1, len(picked)
```

</details>

If you click on a ylabel (or simulate this with the code above), you get two pick events instead of one.

![Screenshot from 2021-03-01 12-06-30](https://user-images.githubusercontent.com/2365790/109532002-9b9e9600-7a86-11eb-9530-4463d39633f9.png)

**Actual outcome**

On 6d79e6eddfe14a10141bab3ce421b2b43bc9a57a / after #16220:
```
pick AAAAA
pick AAAAA
Traceback (most recent call last):
  File ""/home/larsoner/Desktop/fig.py"", line 52, in <module>
    assert len(picked) == 1, len(picked)
AssertionError: 2
```

**Expected outcome**

On 74d61451efb9e6dd4916f4facf5614cc66528a4d / before #16220:
```
pick AAAAA
```

**Matplotlib version**
  * Matplotlib version (`import matplotlib; print(matplotlib.__version__)`): 6d79e6eddfe14a10141bab3ce421b2b43bc9a57a or later
  * Matplotlib backend (`print(matplotlib.get_backend())`): Tested on Qt5Agg and Agg
  * Python version: 3.9.0

cc @anntzer since it was your PR that seems to have caused this.",larsoner,closed,2021-03-01 17:10:50,,2021-03-01 17:30:40,larsoner,2021-03-01 17:30:40,2,status: duplicate,,
818918988,DeprecationWarning when changing color maps,"**Summary**

In v3.4.0rc1, calls to a colormap's `set_bad`, `set_under`, and `set_over` functions now trigger a deprecation warning saying that modifying a registered color map will soon be disallowed. This seems overly protective. If users have called any of these routines, then they are presumably doing so intentionally, probably after reading the documentation. This seems like the kind of routine customization that any user might expect to perform without going through the hoop of copying a color map every time. 

### Proposed fix

Remove the calls to `_warn_if_global_cmap_modified(self)` in the `Colormap.set_bad`, `set_under`, and `set_over` functions in `color.py` and change future plans to disallow such calls. 
",rayosborn,open,2021-03-01 14:27:37,,,,2021-03-25 22:25:18,16,"Maintenance, topic: color/color & colormaps",v3.5.0,59
818767499,matplotlib thread-safety vs core-dump/segfault,"**Bug summary**

The matplotlib docs clearly state that it is not thread-safe (this is nice clear messaging :+1:). I wanted to give an example of just how bad it can get if you are unlucky (or trying to break things).

In this example I get matplotlib to core dump since it seems that ``tight_layout`` is taking a little while to do its thing, and in the meantime other calls are being made to the underlying backend. This core dump occurs on both ``tkagg`` and ``qt5agg`` backends (didn't try testing others).

I plan to close this issue immediately, as there isn't anything to be done here, other than for me (the user) to fix my code with appropriate locks.

**Code for reproduction**


```python

import datetime
import threading
import time

import matplotlib
matplotlib.use('tkagg')
import matplotlib.pyplot as plt

fig = plt.figure()
plt.plot(range(10))


def update_text(thread_n: int):
    while True:
        fig.axes[0].xaxis.set_ticks(range(10))
        fig.axes[0].xaxis.set_ticklabels([f'foo {i} {thread_n}' for i in range(10)])
        plt.tight_layout()  # Note: I mostly get away with the threaded behaviour without this call.
        fig.canvas.draw()
        time.sleep(1)

threads = []
n = 20
for i in range(n):
    t = threading.Thread(target=update_text, kwargs={'thread_n': i})
    threads.append(t)

for t in threads:
    t.start()

plt.show()

```

**Actual outcome**

Looks like a crash in font handling

```
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Rasa' (Rasa-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Mono' (TlwgMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Nimbus Sans' (NimbusSans-Regular.otf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Pagul' (Pagul.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Noto Serif CJK JP' (NotoSerifCJK-Regular.ttc) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Tlwg Typewriter' (TlwgTypewriter.ttf) normal normal 400 normal>) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(<Font 'Waree' (Waree.ttf) normal normal 400 normal>) = 10.05

Thread 20 ""python"" received signal SIGSEGV, Segmentation fault.
[Switching to Thread 0x7fffb6ffd700 (LWP 126809)]
0x00007fffdd520e47 in TT_Load_Glyph_Header () from /media/important/github/jpype/jpype/env-acc-py-2020.11/lib/python3.7/site-packages/matplotlib/ft2font.cpython-37m-x86_64-linux-gnu.so
(gdb) bt
#0  0x00007fffdd520e47 in TT_Load_Glyph_Header () from /media/important/github/jpype/jpype/env-acc-py-2020.11/lib/python3.7/site-packages/matplotlib/ft2font.cpython-37m-x86_64-linux-gnu.so
#1  0x00007fffdd52302d in load_truetype_glyph () from /media/important/github/jpype/jpype/env-acc-py-2020.11/lib/python3.7/site-packages/matplotlib/ft2font.cpython-37m-x86_64-linux-gnu.so
#2  0x00007fffdd524f9e in TT_Load_Glyph () from /media/important/github/jpype/jpype/env-acc-py-2020.11/lib/python3.7/site-packages/matplotlib/ft2font.cpython-37m-x86_64-linux-gnu.so
#3  0x00007fffdd51fcc1 in tt_glyph_load () from /media/important/github/jpype/jpype/env-acc-py-2020.11/lib/python3.7/site-packages/matplotlib/ft2font.cpython-37m-x86_64-linux-gnu.so
#4  0x00007fffdd513b26 in FT_Load_Glyph () from /media/important/github/jpype/jpype/env-acc-py-2020.11/lib/python3.7/site-packages/matplotlib/ft2font.cpython-37m-x86_64-linux-gnu.so
#5  0x00007fffdd575f82 in af_latin_metrics_init_blues () from /media/important/github/jpype/jpype/env-acc-py-2020.11/lib/python3.7/site-packages/matplotlib/ft2font.cpython-37m-x86_64-linux-gnu.so
#6  0x00007fffdd576d9a in af_latin_metrics_init () from /media/important/github/jpype/jpype/env-acc-py-2020.11/lib/python3.7/site-packages/matplotlib/ft2font.cpython-37m-x86_64-linux-gnu.so
#7  0x00007fffdd5734bc in af_face_globals_get_metrics () from /media/important/github/jpype/jpype/env-acc-py-2020.11/lib/python3.7/site-packages/matplotlib/ft2font.cpython-37m-x86_64-linux-gnu.so
#8  0x00007fffdd57e1f5 in af_loader_load_glyph () from /media/important/github/jpype/jpype/env-acc-py-2020.11/lib/python3.7/site-packages/matplotlib/ft2font.cpython-37m-x86_64-linux-gnu.so
#9  0x00007fffdd57e7e2 in af_autofitter_load_glyph () from /media/important/github/jpype/jpype/env-acc-py-2020.11/lib/python3.7/site-packages/matplotlib/ft2font.cpython-37m-x86_64-linux-gnu.so
#10 0x00007fffdd513aee in FT_Load_Glyph () from /media/important/github/jpype/jpype/env-acc-py-2020.11/lib/python3.7/site-packages/matplotlib/ft2font.cpython-37m-x86_64-linux-gnu.so
#11 0x00007fffdd507a0f in FT2Font::set_text (this=0x7fffac004800, N=N@entry=2, codepoints=0x7fffac012130, angle=<optimised out>, flags=32, xys=...) at src/ft2font.cpp:653
#12 0x00007fffdd50dd8f in PyFT2Font_set_text (self=0x7fffd461b240, args=<optimised out>, kwds=<optimised out>) at src/ft2font_wrapper.cpp:666
#13 0x00005555556b99b6 in _PyMethodDef_RawFastCallKeywords (method=<optimised out>, self=0x7fffd461b240, args=0x7fffac003300, nargs=<optimised out>, kwnames=<optimised out>)
    at /tmp/build/80754af9/python_1598874792229/work/Objects/call.c:693
#14 0x00005555556b9a31 in _PyCFunction_FastCallKeywords (func=0x7fffd464a960, args=<optimised out>, nargs=<optimised out>, kwnames=<optimised out>)
    at /tmp/build/80754af9/python_1598874792229/work/Objects/call.c:732
#15 0x0000555555726483 in call_function (kwnames=0x7fffda90c390, oparg=<optimised out>, pp_stack=<synthetic pointer>) at /tmp/build/80754af9/python_1598874792229/work/Python/ceval.c:4568
#16 _PyEval_EvalFrameDefault (f=<optimised out>, throwflag=<optimised out>) at /tmp/build/80754af9/python_1598874792229/work/Python/ceval.c:3139
#17 0x0000555555668829 in _PyEval_EvalCodeWithName (_co=0x7fffdae9a540, globals=<optimised out>, locals=<optimised out>, args=<optimised out>, argcount=<optimised out>, kwnames=0x7fffdcbc0a28, 
    kwargs=0x7fffac0030b0, kwcount=1, kwstep=1, defs=0x0, defcount=0, kwdefs=0x0, closure=0x0, name=0x7fffdccc2a80, qualname=0x7fffda9028d0) at /tmp/build/80754af9/python_1598874792229/work/Python/ceval.c:3930
#18 0x00005555556b9107 in _PyFunction_FastCallKeywords (func=<optimised out>, stack=0x7fffac003098, nargs=3, kwnames=<optimised out>) at /tmp/build/80754af9/python_1598874792229/work/Objects/call.c:433
#19 0x0000555555722585 in call_function (kwnames=0x7fffdcbc0a10, oparg=<optimised out>, pp_stack=<synthetic pointer>) at /tmp/build/80754af9/python_1598874792229/work/Python/ceval.c:4616
#20 _PyEval_EvalFrameDefault (f=<optimised out>, throwflag=<optimised out>) at /tmp/build/80754af9/python_1598874792229/work/Python/ceval.c:3139
#21 0x0000555555669160 in _PyEval_EvalCodeWithName (_co=0x7fffdcbc1300, globals=<optimised out>, locals=<optimised out>, args=<optimised out>, argcount=<optimised out>, kwnames=0x0, kwargs=0x7fffac002b38, 
    kwcount=0, kwstep=1, defs=0x0, defcount=0, kwdefs=0x0, closure=0x0, name=0x7fffdcc4bb30, qualname=0x7fffdcbbec60) at /tmp/build/80754af9/python_1598874792229/work/Python/ceval.c:3930
#22 0x00005555556b9107 in _PyFunction_FastCallKeywords (func=<optimised out>, stack=0x7fffac002b28, nargs=2, kwnames=<optimised out>) at /tmp/build/80754af9/python_1598874792229/work/Objects/call.c:433
#23 0x0000555555721740 in call_function (kwnames=0x0, oparg=<optimised out>, pp_stack=<synthetic pointer>) at /tmp/build/80754af9/python_1598874792229/work/Python/ceval.c:4616
#24 _PyEval_EvalFrameDefault (f=<optimised out>, throwflag=<optimised out>) at /tmp/build/80754af9/python_1598874792229/work/Python/ceval.c:3110
#25 0x0000555555668829 in _PyEval_EvalCodeWithName (_co=0x7fffdcbc7780, globals=<optimised out>, locals=<optimised out>, args=<optimised out>, argcount=<optimised out>, kwnames=0x0, kwargs=0x7fffd4618b08, 
    kwcount=0, kwstep=1, defs=0x7fffdcbcb9c8, defcount=2, kwdefs=0x0, closure=0x0, name=0x7fffdd0cbc60, qualname=0x7fffdcbca300) at /tmp/build/80754af9/python_1598874792229/work/Python/ceval.c:3930
#26 0x00005555556b90a5 in _PyFunction_FastCallKeywords (func=<optimised out>, stack=0x7fffd4618af8, nargs=2, kwnames=<optimised out>) at /tmp/build/80754af9/python_1598874792229/work/Objects/call.c:433
#27 0x0000555555721740 in call_function (kwnames=0x0, oparg=<optimised out>, pp_stack=<synthetic pointer>) at /tmp/build/80754af9/python_1598874792229/work/Python/ceval.c:4616
#28 _PyEval_EvalFrameDefault (f=<optimised out>, throwflag=<optimised out>) at /tmp/build/80754af9/python_1598874792229/work/Python/ceval.c:3110
#29 0x0000555555668b0a in _PyEval_EvalCodeWithName (_co=0x7fffdafe4300, globals=<optimised out>, locals=<optimised out>, args=<optimised out>, argcount=<optimised out>, kwnames=0x0, kwargs=0x7fffdb484928, 
    kwcount=0, kwstep=1, defs=0x0, defcount=0, kwdefs=0x0, closure=0x7fffda01a890, name=0x7fffdafd20f0, qualname=0x7fffdafe1750) at /tmp/build/80754af9/python_1598874792229/work/Python/ceval.c:3930
#30 0x00005555556b9107 in _PyFunction_FastCallKeywords (func=<optimised out>, stack=0x7fffdb484920, nargs=1, kwnames=<optimised out>) at /tmp/build/80754af9/python_1598874792229/work/Objects/call.c:433
#31 0x00005555557214b6 in call_function (kwnames=0x0, oparg=<optimised out>, pp_stack=<synthetic pointer>) at /tmp/build/80754af9/python_1598874792229/work/Python/ceval.c:4616
#32 _PyEval_EvalFrameDefault (f=<optimised out>, throwflag=<optimised out>) at /tmp/build/80754af9/python_1598874792229/work/Python/ceval.c:3124
#33 0x0000555555669160 in _PyEval_EvalCodeWithName (_co=0x7fffdafe4420, globals=<optimised out>, locals=<optimised out>, args=<optimised out>, argcount=<optimised out>, kwnames=0x0, kwargs=0x7fffac002930, 
    kwcount=0, kwstep=1, defs=0x0, defcount=0, kwdefs=0x0, closure=0x0, name=0x7fffdafe34e0, qualname=0x7fffdafe3cb0) at /tmp/build/80754af9/python_1598874792229/work/Python/ceval.c:3930
#34 0x00005555556b9107 in _PyFunction_FastCallKeywords (func=<optimised out>, stack=0x7fffac002918, nargs=3, kwnames=<optimised out>) at /tmp/build/80754af9/python_1598874792229/work/Objects/call.c:433
#35 0x0000555555721740 in call_function (kwnames=0x0, oparg=<optimised out>, pp_stack=<synthetic pointer>) at /tmp/build/80754af9/python_1598874792229/work/Python/ceval.c:4616
#36 _PyEval_EvalFrameDefault (f=<optimised out>, throwflag=<optimised out>) at /tmp/build/80754af9/python_1598874792229/work/Python/ceval.c:3110
#37 0x0000555555668829 in _PyEval_EvalCodeWithName (_co=0x7fffdaff3a50, globals=<optimised out>, locals=<optimised out>, args=<optimised out>, argcount=<optimised out>, kwnames=0x7fffdaff80e8, 
    kwargs=0x7fffac001ae8, kwcount=1, kwstep=1, defs=0x0, defcount=0, kwdefs=0x0, closure=0x0, name=0x7fffdaff18f0, qualname=0x7fffdaff58a0) at /tmp/build/80754af9/python_1598874792229/work/Python/ceval.c:3930
#38 0x00005555556b9107 in _PyFunction_FastCallKeywords (func=<optimised out>, stack=0x7fffac001ae0, nargs=1, kwnames=<optimised out>) at /tmp/build/80754af9/python_1598874792229/work/Objects/call.c:433
#39 0x0000555555722585 in call_function (kwnames=0x7fffdaff80d0, oparg=<optimised out>, pp_stack=<synthetic pointer>) at /tmp/build/80754af9/python_1598874792229/work/Python/ceval.c:4616
#40 _PyEval_EvalFrameDefault (f=<optimised out>, throwflag=<optimised out>) at /tmp/build/80754af9/python_1598874792229/work/Python/ceval.c:3139
#41 0x00005555556b8e7b in function_code_fastcall (globals=<optimised out>, nargs=2, args=<optimised out>, co=<optimised out>) at /tmp/build/80754af9/python_1598874792229/work/Objects/call.c:283
#42 _PyFunction_FastCallKeywords (func=<optimised out>, stack=0x7fffda007208, nargs=2, kwnames=<optimised out>) at /tmp/build/80754af9/python_1598874792229/work/Objects/call.c:408
#43 0x0000555555721740 in call_function (kwnames=0x0, oparg=<optimised out>, pp_stack=<synthetic pointer>) at /tmp/build/80754af9/python_1598874792229/work/Python/ceval.c:4616
#44 _PyEval_EvalFrameDefault (f=<optimised out>, throwflag=<optimised out>) at /tmp/build/80754af9/python_1598874792229/work/Python/ceval.c:3110
#45 0x0000555555669160 in _PyEval_EvalCodeWithName (_co=0x7fffdafe45d0, globals=<optimised out>, locals=<optimised out>, args=<optimised out>, argcount=<optimised out>, kwnames=0x7fffdafcd568, 
    kwargs=0x7fffac002660, kwcount=1, kwstep=1, defs=0x0, defcount=0, kwdefs=0x7fffdaf9e5f0, closure=0x0, name=0x7fffdd0d0bb0, qualname=0x7fffdafe3ee0)
    at /tmp/build/80754af9/python_1598874792229/work/Python/ceval.c:3930
#46 0x00005555556b9107 in _PyFunction_FastCallKeywords (func=<optimised out>, stack=0x7fffac002650, nargs=2, kwnames=<optimised out>) at /tmp/build/80754af9/python_1598874792229/work/Objects/call.c:433

```

For the record, I saw a different core dump that I was trying to slim down. That dump camp from JPype I think, rather than matplotlib, but was being caused by the error:

```
Traceback (most recent call last):
  File ""/tmp/bq_venv/lib/python3.7/site-packages/matplotlib/cbook/__init__.py"", line 224, in process
    func(*args, **kwargs)
  File ""/tmp/bqtrig_viewer/gui.py"", line 155, in on_resize
    self.fig.tight_layout()
  File ""/tmp/bq_venv/lib/python3.7/site-packages/matplotlib/cbook/deprecation.py"", line 411, in wrapper
    return func(*inner_args, **inner_kwargs)
  File ""/tmp/bq_venv/lib/python3.7/site-packages/matplotlib/figure.py"", line 2615, in tight_layout
    pad=pad, h_pad=h_pad, w_pad=w_pad, rect=rect)
  File ""/tmp/bq_venv/lib/python3.7/site-packages/matplotlib/tight_layout.py"", line 308, in get_tight_layout_figure
    pad=pad, h_pad=h_pad, w_pad=w_pad)
  File ""/tmp/bq_venv/lib/python3.7/site-packages/matplotlib/tight_layout.py"", line 84, in auto_adjust_subplotpars
    bb += [ax.get_tightbbox(renderer, for_layout_only=True)]
  File ""/tmp/bq_venv/lib/python3.7/site-packages/matplotlib/axes/_base.py"", line 4163, in get_tightbbox
    renderer, for_layout_only=for_layout_only)
  File ""/tmp/bq_venv/lib/python3.7/site-packages/matplotlib/axis.py"", line 1125, in get_tightbbox
    *ticklabelBoxes2,
  File ""/tmp/bq_venv/lib/python3.7/site-packages/matplotlib/axis.py"", line 1123, in <genexpr>
    if a.get_visible()),
  File ""/tmp/bq_venv/lib/python3.7/site-packages/matplotlib/text.py"", line 902, in get_window_extent
    bbox, info, descent = self._get_layout(self._renderer)
  File ""/tmp/bq_venv/lib/python3.7/site-packages/matplotlib/text.py"", line 296, in _get_layout
    clean_line, self._fontproperties, ismath=ismath)
  File ""/tmp/bq_venv/lib/python3.7/site-packages/matplotlib/backends/backend_agg.py"", line 238, in get_text_width_height_descent
    font.set_text(s, 0.0, flags=flags)
RuntimeError: In set_text: Could not load glyph (error code 0x14)
```

This error was the same as that reported in https://github.com/spacetelescope/PASTIS/issues/48. I think it was triggered inside a Java managed thread (through JPype) and was resulting in a core-dump. That has nothing to do with matplotlib though (I'm just trying to write this all down so that it can be googled easily). The JPype core dump looked like:

```
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  SIGSEGV (0xb) at pc=0x00007f9d003e4ed7, pid=26963, tid=26963
#
# JRE version: OpenJDK Runtime Environment 18.9 (11.0.8+10) (build 11.0.8+10-LTS)
# Java VM: OpenJDK 64-Bit Server VM 18.9 (11.0.8+10-LTS, mixed mode, sharing, tiered, compressed oops, g1 gc, linux-amd64)
# Problematic frame:
# C  [ft2font.cpython-37m-x86_64-linux-gnu.so+0x25ed7]
[error occurred during error reporting (printing problematic frame), id 0xb, SIGSEGV (0xb) at pc=0x00007f9d1c95f1e2]

# No core dump will be written. Core dumps have been disabled. To enable core dumping, try ""ulimit -c unlimited"" before starting Java again
#
# An error report file with more information is saved as:
# /tmp/bqtrig-viewer/hs_err_pid26963.log
[thread 27042 also had an error]
Killed
```

In all cases we are taking about font issues in a multi-threaded context though.

**Expected outcome**

**Nothing different!** This is a consequence of not following the documented recommendations regarding thread-safety. In user code we need to acquire a ``threading.Lock`` (or some other form of synchronisation). *If wanted*, it is believable that matplotlib could do something slightly more sophisticated here with regards to locking for a single figure.

",pelson,closed,2021-03-01 11:22:43,,2021-03-01 11:22:55,pelson,2021-03-01 15:24:43,3,,,
818744182,Curves with same label not appearing in Figure options (only the last one),"<!--To help us understand and resolve your issue, please fill out the form to the best of your ability.-->
<!--You can feel free to delete the sections that do not apply.-->

### Bug report

**Bug summary**
If there are multiple curves with the same label in a figure/subplot, only the last one of them can be selected in the *Figure options* window under the *Curves* tab. In the legend however, they appear as they should.

**Code for reproduction**
```python
import matplotlib.pyplot as plt
plt.plot([0,1],[0,1],label=""line"")
plt.plot([0,1],[1,0],label=""line"")
plt.legend()
plt.show()
```

**Actual outcome**
See description above and the image below.

![figure_options](https://user-images.githubusercontent.com/28358038/109487440-80328b80-7a84-11eb-81a2-b95fab397d9f.png)

**Expected outcome**
All curves should be listed in the *Figure options* window, even if they have the same label.

**Matplotlib version**
<!--Please specify your platform and versions of the relevant libraries you are using:-->
  * Operating system: Windows 10
  * Matplotlib version (`import matplotlib; print(matplotlib.__version__)`): 3.3.4
  * Matplotlib backend (`print(matplotlib.get_backend())`): Qt5Agg
  * Python version: 3.8.5
  * Jupyter version (if applicable): -
  * Other libraries: -

Matplotlib has been installed with pip.


",axtschmied,closed,2021-03-01 10:55:03,,2021-04-01 04:10:26,QuLogic,2021-04-01 04:10:26,4,"Good first issue, status: confirmed bug",v3.5.0,59
818545794,Remove versionadded notes; correct doc link,"## PR Summary

Remove unmaintained version notes/annotations from axes3d.py. This also corrects an inline markup escape sequence to generate a doc link properly.

## PR Checklist

- [N/A] Has pytest style unit tests (and `pytest` passes).
- [X] Is [Flake 8](https://flake8.pycqa.org/en/latest/) compliant (run `flake8` on changed files to check).
- [N/A] New features are documented, with examples if plot related.
- [X] Documentation is sphinx and numpydoc compliant (the docs should [build](https://matplotlib.org/devel/documenting_mpl.html#building-the-docs) without error).
- [X] Conforms to Matplotlib style conventions (install `flake8-docstrings` and run `flake8 --docstring-convention=all`).
- [N/A] New features have an entry in `doc/users/next_whats_new/` (follow instructions in README.rst there).
- [N/A] API changes documented in `doc/api/next_api_changes/` (follow instructions in README.rst there).
",kentcr,closed,2021-03-01 06:59:09,,2021-03-02 23:44:50,QuLogic,2021-03-02 23:45:19,8,Documentation,v3.5.0,59
818515832,Promote _Backend to public api,"### Problem
Discussed on gitter here: https://gitter.im/matplotlib/matplotlib?at=603c83fc44f5a454a447c6e9

The `_Backend` class added in matplotlib/matplotlib#8773 would be useful for external backends such as ipympl, and is already used by mplcairo. But it is currently marked as a private.

### Proposed Solution
1. Make `_Backend` public
2. Document `_Backend` as stable.",ianhi,open,2021-03-01 06:16:03,,,,2021-03-19 14:36:51,1,"New feature, status: needs comment/discussion",,
818348060,Inconsistent behavior of subplots_adjust() with tight_layout,"<!--To help us understand and resolve your issue, please fill out the form to the best of your ability.-->
<!--You can feel free to delete the sections that do not apply.-->

### Bug report

**Bug summary**

When passing hspace=0 or wspace=0 to subplot_adjust(), the boundary of adjacent axes should be merged without space, as the example at the page

[Creating adjacent subplots](https://matplotlib.org/stable/gallery/subplots_axes_and_figures/ganged_plots.html#sphx-glr-gallery-subplots-axes-and-figures-ganged-plots-py)

However, when tight_layout is turned on, there is always space between the axes.

<!--A short 1-2 sentences that succinctly describes the bug-->

**Code for reproduction**

<!--A minimum code snippet required to reproduce the bug.
Please make sure to minimize the number of dependencies required, and provide
any necessary plotted data.
Avoid using threads, as Matplotlib is (explicitly) not thread-safe.-->

```python
import matplotlib.pyplot as plt

fig, axes = plt.subplots(2, 2, sharex=True, sharey=True,
    tight_layout=True)
fig.subplots_adjust(wspace=0, hspace=0)

plt.show()
```

**Actual outcome**

<!--The output produced by the above code, which may be a screenshot, console output, etc.-->
![Figure_1](https://user-images.githubusercontent.com/11709830/109438088-23c86100-79dd-11eb-8994-85d495351c76.png)

**Expected outcome**

<!--A description of the expected outcome from the code snippet-->
<!--If this used to work in an earlier version of Matplotlib, please note the version it used to work on-->
![Figure_2](https://user-images.githubusercontent.com/11709830/109438111-36db3100-79dd-11eb-8b5b-06b7878ddbc3.png)

**Matplotlib version**
<!--Please specify your platform and versions of the relevant libraries you are using:-->
  * Operating system: macOS Big Sur 11.2.2
  * Matplotlib version (`import matplotlib; print(matplotlib.__version__)`): 3.3.4
  * Matplotlib backend (`print(matplotlib.get_backend())`): MacOSX
  * Python version: 3.8.5
  * Jupyter version (if applicable): 
  * Other libraries: 

<!--Please tell us how you installed matplotlib and python e.g., from source, pip, conda-->
<!--If you installed from conda, please specify which channel you used if not the default-->
I use the Anaconda distribution for accessing my Python and Matplotlib.
",chaochinyang,closed,2021-02-28 23:57:51,,2021-03-01 03:18:20,jklymak,2021-03-01 03:18:59,1,Community support,,
818246849,Remove matplotlibrc.template.,"## PR Summary

See https://github.com/matplotlib/matplotlib/pull/19588, https://github.com/matplotlib/matplotlib/pull/19602.

## PR Checklist

<!-- Please mark any checkboxes that do not apply to this PR as [N/A]. -->

- [ ] Has pytest style unit tests (and `pytest` passes).
- [ ] Is [Flake 8](https://flake8.pycqa.org/en/latest/) compliant (run `flake8` on changed files to check).
- [ ] New features are documented, with examples if plot related.
- [ ] Documentation is sphinx and numpydoc compliant (the docs should [build](https://matplotlib.org/devel/documenting_mpl.html#building-the-docs) without error).
- [ ] Conforms to Matplotlib style conventions (install `flake8-docstrings` and run `flake8 --docstring-convention=all`).
- [ ] New features have an entry in `doc/users/next_whats_new/` (follow instructions in README.rst there).
- [ ] API changes documented in `doc/api/next_api_changes/` (follow instructions in README.rst there).

<!--
Thank you so much for your PR!  To help us review your contribution, please
consider the following points:

- A development guide is available at https://matplotlib.org/devdocs/devel/index.html.

- Help with git and github is available at
  https://matplotlib.org/devel/gitwash/development_workflow.html.

- Do not create the PR out of master, but out of a separate branch.

- The PR title should summarize the changes, for example ""Raise ValueError on
  non-numeric input to set_xlim"".  Avoid non-descriptive titles such as
  ""Addresses issue #8576"".

- The summary should provide at least 1-2 sentences describing the pull request
  in detail (Why is this change required?  What problem does it solve?) and
  link to any relevant issues.

- If you are contributing fixes to docstrings, please pay attention to
  http://matplotlib.org/devel/documenting_mpl.html#formatting.  In particular,
  note the difference between using single backquotes, double backquotes, and
  asterisks in the markup.

We understand that PRs can sometimes be overwhelming, especially as the
reviews start coming in.  Please let us know if the reviews are unclear or
the recommended next step seems overly demanding, if you would like help in
addressing a reviewer's comments, or if you have been waiting too long to hear
back on your PR.
-->
",anntzer,closed,2021-02-28 16:30:02,,2021-03-31 23:15:38,QuLogic,2021-04-01 06:03:45,3,Build,v3.5.0,59
818244781,MNT: move matplotlibrc.template to mpl-data,"## PR Summary

Alternative to https://github.com/matplotlib/matplotlib/pull/19588, closes #19578

This simply makes `lib/matplotlib/mpl-data/matplotlibrc` the file under source control and soft-links back to `matplotlibrc.template`.   `setup.py` now modifies the file in place if the backend needs to be edited.  

### More detail:

Previously `matplotlibrc.template` was changed in #15029 to be the canonical place to get the defaults for all the rcParams.  However, these were *read* during `__init__.py` from `lib/matplotlib/mpl-data/matplotlibrc`.  `lib/matplotlib/mpl-data/matplotlibrc` doesn't exist in the repo, and only gets created when `setup.py` is called.  We can't read the defaults from `matplotlbrc.template` because that file probably doesn't exist in most user installs.  

Aside from being somewhat rickety, the problem is that developers working from an editable install don't want to always call `setup.py` as it requires compiling the C extensions, and hence their `lib/matplotlib/mpl-data/matplotlibrc` can get out of sync with the library.    

The solution here is to simply make `lib/matplotlib/mpl-data/matplotlibrc` the canonical source of the defaults, add it to version control, and softlink it to `matplotlib.template`.  `setup.py` can change `lib/matplotlib/mpl-data/matplotlibrc` in-place (I think)

See also:
- #11844
- https://github.com/matplotlib/matplotlib/pull/14929
- https://github.com/matplotlib/matplotlib/pull/15029

## PR Checklist

<!-- Please mark any checkboxes that do not apply to this PR as [N/A]. -->

- [ ] Has pytest style unit tests (and `pytest` passes).
- [ ] Is [Flake 8](https://flake8.pycqa.org/en/latest/) compliant (run `flake8` on changed files to check).
- [ ] New features are documented, with examples if plot related.
- [ ] Documentation is sphinx and numpydoc compliant (the docs should [build](https://matplotlib.org/devel/documenting_mpl.html#building-the-docs) without error).
- [ ] Conforms to Matplotlib style conventions (install `flake8-docstrings` and run `flake8 --docstring-convention=all`).
- [ ] New features have an entry in `doc/users/next_whats_new/` (follow instructions in README.rst there).
- [ ] API changes documented in `doc/api/next_api_changes/` (follow instructions in README.rst there).

<!--
Thank you so much for your PR!  To help us review your contribution, please
consider the following points:

- A development guide is available at https://matplotlib.org/devdocs/devel/index.html.

- Help with git and github is available at
  https://matplotlib.org/devel/gitwash/development_workflow.html.

- Do not create the PR out of master, but out of a separate branch.

- The PR title should summarize the changes, for example ""Raise ValueError on
  non-numeric input to set_xlim"".  Avoid non-descriptive titles such as
  ""Addresses issue #8576"".

- The summary should provide at least 1-2 sentences describing the pull request
  in detail (Why is this change required?  What problem does it solve?) and
  link to any relevant issues.

- If you are contributing fixes to docstrings, please pay attention to
  http://matplotlib.org/devel/documenting_mpl.html#formatting.  In particular,
  note the difference between using single backquotes, double backquotes, and
  asterisks in the markup.

We understand that PRs can sometimes be overwhelming, especially as the
reviews start coming in.  Please let us know if the reviews are unclear or
the recommended next step seems overly demanding, if you would like help in
addressing a reviewer's comments, or if you have been waiting too long to hear
back on your PR.
-->
",jklymak,closed,2021-02-28 16:20:17,,2021-02-28 16:39:17,jklymak,2021-02-28 16:39:22,1,,,
818177840,Handle None entries in sys.modules.,"sys.modules entries can be explicitly set to None to block imports, so
the `name in sys.modules` check should rather be written
`sys.modules.get(name)` (... is not None).

While we're at it, disentangle a bit install_repl_displayhook to exit
early if `not sys.modules.get(""IPython"") or not get_ipython()`, which
avoids having to throw a local NotIPython exception just to `goto end`.
(Also note that the import of `backend2gui` should not throw an
ImportError, as that mapping has been around since <2011).

xref #19597 (I intentionally left out the case handled by #19597 to avoid a conflict)

## PR Summary

## PR Checklist

<!-- Please mark any checkboxes that do not apply to this PR as [N/A]. -->

- [ ] Has pytest style unit tests (and `pytest` passes).
- [ ] Is [Flake 8](https://flake8.pycqa.org/en/latest/) compliant (run `flake8` on changed files to check).
- [ ] New features are documented, with examples if plot related.
- [ ] Documentation is sphinx and numpydoc compliant (the docs should [build](https://matplotlib.org/devel/documenting_mpl.html#building-the-docs) without error).
- [ ] Conforms to Matplotlib style conventions (install `flake8-docstrings` and run `flake8 --docstring-convention=all`).
- [ ] New features have an entry in `doc/users/next_whats_new/` (follow instructions in README.rst there).
- [ ] API changes documented in `doc/api/next_api_changes/` (follow instructions in README.rst there).

<!--
Thank you so much for your PR!  To help us review your contribution, please
consider the following points:

- A development guide is available at https://matplotlib.org/devdocs/devel/index.html.

- Help with git and github is available at
  https://matplotlib.org/devel/gitwash/development_workflow.html.

- Do not create the PR out of master, but out of a separate branch.

- The PR title should summarize the changes, for example ""Raise ValueError on
  non-numeric input to set_xlim"".  Avoid non-descriptive titles such as
  ""Addresses issue #8576"".

- The summary should provide at least 1-2 sentences describing the pull request
  in detail (Why is this change required?  What problem does it solve?) and
  link to any relevant issues.

- If you are contributing fixes to docstrings, please pay attention to
  http://matplotlib.org/devel/documenting_mpl.html#formatting.  In particular,
  note the difference between using single backquotes, double backquotes, and
  asterisks in the markup.

We understand that PRs can sometimes be overwhelming, especially as the
reviews start coming in.  Please let us know if the reviews are unclear or
the recommended next step seems overly demanding, if you would like help in
addressing a reviewer's comments, or if you have been waiting too long to hear
back on your PR.
-->
",anntzer,closed,2021-02-28 10:52:03,,2021-03-01 23:26:42,QuLogic,2021-03-01 23:37:41,1,,v3.5.0,59
818131799,DOC: better intro for dates.py,"## PR Summary

This attempts to improve the dates.py intro to give the user some idea what is going on.  This page comes up first if you type `matplotlib dates` into Google, but I don't think anyone would know how to use dates from the original. 


## PR Checklist

<!-- Please mark any checkboxes that do not apply to this PR as [N/A]. -->

- [ ] Has pytest style unit tests (and `pytest` passes).
- [ ] Is [Flake 8](https://flake8.pycqa.org/en/latest/) compliant (run `flake8` on changed files to check).
- [ ] New features are documented, with examples if plot related.
- [ ] Documentation is sphinx and numpydoc compliant (the docs should [build](https://matplotlib.org/devel/documenting_mpl.html#building-the-docs) without error).
- [ ] Conforms to Matplotlib style conventions (install `flake8-docstrings` and run `flake8 --docstring-convention=all`).
- [ ] New features have an entry in `doc/users/next_whats_new/` (follow instructions in README.rst there).
- [ ] API changes documented in `doc/api/next_api_changes/` (follow instructions in README.rst there).

<!--
Thank you so much for your PR!  To help us review your contribution, please
consider the following points:

- A development guide is available at https://matplotlib.org/devdocs/devel/index.html.

- Help with git and github is available at
  https://matplotlib.org/devel/gitwash/development_workflow.html.

- Do not create the PR out of master, but out of a separate branch.

- The PR title should summarize the changes, for example ""Raise ValueError on
  non-numeric input to set_xlim"".  Avoid non-descriptive titles such as
  ""Addresses issue #8576"".

- The summary should provide at least 1-2 sentences describing the pull request
  in detail (Why is this change required?  What problem does it solve?) and
  link to any relevant issues.

- If you are contributing fixes to docstrings, please pay attention to
  http://matplotlib.org/devel/documenting_mpl.html#formatting.  In particular,
  note the difference between using single backquotes, double backquotes, and
  asterisks in the markup.

We understand that PRs can sometimes be overwhelming, especially as the
reviews start coming in.  Please let us know if the reviews are unclear or
the recommended next step seems overly demanding, if you would like help in
addressing a reviewer's comments, or if you have been waiting too long to hear
back on your PR.
-->
",jklymak,closed,2021-02-28 06:00:47,,2021-03-03 23:19:06,QuLogic,2021-03-03 23:20:32,1,Documentation,v3.5.0,59
818051635,StopIteration crash with FuncAnimation and FFMpegWriter,"

### Bug report

**Bug summary**

Very similar to closed issue #13676, but this occurs when `frames` is an iterator, **and** a movie is being written **and** a block is called.

**Code for reproduction**

<!--A minimum code snippet required to reproduce the bug.
Please make sure to minimize the number of dependencies required, and provide
any necessary plotted data.
Avoid using threads, as Matplotlib is (explicitly) not thread-safe.-->

```python
import matplotlib.pyplot as plt
import numpy as np
from matplotlib.animation import FuncAnimation, FFMpegWriter

fig, ax = plt.subplots()
plt.plot([1,2,3],[2,4,3])
def update(frame):
	print(frame)
	return []
animation = FuncAnimation(fig, update, frames=iter(range(10)), blit=False, interval=100, repeat=False)

FFwriter = FFMpegWriter(fps=100, extra_args=['-vcodec', 'libx264'])
animation.save('test.mp4', writer=FFwriter)

print('** starting block')
plt.show(block=True)
print('  done with block')
```

While arguably a `block` is not essential, in my application I generally need to use a `block` somewhere downstream in the program to hold a plot for the user, and that is what triggers the exception.

**Actual outcome**

The file is always saved, but an exception is thrown.

```
** starting block
Traceback (most recent call last):
  File ""/Users/corkep/opt/miniconda3/envs/dev/lib/python3.8/site-packages/matplotlib/cbook/__init__.py"", line 224, in process
    func(*args, **kwargs)
  File ""/Users/corkep/opt/miniconda3/envs/dev/lib/python3.8/site-packages/matplotlib/animation.py"", line 975, in _start
    self._init_draw()
  File ""/Users/corkep/opt/miniconda3/envs/dev/lib/python3.8/site-packages/matplotlib/animation.py"", line 1719, in _init_draw
    self._draw_frame(next(self.new_frame_seq()))
StopIteration
  done with block
```

**Expected outcome**

No exception thrown.

I can't catch and ignore this exception since it's thrown by a background thead.

**Matplotlib version**
  * MacOS 10.15.7
  * Matplotlib version (`import matplotlib; print(matplotlib.__version__)`): 3.3.4
  * Matplotlib backend (`print(matplotlib.get_backend())`): MacOSX
  * Python version: 3.8.5
  * Jupyter version (if applicable): n/a
  * Other libraries: 

pip installed

",petercorke,open,2021-02-27 23:07:02,,,,2021-03-12 20:26:23,1,topic: animation,,
817951061,Axes order changed in 3.4.0rc1,"<!--To help us understand and resolve your issue, please fill out the form to the best of your ability.-->
<!--You can feel free to delete the sections that do not apply.-->

### Bug report

**Bug summary**

<!--A short 1-2 sentences that succinctly describes the bug-->
The order of the `axes` is changed in matplotlib 3.4.0rc1.

**Code for reproduction**

<!--A minimum code snippet required to reproduce the bug.
Please make sure to minimize the number of dependencies required, and provide
any necessary plotted data.
Avoid using threads, as Matplotlib is (explicitly) not thread-safe.-->

```python
import matplotlib
import matplotlib.pyplot as plt
import numpy as np

image = np.arange(10*10).reshape((10, 10))

fig = plt.figure()
ax = fig.add_subplot()
im = ax.imshow(image)
fig.colorbar(im)

print(""Matplotlib version"", matplotlib.__version__)
print(""Axes:"", fig.axes)
```

**Actual outcome**

<!--The output produced by the above code, which may be a screenshot, console output, etc.-->

```
Matplotlib version 3.4.0rc1
axes: [<AxesSubplot:label='<colorbar>'>, <AxesSubplot:>]
```

**Expected outcome**

<!--A description of the expected outcome from the code snippet-->
<!--If this used to work in an earlier version of Matplotlib, please note the version it used to work on-->

```
Matplotlib version 3.4.0rc1
axes: [<AxesSubplot:>, <AxesSubplot:label='<colorbar>'>]
```

**Matplotlib version**
<!--Please specify your platform and versions of the relevant libraries you are using:-->
  * Operating system: Fedora
  * Matplotlib version (`import matplotlib; print(matplotlib.__version__)`): 3.4.0rc1
  * Matplotlib backend (`print(matplotlib.get_backend())`): module://ipykernel.pylab.backend_inline
  * Python version: 3.8.6 or 3.9.2
  * Jupyter version (if applicable): 
  * Other libraries: 

<!--Please tell us how you installed matplotlib and python e.g., from source, pip, conda-->
<!--If you installed from conda, please specify which channel you used if not the default-->
Matplotlib 3.4.0rc1 installed from pypi
",ericpre,closed,2021-02-27 15:29:06,,2021-03-05 22:45:05,jklymak,2021-03-05 22:45:05,14,,v3.4.0,53
817800940,Fix IPython import issue,"When blocking import of `IPython` by defining `sys.modules[""IPython""] = None`, creating plots fails because `backend_bases.FigureCanvasBase._fix_ipython_backend2gui` attempts to check if `IPython` is already imported by looking for an entry in `sys.modules`. It then attempts to import `IPython`, which fails due to the import being blocked.

Code sample to reproduce the issue:

```
import sys
sys.modules['IPython'] = None

from matplotlib import pyplot
plt = pyplot.subplots(1,1)
```

which results in:
```
Traceback (most recent call last):
  File ""<module1>"", line 5, in <module>
  File ""C:\Users\Phil\envs\mp_dev\lib\site-packages\matplotlib\cbook\deprecation.py"", line 451, in wrapper
    return func(*args, **kwargs)
  File ""C:\Users\Phil\envs\mp_dev\lib\site-packages\matplotlib\pyplot.py"", line 1287, in subplots
    fig = figure(**fig_kw)
  File ""C:\Users\Phil\envs\mp_dev\lib\site-packages\matplotlib\pyplot.py"", line 687, in figure
    figManager = new_figure_manager(num, figsize=figsize,
  File ""C:\Users\Phil\envs\mp_dev\lib\site-packages\matplotlib\pyplot.py"", line 315, in new_figure_manager
    return _backend_mod.new_figure_manager(*args, **kwargs)
  File ""C:\Users\Phil\envs\mp_dev\lib\site-packages\matplotlib\backend_bases.py"", line 3493, in new_figure_manager
    fig = fig_cls(*args, **kwargs)
  File ""C:\Users\Phil\envs\mp_dev\lib\site-packages\matplotlib\figure.py"", line 341, in __init__
    FigureCanvasBase(self)  # Set self.canvas.
  File ""C:\Users\Phil\envs\mp_dev\lib\site-packages\matplotlib\backend_bases.py"", line 1686, in __init__
    self._fix_ipython_backend2gui()
  File ""C:\Users\Phil\envs\mp_dev\lib\site-packages\matplotlib\backend_bases.py"", line 1713, in _fix_ipython_backend2gui
    import IPython
ModuleNotFoundError: import of IPython halted; None in sys.modules
```

This PR addresses this issue by not only checking if `IPython` is present in `sys.modules`, but also if it is blocked from being imported.",philnagel,closed,2021-02-27 02:39:11,,2021-03-01 23:21:33,QuLogic,2021-03-01 23:22:36,3,,v3.4.0,53
817676650,Fix for issue 17769: wx interactive figure close cause crash,"## PR Summary
Fix for issue https://github.com/matplotlib/matplotlib/issues/17769

1) On figure window (FigureFrameWx) close - remove figure manager from from Gcf class
 previously Gcf.destroy was called with FigureFrameWx not FigureManagerWx instance so figure was not removed correctly.

2) Destroy now done from FigureManagerWx.destroy() method to prevent multiple calls to the close event handler.

3) Remove unneeded wx mainloop yield calls that cause crash on windows from both FigureManagerWx.destroy and FigureFrameWx.Destroy.

Tested on windows 10, and mint 20.1. 

## PR Checklist

<!-- Please mark any checkboxes that do not apply to this PR as [N/A]. -->

- [N/A ] Has pytest style unit tests (and `pytest` passes).
- [N/A] Is [Flake 8](https://flake8.pycqa.org/en/latest/) compliant (run `flake8` on changed files to check).
- [N/A] New features are documented, with examples if plot related.
- [N/A] Documentation is sphinx and numpydoc compliant (the docs should [build](https://matplotlib.org/devel/documenting_mpl.html#building-the-docs) without error).
- [N/A ] Conforms to Matplotlib style conventions (install `flake8-docstrings` and run `flake8 --docstring-convention=all`).
- [N/A] New features have an entry in `doc/users/next_whats_new/` (follow instructions in README.rst there).
- [N/A] API changes documented in `doc/api/next_api_changes/` (follow instructions in README.rst there).

<!--
Thank you so much for your PR!  To help us review your contribution, please
consider the following points:

- A development guide is available at https://matplotlib.org/devdocs/devel/index.html.

- Help with git and github is available at
  https://matplotlib.org/devel/gitwash/development_workflow.html.

- Do not create the PR out of master, but out of a separate branch.

- The PR title should summarize the changes, for example ""Raise ValueError on
  non-numeric input to set_xlim"".  Avoid non-descriptive titles such as
  ""Addresses issue #8576"".

- The summary should provide at least 1-2 sentences describing the pull request
  in detail (Why is this change required?  What problem does it solve?) and
  link to any relevant issues.

- If you are contributing fixes to docstrings, please pay attention to
  http://matplotlib.org/devel/documenting_mpl.html#formatting.  In particular,
  note the difference between using single backquotes, double backquotes, and
  asterisks in the markup.

We understand that PRs can sometimes be overwhelming, especially as the
reviews start coming in.  Please let us know if the reviews are unclear or
the recommended next step seems overly demanding, if you would like help in
addressing a reviewer's comments, or if you have been waiting too long to hear
back on your PR.
-->
",tohc1,closed,2021-02-26 21:32:16,,2021-03-03 20:01:55,tacaswell,2021-03-03 22:23:28,3,GUI/wx,v3.4.0,53
817658528,Backport PR #19589 on branch v3.4.x (Changes linestyle parameter of flierprops),Backport PR #19589: Changes linestyle parameter of flierprops,meeseeksmachine,closed,2021-02-26 20:57:34,,2021-02-27 17:46:00,dstansby,2021-03-01 23:47:59,0,Documentation,v3.4.0,53
817646530,code of conduct link 404s,"The link to the code of conduct at the top of https://matplotlib.org/devdocs/devel/contributing.html leads to https://matplotlib.org/CODE_OF_CONDUCT.md, which gives me a 404 error.",pseyfert,closed,2021-02-26 20:36:00,,2021-03-08 23:27:17,QuLogic,2021-03-08 23:27:17,5,"Documentation, Release critical",v3.4.0,53
817545177,plt.pause crashes GTK3Agg,"### Bug report
**Bug summary**

Calling [`plt.pause`](https://matplotlib.org/stable/api/_as_gen/matplotlib.pyplot.pause.html) inside a [callback](https://matplotlib.org/stable/api/_as_gen/matplotlib.pyplot.connect.html) crashes the GTK3Agg backend.

**Code for reproduction**
```python
import matplotlib as mpl
mpl.use('GTK3Agg')

import matplotlib.pyplot as plt

def do_nothing(event):
    print('In callback.')
    plt.pause(1)

fig = plt.figure()
fig.canvas.mpl_connect('resize_event', do_nothing)

ax = fig.add_subplot()
ax.plot(0, 0, 'o')
plt.show()
```

**Actual outcome**
```
In callback.
**
Gtk:ERROR:../../../../gtk/gtkwindow.c:10698:gtk_window_present_with_time: assertion failed: (gdk_window != NULL)
Bail out! Gtk:ERROR:../../../../gtk/gtkwindow.c:10698:gtk_window_present_with_time: assertion failed: (gdk_window != NULL)
Aborted (core dumped)
```

**Expected outcome**

The graph should be plotted. No crashes should occur.

**Matplotlib version**
  * Operating system: Linux Mint 20 (Ulyana)
  * Matplotlib version: 3.3.3 (installed via `pip install matplotlib`)
  * Matplotlib backend: GTK3Agg
  * Python version: 3.8.5
  * GTK version: 3.0

**More Details**

The problem disappears upon doing either of the following.
  * Using the TkAgg backend.
  * Removing the line `plt.pause(1)`.
",tfpf,closed,2021-02-26 17:44:16,,2021-03-10 21:49:00,QuLogic,2021-03-10 21:49:00,4,"GUI/gtk, status: has patch",,
817487170,Backport PR #19587 on branch v3.4.x (DOC: fix plot_date doc),Backport PR #19587: DOC: fix plot_date doc,meeseeksmachine,closed,2021-02-26 16:19:24,,2021-02-26 19:24:26,jklymak,2021-03-01 22:46:38,0,Documentation,v3.4.0,53
817398333,reverse order in which stackplot elements are added to axes,"## PR Summary

This will does not alter the order in which stackplot elements are show
on the axes, colors are used, labels are assigned, etc. It is only
(meant to) change the order in which handles are stored in the axes
object and thus in which legend entries appear by default. With this
change the top most entry in the legend should be the top most plotted
stack plot component.

In an example (derived from https://matplotlib.org/3.1.1/gallery/lines_bars_and_markers/stackplot_demo.html)

```py
import numpy as np
import matplotlib.pyplot as plt

x = [1, 2, 3, 4, 5]
y1 = [1, 1, 2, 3, 5]
y2 = [0, 4, 2, 6, 8]
y3 = [1, 3, 5, 7, 9]

y4 = [23, 23, 23, 24, 25]

y = np.vstack([y1, y2, y3])

labels = [""Fibonacci "", ""Evens"", ""Odds""]

fig, ax = plt.subplots()
ax.plot(x, y4, label=""staying above"")
ax.stackplot(x, y1, y2, y3, labels=labels)
ax.legend(loc='upper left')
plt.show()
```

In the example, the bottom most component of the stackplot is 'Fibonacci', yet by default 'Fibonacci' will be the top most entry in the legend. This reverse order causes mental overhead when reading a plot and becomes even more problematic for colorblind readers or once the color pallet is cycled through more than once.

I find the example in https://codeyarns.com/tech/2019-09-12-how-to-reverse-order-of-legend-in-matplotlib.html insufficient to address that inconvenience as the fix is needed for every usage and breaks in the example as I only want to affect the order of stackplot elements but the 'staying above' entry should remain where it is in the legend.

I enabled ""Allow edits by maintainers"".

## PR Checklist

<!-- Please mark any checkboxes that do not apply to this PR as [N/A]. -->

- [ ] Has pytest style unit tests (and `pytest` passes).
  no, and i couldn't make sense of the pytest error message (below). it doesn't even look related to my changes but rather the test setup on my machine.
- [x] Is [Flake 8](https://flake8.pycqa.org/en/latest/) compliant (run `flake8` on changed files to check).
- [n/a] New features are documented, with examples if plot related.
- [ ] Documentation is sphinx and numpydoc compliant (the docs should [build](https://matplotlib.org/devel/documenting_mpl.html#building-the-docs) without error).
  tbh didn't see if/where the current behaviour is documented in the first place
- [x] Conforms to Matplotlib style conventions (install `flake8-docstrings` and run `flake8 --docstring-convention=all`).
- [ ] New features have an entry in `doc/users/next_whats_new/` (follow instructions in README.rst there).
- [ ] API changes documented in `doc/api/next_api_changes/` (follow instructions in README.rst there).


#### pytest error

```
==================================================================================================================== test session starts ====================================================================================================================
platform linux -- Python 3.9.1+, pytest-6.0.2, py-1.10.0, pluggy-0.13.0
rootdir: /tmp/mpl/src/matplotlib, configfile: pytest.ini, testpaths: lib
plugins: flake8-1.0.6
collected 0 items / 1 error                                                                                                                                                                                                                                 

========================================================================================================================== ERRORS ===========================================================================================================================
_______________________________________________________________________________________________________________ ERROR collecting test session _______________________________________________________________________________________________________________
/usr/lib/python3.9/importlib/__init__.py:127: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
<frozen importlib._bootstrap>:1030: in _gcd_import
    ???
<frozen importlib._bootstrap>:1007: in _find_and_load
    ???
<frozen importlib._bootstrap>:972: in _find_and_load_unlocked
    ???
<frozen importlib._bootstrap>:228: in _call_with_frames_removed
    ???
<frozen importlib._bootstrap>:1030: in _gcd_import
    ???
<frozen importlib._bootstrap>:1007: in _find_and_load
    ???
<frozen importlib._bootstrap>:972: in _find_and_load_unlocked
    ???
<frozen importlib._bootstrap>:228: in _call_with_frames_removed
    ???
<frozen importlib._bootstrap>:1030: in _gcd_import
    ???
<frozen importlib._bootstrap>:1007: in _find_and_load
    ???
<frozen importlib._bootstrap>:986: in _find_and_load_unlocked
    ???
<frozen importlib._bootstrap>:680: in _load_unlocked
    ???
<frozen importlib._bootstrap_external>:790: in exec_module
    ???
<frozen importlib._bootstrap>:228: in _call_with_frames_removed
    ???
lib/matplotlib/__init__.py:107: in <module>
    from . import _api, cbook, docstring, rcsetup
lib/matplotlib/cbook/__init__.py:31: in <module>
    from matplotlib import _api, _c_internal_utils
E   ImportError: cannot import name '_c_internal_utils' from partially initialized module 'matplotlib' (most likely due to a circular import) (/tmp/mpl/src/matplotlib/lib/matplotlib/__init__.py)
================================================================================================================== short test summary info ==================================================================================================================
ERROR  - ImportError: cannot import name '_c_internal_utils' from partially initialized module 'matplotlib' (most likely due to a circular import) (/tmp/mpl/src/matplotlib/lib/matplotlib/__init__.py)
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
===================================================================================================================== 1 error in 0.18s ======================================================================================================================
```",pseyfert,open,2021-02-26 14:24:07,,,,2021-03-01 20:02:16,3,"API: changes, status: needs documentation, status: needs revision",v3.5.0,59
817260829,Can't download matplotlib with pip download,"<!--To help us understand and resolve your issue, please fill out the form to the best of your ability.-->
<!--You can feel free to delete the sections that do not apply.-->

### Bug report

**Bug summary**

Hi, I need to use matplotlib in a linux box that is not connected to the internet, so I normally download python pkgs elsewhere then move them to the vm and use pip with --no-index and --find-links to my local ""repo"" folder.  
However, there's no way to download matplotlib. I tried several combinations of platform, abi, etc, but in the end the command I use goes along the lines of the following: `python3 -m pip download --only-binary=:all: --platform linux_x86_64 matplotlib` 

**Code for reproduction**

In a box connected to the internet, try `python3 -m pip download --only-binary=:all: --platform linux_x86_64 matplotlib`

**Actual outcome**
```
Collecting matplotlib
Could not find a version that satisfies the requirement matplotlib (from versions: )
No matching distribution found for matplotlib
```
**Expected outcome**

Download the package wheel.

**Matplotlib version**
Tried the latest 3.3.4
  * Operating system: Tried to download from Linux, OSX, Windows. 
  * Matplotlib version (`import matplotlib; print(matplotlib.__version__)`): 3.3.4
  * Matplotlib backend (`print(matplotlib.get_backend())`): n/a
  * Python version: 3.6
  * Jupyter version (if applicable): n/a
  * Other libraries: n/a

<!--Please tell us how you installed matplotlib and python e.g., from source, pip, conda-->
<!--If you installed from conda, please specify which channel you used if not the default-->

Perhaps I'm doing something wrong? 
Thanks
",data-toaster,closed,2021-02-26 11:03:37,,2021-02-26 14:48:10,tacaswell,2021-02-26 20:32:54,3,,,
817216442,Changes linestyle parameter of flierprops,"## PR Summary

linestyle='none' [here](https://github.com/matplotlib/matplotlib/blob/a5ea869114fd67ee4db17b22e77a1e495f45336f/examples/statistics/boxplot.py#L63) has no effect in removing the marker edges, thus
it was changed to markeredgecolor='none' to achieve this outcome.

Solves #19427 

| With `linestyle='none'` (no effect)              | With `markeredgecolor='none'` (border removed)                     |
| ------------------------------ | ------------------------------------ |
| <img width=""170"" alt=""previous"" src=""https://user-images.githubusercontent.com/37598144/109292066-7b769900-7832-11eb-939a-8244e6402c71.png""> | <img width=""166"" alt=""current"" src=""https://user-images.githubusercontent.com/37598144/109292230-b8db2680-7832-11eb-871d-c39d89ca2311.png""> |



## PR Checklist

<!-- Please mark any checkboxes that do not apply to this PR as [N/A]. -->

- [ ] Has pytest style unit tests (and `pytest` passes).
- [ ] Is [Flake 8](https://flake8.pycqa.org/en/latest/) compliant (run `flake8` on changed files to check).
- [ ] New features are documented, with examples if plot related.
- [ ] Documentation is sphinx and numpydoc compliant (the docs should [build](https://matplotlib.org/devel/documenting_mpl.html#building-the-docs) without error).
- [ ] Conforms to Matplotlib style conventions (install `flake8-docstrings` and run `flake8 --docstring-convention=all`).
- [ ] New features have an entry in `doc/users/next_whats_new/` (follow instructions in README.rst there).
- [ ] API changes documented in `doc/api/next_api_changes/` (follow instructions in README.rst there).

<!--
Thank you so much for your PR!  To help us review your contribution, please
consider the following points:

- A development guide is available at https://matplotlib.org/devdocs/devel/index.html.

- Help with git and github is available at
  https://matplotlib.org/devel/gitwash/development_workflow.html.

- Do not create the PR out of master, but out of a separate branch.

- The PR title should summarize the changes, for example ""Raise ValueError on
  non-numeric input to set_xlim"".  Avoid non-descriptive titles such as
  ""Addresses issue #8576"".

- The summary should provide at least 1-2 sentences describing the pull request
  in detail (Why is this change required?  What problem does it solve?) and
  link to any relevant issues.

- If you are contributing fixes to docstrings, please pay attention to
  http://matplotlib.org/devel/documenting_mpl.html#formatting.  In particular,
  note the difference between using single backquotes, double backquotes, and
  asterisks in the markup.

We understand that PRs can sometimes be overwhelming, especially as the
reviews start coming in.  Please let us know if the reviews are unclear or
the recommended next step seems overly demanding, if you would like help in
addressing a reviewer's comments, or if you have been waiting too long to hear
back on your PR.
-->
",MihaiAnton,closed,2021-02-26 10:03:33,,2021-02-26 20:57:21,jklymak,2021-02-26 20:57:21,0,Documentation,v3.4.0,53
817058305,MNT: let bad rcParam keys pass,"## PR Summary
Close #19578

~I don't see why we would fail to import if the rcdefault and the rcParam dicts don't exactly match.  It definitely is a pain for developers who need to bisect.  But I frankly don't follow why we have all this machinery at all, so no doubt I am missing a subtlety...~

EDIT:  As pointed out by @timhoffm the issue is that `/matplotlibrc.template` can get out of sync with `rcdefaults._validators`.  
This is confusing because we were not checking against `/matplotlibrc.template`, but rather `/lib/matplotlib.mpl-data/matplotlibrc` which gets copied from  `/matplotlibrc.template` when `setup.py` is called.  

This PR moves the check from being done on `import matplotlib` to a test that is run by CI.

## PR Checklist

<!-- Please mark any checkboxes that do not apply to this PR as [N/A]. -->

- [ ] Has pytest style unit tests (and `pytest` passes).
- [ ] Is [Flake 8](https://flake8.pycqa.org/en/latest/) compliant (run `flake8` on changed files to check).
- [ ] New features are documented, with examples if plot related.
- [ ] Documentation is sphinx and numpydoc compliant (the docs should [build](https://matplotlib.org/devel/documenting_mpl.html#building-the-docs) without error).
- [ ] Conforms to Matplotlib style conventions (install `flake8-docstrings` and run `flake8 --docstring-convention=all`).
- [ ] New features have an entry in `doc/users/next_whats_new/` (follow instructions in README.rst there).
- [ ] API changes documented in `doc/api/next_api_changes/` (follow instructions in README.rst there).

<!--
Thank you so much for your PR!  To help us review your contribution, please
consider the following points:

- A development guide is available at https://matplotlib.org/devdocs/devel/index.html.

- Help with git and github is available at
  https://matplotlib.org/devel/gitwash/development_workflow.html.

- Do not create the PR out of master, but out of a separate branch.

- The PR title should summarize the changes, for example ""Raise ValueError on
  non-numeric input to set_xlim"".  Avoid non-descriptive titles such as
  ""Addresses issue #8576"".

- The summary should provide at least 1-2 sentences describing the pull request
  in detail (Why is this change required?  What problem does it solve?) and
  link to any relevant issues.

- If you are contributing fixes to docstrings, please pay attention to
  http://matplotlib.org/devel/documenting_mpl.html#formatting.  In particular,
  note the difference between using single backquotes, double backquotes, and
  asterisks in the markup.

We understand that PRs can sometimes be overwhelming, especially as the
reviews start coming in.  Please let us know if the reviews are unclear or
the recommended next step seems overly demanding, if you would like help in
addressing a reviewer's comments, or if you have been waiting too long to hear
back on your PR.
-->
",jklymak,closed,2021-02-26 05:40:10,,2021-03-02 15:52:51,jklymak,2021-03-16 22:14:47,21,Release critical,,
817020101,DOC: fix plot_date doc,"## PR Summary

Small doc change to plot_date so people realize they don't need to use it if they just pass bare dates in.  

## PR Checklist

<!-- Please mark any checkboxes that do not apply to this PR as [N/A]. -->

- [ ] Has pytest style unit tests (and `pytest` passes).
- [ ] Is [Flake 8](https://flake8.pycqa.org/en/latest/) compliant (run `flake8` on changed files to check).
- [ ] New features are documented, with examples if plot related.
- [ ] Documentation is sphinx and numpydoc compliant (the docs should [build](https://matplotlib.org/devel/documenting_mpl.html#building-the-docs) without error).
- [ ] Conforms to Matplotlib style conventions (install `flake8-docstrings` and run `flake8 --docstring-convention=all`).
- [ ] New features have an entry in `doc/users/next_whats_new/` (follow instructions in README.rst there).
- [ ] API changes documented in `doc/api/next_api_changes/` (follow instructions in README.rst there).

<!--
Thank you so much for your PR!  To help us review your contribution, please
consider the following points:

- A development guide is available at https://matplotlib.org/devdocs/devel/index.html.

- Help with git and github is available at
  https://matplotlib.org/devel/gitwash/development_workflow.html.

- Do not create the PR out of master, but out of a separate branch.

- The PR title should summarize the changes, for example ""Raise ValueError on
  non-numeric input to set_xlim"".  Avoid non-descriptive titles such as
  ""Addresses issue #8576"".

- The summary should provide at least 1-2 sentences describing the pull request
  in detail (Why is this change required?  What problem does it solve?) and
  link to any relevant issues.

- If you are contributing fixes to docstrings, please pay attention to
  http://matplotlib.org/devel/documenting_mpl.html#formatting.  In particular,
  note the difference between using single backquotes, double backquotes, and
  asterisks in the markup.

We understand that PRs can sometimes be overwhelming, especially as the
reviews start coming in.  Please let us know if the reviews are unclear or
the recommended next step seems overly demanding, if you would like help in
addressing a reviewer's comments, or if you have been waiting too long to hear
back on your PR.
-->
",jklymak,closed,2021-02-26 04:03:43,,2021-02-26 16:17:39,timhoffm,2021-02-26 16:33:38,1,Documentation,v3.4.0,53
816998232,DOC: more improve date example,"## PR Summary

Modernize and give some alternatives here.  I can't believe we actually have `fig.autofmt_xdate` as a thing still.  


## PR Checklist

<!-- Please mark any checkboxes that do not apply to this PR as [N/A]. -->

- [ ] Has pytest style unit tests (and `pytest` passes).
- [ ] Is [Flake 8](https://flake8.pycqa.org/en/latest/) compliant (run `flake8` on changed files to check).
- [ ] New features are documented, with examples if plot related.
- [ ] Documentation is sphinx and numpydoc compliant (the docs should [build](https://matplotlib.org/devel/documenting_mpl.html#building-the-docs) without error).
- [ ] Conforms to Matplotlib style conventions (install `flake8-docstrings` and run `flake8 --docstring-convention=all`).
- [ ] New features have an entry in `doc/users/next_whats_new/` (follow instructions in README.rst there).
- [ ] API changes documented in `doc/api/next_api_changes/` (follow instructions in README.rst there).

<!--
Thank you so much for your PR!  To help us review your contribution, please
consider the following points:

- A development guide is available at https://matplotlib.org/devdocs/devel/index.html.

- Help with git and github is available at
  https://matplotlib.org/devel/gitwash/development_workflow.html.

- Do not create the PR out of master, but out of a separate branch.

- The PR title should summarize the changes, for example ""Raise ValueError on
  non-numeric input to set_xlim"".  Avoid non-descriptive titles such as
  ""Addresses issue #8576"".

- The summary should provide at least 1-2 sentences describing the pull request
  in detail (Why is this change required?  What problem does it solve?) and
  link to any relevant issues.

- If you are contributing fixes to docstrings, please pay attention to
  http://matplotlib.org/devel/documenting_mpl.html#formatting.  In particular,
  note the difference between using single backquotes, double backquotes, and
  asterisks in the markup.

We understand that PRs can sometimes be overwhelming, especially as the
reviews start coming in.  Please let us know if the reviews are unclear or
the recommended next step seems overly demanding, if you would like help in
addressing a reviewer's comments, or if you have been waiting too long to hear
back on your PR.
-->
",jklymak,closed,2021-02-26 03:10:47,,2021-03-02 22:23:30,QuLogic,2021-03-02 22:25:45,2,Documentation,v3.5.0,59
816931147,Deprecate trivial helpers in style.core.,"STYLE_FILE_PATTERN is unused, the usual approach would be to check
whether a path's suffix matches STYLE_EXTENSION.

load_base_library is just a one-liner used in one place; hiding it
behind a function only obscures things.

iter_user_library is a combo of os.path.expanduser (which can be
inlined) and checking whether entries are existing directories (which is
unnecessary in update_user_library) as Path.glob helpfully returns empty
lists when globbing non-existing paths or into non-directories.

(Also note that none of these APIs are exported in `style/__init__.py`,
which is the real ""intended public"" API.)

## PR Summary

## PR Checklist

<!-- Please mark any checkboxes that do not apply to this PR as [N/A]. -->

- [ ] Has pytest style unit tests (and `pytest` passes).
- [ ] Is [Flake 8](https://flake8.pycqa.org/en/latest/) compliant (run `flake8` on changed files to check).
- [ ] New features are documented, with examples if plot related.
- [ ] Documentation is sphinx and numpydoc compliant (the docs should [build](https://matplotlib.org/devel/documenting_mpl.html#building-the-docs) without error).
- [ ] Conforms to Matplotlib style conventions (install `flake8-docstrings` and run `flake8 --docstring-convention=all`).
- [ ] New features have an entry in `doc/users/next_whats_new/` (follow instructions in README.rst there).
- [ ] API changes documented in `doc/api/next_api_changes/` (follow instructions in README.rst there).

<!--
Thank you so much for your PR!  To help us review your contribution, please
consider the following points:

- A development guide is available at https://matplotlib.org/devdocs/devel/index.html.

- Help with git and github is available at
  https://matplotlib.org/devel/gitwash/development_workflow.html.

- Do not create the PR out of master, but out of a separate branch.

- The PR title should summarize the changes, for example ""Raise ValueError on
  non-numeric input to set_xlim"".  Avoid non-descriptive titles such as
  ""Addresses issue #8576"".

- The summary should provide at least 1-2 sentences describing the pull request
  in detail (Why is this change required?  What problem does it solve?) and
  link to any relevant issues.

- If you are contributing fixes to docstrings, please pay attention to
  http://matplotlib.org/devel/documenting_mpl.html#formatting.  In particular,
  note the difference between using single backquotes, double backquotes, and
  asterisks in the markup.

We understand that PRs can sometimes be overwhelming, especially as the
reviews start coming in.  Please let us know if the reviews are unclear or
the recommended next step seems overly demanding, if you would like help in
addressing a reviewer's comments, or if you have been waiting too long to hear
back on your PR.
-->
",anntzer,closed,2021-02-26 00:58:47,,2021-02-26 23:02:43,timhoffm,2021-02-27 09:32:35,0,"Maintenance, topic: styles",v3.5.0,59
816894113,Simplify/speedup type1 font embedding,"### Describe the issue

(I'm mostly writing this up as a possible idea for @aitikgupta to explore -- but if there's another font junkie interested, please have a go).

**Summary**

The type1font module serves a single purpose: embedding fonts shipped with tex (e.g., cmr10.pfb is computer modern roman), which are in the ""type1"" format, into pdf output, when using usetex.  (In theory, we could also support embedding such fonts in type1 format if someone draws non-mathtext text (`fig.text(""foo"", font=Path(""/path/to/cmr10.pfb"")`), but we don't do that, we always convert things to either type3 or type42.)

Very briefly, embedding a type1 font in a pdf file is ""relatively"" simple: the font's on-disk representation can be copied mostly ""as is"", except that we need to provide some additional metadata about the font.  Currently, we extract that metadata by actually parsing the font (as done in the type1font module).  But in fact, nearly all the relevant metadata is also available from FreeType (via FT_Get_PS_Font_Info and friends), so we could instead rely on FreeType to get the metadata and then dump the font ""as is"", which should be both faster (as the parser would now be in C) and simpler (less parsing work on our side).

Actually, we'd still need to do a little bit of parsing (to get the ""Length1""/""Length2"" entries documented in the ""Additional entries in an embedded font stream dictionary"" table of the pdf spec), as well as to modify the FontMatrix in the (rare) case where pdftex.map specify SlantFont or ExtendFont modifications (see the pdf user manual), but these ""should""(?) be doable with a much less general, and thus faster, parser.

The end result would be speedup in type1 font embedding for pdf output (i.e., for pdf+usetex) and less code in the type1font module.
",anntzer,open,2021-02-25 23:32:27,,,,2021-02-25 23:32:27,0,"Maintenance, backend/pdf, topic: text/fonts, topic: text/usetex",,
816873968,FIX: check for a set during color conversion,"
Closes #19544 using @anntzer suggested fix....
",jklymak,closed,2021-02-25 22:54:48,,2021-03-01 23:29:36,QuLogic,2021-03-01 23:47:22,2,"Release critical, topic: color/color & colormaps",v3.4.0,53
816780588,Add kerning to single-byte strings in PDFs,"## PR Summary

PR https://github.com/matplotlib/matplotlib/pull/18517 adds kerning to strings in PDFs if the string contains multi-byte chars. In case of strings consisting only of single-byte chars, the PDF output does not contains kerning (PDF operator `Tj`). This PR adds kerning to the single-byte case and adds the string using the `TJ` operator. See also https://github.com/matplotlib/matplotlib/issues/19581.

## PR Checklist

<!-- Please mark any checkboxes that do not apply to this PR as [N/A]. -->

- [x] Has pytest style unit tests (and `pytest` passes).
- [x] Is [Flake 8](https://flake8.pycqa.org/en/latest/) compliant (run `flake8` on changed files to check).
- [ ] New features are documented, with examples if plot related.
- [ ] Documentation is sphinx and numpydoc compliant (the docs should [build](https://matplotlib.org/devel/documenting_mpl.html#building-the-docs) without error).
- [ ] Conforms to Matplotlib style conventions (install `flake8-docstrings` and run `flake8 --docstring-convention=all`).
- [ ] New features have an entry in `doc/users/next_whats_new/` (follow instructions in README.rst there).
- [ ] API changes documented in `doc/api/next_api_changes/` (follow instructions in README.rst there).",sauerburger,closed,2021-02-25 20:26:30,,2021-03-04 00:37:22,QuLogic,2021-03-04 00:37:22,3,"backend/pdf, topic: text",v3.4.0,53
816770335,Missing kerning for single-byte strings in PDF,"### Bug report

**Bug summary**
Kerning is not applied in the PDF output of pure single-byte strings which leads to inconsistencies between PDF and other output formats.

**Code for reproduction**
```python
import matplotlib.pyplot as plt

fig, ax = plt.subplots()
ax.text(0.1, 0.5, ""ATL"", size=120)
fig.savefig(""atl.pdf"")
fig.savefig(""atl.png"", dpi=300)
```

**Actual outcome**
![text4900](https://user-images.githubusercontent.com/12832470/109210666-6e639680-77ad-11eb-87a8-a668693c2f8b.png)

**Expected outcome**
I expected that the spacing between `A` and `T` is consistent between both formats. Besides this minor visual issues, I use `get_window_extent()` to place a second text item in bold next to the first one. The space between the two texts varies significantly between output formats. `get_window_extent()` considers the kerning information, so the space looks correct in PNG but is usually too small in PDF files.

The issue is related to https://github.com/matplotlib/matplotlib/issues/18282. Here the same issue was fixed for strings with multi-byte chars. I don't see the changes from https://github.com/matplotlib/matplotlib/issues/18282 in version 3.3.4, but they will not effect the single-byte string case.

Unaware of https://github.com/matplotlib/matplotlib/issues/18282, I've implemented a fix for the single-byte case. I will open a PR, but you might have other ideas on how to implementation a fix.

**Matplotlib version**
  * Operating system: Ubuntu 16.04
  * Matplotlib version: 3.3.4
  * Matplotlib backend: TkAgg (but actually PDF?)
  * Python version: 3.7.5
  * Font: DejaVuSans Type 3

I've installed matplotlib in a virtualenv with pip.
",sauerburger,closed,2021-02-25 20:19:33,,2021-03-04 01:46:01,QuLogic,2021-03-04 01:46:01,1,"backend/pdf, topic: text",v3.4.0,53
816753787,Backport PR #19456 on branch v3.4.x (Doc implement reredirects),Backport PR #19456: Doc implement reredirects,meeseeksmachine,closed,2021-02-25 20:06:55,,2021-02-25 23:16:47,tacaswell,2021-03-01 22:46:09,0,Documentation,v3.4.0,53
816708364,Backport PR #19567 on branch v3.4.x (DOC: fix typos),Backport PR #19567: DOC: fix typos,meeseeksmachine,closed,2021-02-25 18:59:32,,2021-02-25 23:16:35,tacaswell,2021-03-01 22:45:51,0,Documentation,v3.4.0,53
816571480,bisect very hard with rcParam changes,"At some point recently we changed rcParam handling so that it makes `git bisect` require that matplotlib be rebuilt every time a bisect step crosses a change in the rcParam list.  This seems a needless pain, and we should just warn.  

```
  import matplotlib as mpl
Traceback (most recent call last):
  File ""/Users/jklymak/matplotlib/testlisted.py"", line 1, in <module>
    import matplotlib as mpl
  File ""/Users/jklymak/matplotlib/lib/matplotlib/__init__.py"", line 833, in <module>
    defaultParams = rcsetup.defaultParams = {
  File ""/Users/jklymak/matplotlib/lib/matplotlib/__init__.py"", line 836, in <dictcomp>
    rcParamsDefault[key]),
  File ""/Users/jklymak/matplotlib/lib/matplotlib/__init__.py"", line 621, in __getitem__
    return dict.__getitem__(self, key)
KeyError: 'axes.zmargin'
```",jklymak,open,2021-02-25 16:01:18,,,,2021-02-25 23:27:35,1,,,
816484333,"Fix ""return""->""enter"" mapping in key names.","All backends previously normalized both the return key and the (numpad)
enter to ""enter"" (see e.g. the presence of two ""enter"" entries in the
old FigureCanvas{GTK3,Tk}.keyvald . When revamping the gtk and tk key
names lookup I accidentally normalized both to ""return"" instead (#17791, #18693),
so fix that.

Test with
```
gcf().canvas.mpl_connect(""key_press_event"", lambda e: print(e.key))
```

## PR Summary

## PR Checklist

<!-- Please mark any checkboxes that do not apply to this PR as [N/A]. -->

- [ ] Has pytest style unit tests (and `pytest` passes).
- [ ] Is [Flake 8](https://flake8.pycqa.org/en/latest/) compliant (run `flake8` on changed files to check).
- [ ] New features are documented, with examples if plot related.
- [ ] Documentation is sphinx and numpydoc compliant (the docs should [build](https://matplotlib.org/devel/documenting_mpl.html#building-the-docs) without error).
- [ ] Conforms to Matplotlib style conventions (install `flake8-docstrings` and run `flake8 --docstring-convention=all`).
- [ ] New features have an entry in `doc/users/next_whats_new/` (follow instructions in README.rst there).
- [ ] API changes documented in `doc/api/next_api_changes/` (follow instructions in README.rst there).

<!--
Thank you so much for your PR!  To help us review your contribution, please
consider the following points:

- A development guide is available at https://matplotlib.org/devdocs/devel/index.html.

- Help with git and github is available at
  https://matplotlib.org/devel/gitwash/development_workflow.html.

- Do not create the PR out of master, but out of a separate branch.

- The PR title should summarize the changes, for example ""Raise ValueError on
  non-numeric input to set_xlim"".  Avoid non-descriptive titles such as
  ""Addresses issue #8576"".

- The summary should provide at least 1-2 sentences describing the pull request
  in detail (Why is this change required?  What problem does it solve?) and
  link to any relevant issues.

- If you are contributing fixes to docstrings, please pay attention to
  http://matplotlib.org/devel/documenting_mpl.html#formatting.  In particular,
  note the difference between using single backquotes, double backquotes, and
  asterisks in the markup.

We understand that PRs can sometimes be overwhelming, especially as the
reviews start coming in.  Please let us know if the reviews are unclear or
the recommended next step seems overly demanding, if you would like help in
addressing a reviewer's comments, or if you have been waiting too long to hear
back on your PR.
-->
",anntzer,closed,2021-02-25 14:24:21,,2021-02-26 21:08:21,jklymak,2021-03-01 23:47:02,1,"GUI/gtk, GUI/tk, Release critical",v3.4.0,53
815935246,duplicate pick events firing,"### Bug report

**duplicate pick events occurring in 3.4.rc1**

In MNE-Python, our CIs that test against 3.4.rc1 are failing, because pick events are getting fired twice for every time an artist is picked (this is not happening on 3.3.4). It's happening in a very complicated interactive figure, and I haven't yet managed to work up an MWE that doesn't depend on MNE-Python.  But, I've used `git bisect` to isolate the first test failure to matplotlib commit 6d79e6eddfe14a10141bab3ce421b2b43bc9a57a.  I will continue trying to further isolate this, but in the meantime if anyone is familiar with MPL changes in the last 4 months, I'd be happy to hear ideas about what might be going on here.

**Code for reproduction**

This code mirrors what we're doing but is too minimal, in that it doesn't yield doubled pick events: 

```python
import matplotlib.pyplot as plt
from matplotlib.text import Text


def pick_handler(event):
    if isinstance(event.artist, Text):
        print(""PICKED"")


fig, ax = plt.subplots()
_ = ax.plot((0, 1), (0, 1))
for lab in ax.get_yticklabels():
    lab.set_picker(True)

fig.canvas.mpl_connect('pick_event', pick_handler)
```

This code reproduces, but with `mne` dependency:
```python
import numpy as np
import matplotlib.pyplot as plt
import mne
# make fake data
data = np.random.standard_normal((2, 100))
info = mne.create_info(['ch1', 'ch2'], 1000)
raw = mne.io.RawArray(data, info)
# plot it
fig = raw.plot()
```
In the resulting figure, clicking on one of the yticklabels (the channel names) is supposed to mark the channel as bad (which among other effects, will turn it light grey).  This doesn't happen because the pick event is fired twice, effectively marking and then unmarking the bad channel before a redraw can happen (I have confirmed this by simply inserting a `print` statement in the pick handler; it prints twice for each click).  There is nothing wrong with the code that marks bad channels; you can do it by clicking on the channel trace itself (which responds to `button_press_event` instead of `pick_event`, for complicated reasons).


**Matplotlib version**
<!--Please specify your platform and versions of the relevant libraries you are using:-->
  * Operating system: 
  * Matplotlib version (`import matplotlib; print(matplotlib.__version__)`): 3.3.2.post1516+g6d79e6edd
  * Matplotlib backend (`print(matplotlib.get_backend())`): Qt5Agg
  * Python version: 3.8.8
  * Jupyter version (if applicable): 
  * Other libraries: mne: current `main` (0.23.dev0)

matplotlib installed via `pip install -e .` from a git clone.",drammock,closed,2021-02-24 23:39:39,,2021-03-06 03:02:43,QuLogic,2021-03-06 03:02:43,6,Release critical,v3.4.0,53
815916715,Deprecate Text.get_prop_tup.,"get_prop_tup was intended as a general caching mechanism for reusing
Text layouts, but it ended up only being used by _get_layout (which
backends have to call anyways to handle multiline text).  Note that in
fact, if we really wanted to make backends use that info for caching,
whether e.g. the text color needs to be taken into account would likely
depend on the backend's own caching mechanism.

Replace it by a private `_get_layout_cache_key`, which does not take
color into account (color doesn't affect layout), which will later allow
removing a color-must-be-hashable check.

## PR Summary

## PR Checklist

<!-- Please mark any checkboxes that do not apply to this PR as [N/A]. -->

- [ ] Has pytest style unit tests (and `pytest` passes).
- [ ] Is [Flake 8](https://flake8.pycqa.org/en/latest/) compliant (run `flake8` on changed files to check).
- [ ] New features are documented, with examples if plot related.
- [ ] Documentation is sphinx and numpydoc compliant (the docs should [build](https://matplotlib.org/devel/documenting_mpl.html#building-the-docs) without error).
- [ ] Conforms to Matplotlib style conventions (install `flake8-docstrings` and run `flake8 --docstring-convention=all`).
- [ ] New features have an entry in `doc/users/next_whats_new/` (follow instructions in README.rst there).
- [ ] API changes documented in `doc/api/next_api_changes/` (follow instructions in README.rst there).

<!--
Thank you so much for your PR!  To help us review your contribution, please
consider the following points:

- A development guide is available at https://matplotlib.org/devdocs/devel/index.html.

- Help with git and github is available at
  https://matplotlib.org/devel/gitwash/development_workflow.html.

- Do not create the PR out of master, but out of a separate branch.

- The PR title should summarize the changes, for example ""Raise ValueError on
  non-numeric input to set_xlim"".  Avoid non-descriptive titles such as
  ""Addresses issue #8576"".

- The summary should provide at least 1-2 sentences describing the pull request
  in detail (Why is this change required?  What problem does it solve?) and
  link to any relevant issues.

- If you are contributing fixes to docstrings, please pay attention to
  http://matplotlib.org/devel/documenting_mpl.html#formatting.  In particular,
  note the difference between using single backquotes, double backquotes, and
  asterisks in the markup.

We understand that PRs can sometimes be overwhelming, especially as the
reviews start coming in.  Please let us know if the reviews are unclear or
the recommended next step seems overly demanding, if you would like help in
addressing a reviewer's comments, or if you have been waiting too long to hear
back on your PR.
-->
",anntzer,closed,2021-02-24 23:01:28,,2021-04-01 22:11:58,QuLogic,2021-04-01 23:22:13,0,topic: text,v3.5.0,59
815877228,plt.hist() fails with TensorFlow Numpy emulation,"<!--To help us understand and resolve your issue, please fill out the form to the best of your ability.-->
<!--You can feel free to delete the sections that do not apply.-->

### Bug report

**Bug summary**

Generating `np.random.randn(1000)` values, visualizing them with `plt.hist()`. Works fine with Numpy.

When I replace Numpy with tensorflow.experimental.numpy, Matplotlib 3.3.4 fails to display the histogram correctly. Matplotlib 3.2.2 works fine.

**Code for reproduction**

```python
import matplotlib.pyplot as plt
import numpy as np
import tensorflow as tf
import tensorflow.experimental.numpy as tnp

# bad image
labels1 = 15 + 2 * tnp.random.randn(1000)
_ = plt.hist(labels1)

# good image
labels2 = 15 + 2 * np.random.randn(1000)
_ = plt.hist(labels2)
```

**Actual outcome**

![np-bad](https://user-images.githubusercontent.com/901867/109069736-7b499280-76a6-11eb-87c4-2880aaf759f5.png)

**Expected outcome**

![np-good](https://user-images.githubusercontent.com/901867/109069769-843a6400-76a6-11eb-9d2e-149fc615c583.png)

**Matplotlib version**
<!--Please specify your platform and versions of the relevant libraries you are using:-->
  * Operating system: Windows 10
  * Matplotlib version (`import matplotlib; print(matplotlib.__version__)`): 3.3.4
  * Matplotlib backend (`print(matplotlib.get_backend())`): module://ipykernel.pylab.backend_inline
  * Python version: 3.8.7
  * Jupyter version (if applicable): see below
  * Other libraries: see below

TensorFlow 2.4.1

```
jupyter --version
jupyter core     : 4.7.0
jupyter-notebook : 6.1.6
qtconsole        : 5.0.1
ipython          : 7.20.0
ipykernel        : 5.4.2
jupyter client   : 6.1.7
jupyter lab      : not installed
nbconvert        : 6.0.7
ipywidgets       : 7.6.3
nbformat         : 5.0.8
traitlets        : 5.0.5
```

Python installed from python.org as an exe installer. Everything else is `pip install --user`

Bug opened with TensorFlow on this same issue:

https://github.com/tensorflow/tensorflow/issues/46274",FlorinAndrei,open,2021-02-24 21:52:19,,,jklymak,2021-03-30 00:33:58,11,"Good first issue, status: downstream fix required",v3.4.2,63
815857368,create set_offsets3d for PathCollection3d,"## PR Summary
Add `set` and `get_offsets3d` to the PatchCollection3d object. The casting back to numpy array and transpose in the `get` method is for consistency with what the 2d version that returns a numpy array with shape (N, 2).

Does this need an example or can that be left to https://github.com/matplotlib/matplotlib/issues/19520?

## PR Checklist

<!-- Please mark any checkboxes that do not apply to this PR as [N/A]. -->

- [x] Has pytest style unit tests (and `pytest` passes).
- [x] Is [Flake 8](https://flake8.pycqa.org/en/latest/) compliant (run `flake8` on changed files to check).
- [ ] New features are documented, with examples if plot related.
- [ ] Documentation is sphinx and numpydoc compliant (the docs should [build](https://matplotlib.org/devel/documenting_mpl.html#building-the-docs) without error).
- [x] Conforms to Matplotlib style conventions (install `flake8-docstrings` and run `flake8 --docstring-convention=all`).
- [ ] New features have an entry in `doc/users/next_whats_new/` (follow instructions in README.rst there).
- [ ] API changes documented in `doc/api/next_api_changes/` (follow instructions in README.rst there).

<!--
Thank you so much for your PR!  To help us review your contribution, please
consider the following points:

- A development guide is available at https://matplotlib.org/devdocs/devel/index.html.

- Help with git and github is available at
  https://matplotlib.org/devel/gitwash/development_workflow.html.

- Do not create the PR out of master, but out of a separate branch.

- The PR title should summarize the changes, for example ""Raise ValueError on
  non-numeric input to set_xlim"".  Avoid non-descriptive titles such as
  ""Addresses issue #8576"".

- The summary should provide at least 1-2 sentences describing the pull request
  in detail (Why is this change required?  What problem does it solve?) and
  link to any relevant issues.

- If you are contributing fixes to docstrings, please pay attention to
  http://matplotlib.org/devel/documenting_mpl.html#formatting.  In particular,
  note the difference between using single backquotes, double backquotes, and
  asterisks in the markup.

We understand that PRs can sometimes be overwhelming, especially as the
reviews start coming in.  Please let us know if the reviews are unclear or
the recommended next step seems overly demanding, if you would like help in
addressing a reviewer's comments, or if you have been waiting too long to hear
back on your PR.
-->
",ianhi,open,2021-02-24 21:19:55,,,,2021-03-10 18:41:45,2,"status: needs comment/discussion, topic: mplot3d",,
815832915,add docstring for set_3d_properties for PatchCollection3d,"

## PR Summary
1. Added a docstring
2. Gave `zdir` a default to be consistent with the rest of the file.

## PR Checklist

<!-- Please mark any checkboxes that do not apply to this PR as [N/A]. -->


- [x] Is [Flake 8](https://flake8.pycqa.org/en/latest/) compliant (run `flake8` on changed files to check).
- [ ] Documentation is sphinx and numpydoc compliant (the docs should [build](https://matplotlib.org/devel/documenting_mpl.html#building-the-docs) without error).
- [x] Conforms to Matplotlib style conventions (install `flake8-docstrings` and run `flake8 --docstring-convention=all`).


<!--
Thank you so much for your PR!  To help us review your contribution, please
consider the following points:

- A development guide is available at https://matplotlib.org/devdocs/devel/index.html.

- Help with git and github is available at
  https://matplotlib.org/devel/gitwash/development_workflow.html.

- Do not create the PR out of master, but out of a separate branch.

- The PR title should summarize the changes, for example ""Raise ValueError on
  non-numeric input to set_xlim"".  Avoid non-descriptive titles such as
  ""Addresses issue #8576"".

- The summary should provide at least 1-2 sentences describing the pull request
  in detail (Why is this change required?  What problem does it solve?) and
  link to any relevant issues.

- If you are contributing fixes to docstrings, please pay attention to
  http://matplotlib.org/devel/documenting_mpl.html#formatting.  In particular,
  note the difference between using single backquotes, double backquotes, and
  asterisks in the markup.

We understand that PRs can sometimes be overwhelming, especially as the
reviews start coming in.  Please let us know if the reviews are unclear or
the recommended next step seems overly demanding, if you would like help in
addressing a reviewer's comments, or if you have been waiting too long to hear
back on your PR.
-->
",ianhi,open,2021-02-24 20:41:46,,,,2021-03-14 00:41:35,7,topic: mplot3d,,
815769472,Fail early when setting Text color to a non-colorlike.,"Otherwise, the error is only raised when drawing the artist, which is
always confusing.  Also add a general `_check_color_like` mechanism and
use it for Line2D as well, instead of relying on a slightly strange
`if not is_color_like(): check_in_list(get_named_colors_mapping())`
call where the check_in_list *always* fails.

Closes https://github.com/matplotlib/matplotlib/issues/19569 (well, likely the OP was confused about other stuff, but this should at least bring the error message closer to the relevant place).

## PR Summary

## PR Checklist

<!-- Please mark any checkboxes that do not apply to this PR as [N/A]. -->

- [ ] Has pytest style unit tests (and `pytest` passes).
- [ ] Is [Flake 8](https://flake8.pycqa.org/en/latest/) compliant (run `flake8` on changed files to check).
- [ ] New features are documented, with examples if plot related.
- [ ] Documentation is sphinx and numpydoc compliant (the docs should [build](https://matplotlib.org/devel/documenting_mpl.html#building-the-docs) without error).
- [ ] Conforms to Matplotlib style conventions (install `flake8-docstrings` and run `flake8 --docstring-convention=all`).
- [ ] New features have an entry in `doc/users/next_whats_new/` (follow instructions in README.rst there).
- [ ] API changes documented in `doc/api/next_api_changes/` (follow instructions in README.rst there).

<!--
Thank you so much for your PR!  To help us review your contribution, please
consider the following points:

- A development guide is available at https://matplotlib.org/devdocs/devel/index.html.

- Help with git and github is available at
  https://matplotlib.org/devel/gitwash/development_workflow.html.

- Do not create the PR out of master, but out of a separate branch.

- The PR title should summarize the changes, for example ""Raise ValueError on
  non-numeric input to set_xlim"".  Avoid non-descriptive titles such as
  ""Addresses issue #8576"".

- The summary should provide at least 1-2 sentences describing the pull request
  in detail (Why is this change required?  What problem does it solve?) and
  link to any relevant issues.

- If you are contributing fixes to docstrings, please pay attention to
  http://matplotlib.org/devel/documenting_mpl.html#formatting.  In particular,
  note the difference between using single backquotes, double backquotes, and
  asterisks in the markup.

We understand that PRs can sometimes be overwhelming, especially as the
reviews start coming in.  Please let us know if the reviews are unclear or
the recommended next step seems overly demanding, if you would like help in
addressing a reviewer's comments, or if you have been waiting too long to hear
back on your PR.
-->
",anntzer,closed,2021-02-24 19:18:04,,2021-02-27 17:49:08,timhoffm,2021-03-01 23:48:47,5,"API: argument checking, topic: text",v3.4.0,53
815768575,Dedupe part of error message in check_in_list.,"## PR Summary

## PR Checklist

<!-- Please mark any checkboxes that do not apply to this PR as [N/A]. -->

- [ ] Has pytest style unit tests (and `pytest` passes).
- [ ] Is [Flake 8](https://flake8.pycqa.org/en/latest/) compliant (run `flake8` on changed files to check).
- [ ] New features are documented, with examples if plot related.
- [ ] Documentation is sphinx and numpydoc compliant (the docs should [build](https://matplotlib.org/devel/documenting_mpl.html#building-the-docs) without error).
- [ ] Conforms to Matplotlib style conventions (install `flake8-docstrings` and run `flake8 --docstring-convention=all`).
- [ ] New features have an entry in `doc/users/next_whats_new/` (follow instructions in README.rst there).
- [ ] API changes documented in `doc/api/next_api_changes/` (follow instructions in README.rst there).

<!--
Thank you so much for your PR!  To help us review your contribution, please
consider the following points:

- A development guide is available at https://matplotlib.org/devdocs/devel/index.html.

- Help with git and github is available at
  https://matplotlib.org/devel/gitwash/development_workflow.html.

- Do not create the PR out of master, but out of a separate branch.

- The PR title should summarize the changes, for example ""Raise ValueError on
  non-numeric input to set_xlim"".  Avoid non-descriptive titles such as
  ""Addresses issue #8576"".

- The summary should provide at least 1-2 sentences describing the pull request
  in detail (Why is this change required?  What problem does it solve?) and
  link to any relevant issues.

- If you are contributing fixes to docstrings, please pay attention to
  http://matplotlib.org/devel/documenting_mpl.html#formatting.  In particular,
  note the difference between using single backquotes, double backquotes, and
  asterisks in the markup.

We understand that PRs can sometimes be overwhelming, especially as the
reviews start coming in.  Please let us know if the reviews are unclear or
the recommended next step seems overly demanding, if you would like help in
addressing a reviewer's comments, or if you have been waiting too long to hear
back on your PR.
-->
",anntzer,closed,2021-02-24 19:16:43,,2021-02-27 23:48:23,timhoffm,2021-02-28 10:17:44,0,Maintenance,v3.5.0,59
815732105,ValueError: Invalid RGBA argument: 'G',"<!--To help us understand and resolve your issue, please fill out the form to the best of your ability.-->
<!--You can feel free to delete the sections that do not apply.-->

### Bug report

**Bug summary**

<!--A short 1-2 sentences that succinctly describes the bug-->

**Code for reproduction**

<!--A minimum code snippet required to reproduce the bug.
Please make sure to minimize the number of dependencies required, and provide
any necessary plotted data.
Avoid using threads, as Matplotlib is (explicitly) not thread-safe.-->

```python
# Paste your code here
#
#

 318                  bbox=dict(facecolor='none', edgecolor='0.82'), fontweight='bold')
    319
--> 320       plt.savefig(path_main+ '\Graph_cBSi_Para.png', bbox_inches='tight', dpi = 200)
    321
    322       ################ploting color map for S21 data

```

**Actual outcome**

c:\program files\python38\lib\site-packages\matplotlib\pyplot.py in savefig(*args, **kwargs)
    857 def savefig(*args, **kwargs):
    858     fig = gcf()
--> 859     res = fig.savefig(*args, **kwargs)
    860     fig.canvas.draw_idle()   # need this if 'transparent=True' to reset colors
    861     return res

c:\program files\python38\lib\site-packages\matplotlib\figure.py in savefig(self, fname, transparent, **kwargs)
   2309                 patch.set_edgecolor('none')
   2310
-> 2311         self.canvas.print_figure(fname, **kwargs)
   2312
   2313         if transparent:

c:\program files\python38\lib\site-packages\matplotlib\backends\backend_qt5agg.py in print_figure(self, *args, **kwargs)
     79
     80     def print_figure(self, *args, **kwargs):
---> 81         super().print_figure(*args, **kwargs)
     82         self.draw()
     83

c:\program files\python38\lib\site-packages\matplotlib\backend_bases.py in print_figure(self, filename, dpi, facecolor, edgecolor, orientation, format, bbox_inches, pad_inches, bbox_extra_artists, backend, **kwargs)
   2191                            else suppress())
   2192                     with ctx:
-> 2193                         self.figure.draw(renderer)
   2194
   2195                     bbox_inches = self.figure.get_tightbbox(

c:\program files\python38\lib\site-packages\matplotlib\artist.py in draw_wrapper(artist, renderer, *args, **kwargs)
     39                 renderer.start_filter()
     40
---> 41             return draw(artist, renderer, *args, **kwargs)
     42         finally:
     43             if artist.get_agg_filter() is not None:

c:\program files\python38\lib\site-packages\matplotlib\figure.py in draw(self, renderer)
   1861
   1862             self.patch.draw(renderer)
-> 1863             mimage._draw_list_compositing_images(
   1864                 renderer, self, artists, self.suppressComposite)
   1865

c:\program files\python38\lib\site-packages\matplotlib\image.py in _draw_list_compositing_images(renderer, parent, artists, suppress_composite)
    129     if not_composite or not has_images:
    130         for a in artists:
--> 131             a.draw(renderer)
    132     else:
    133         # Composite any adjacent images together

c:\program files\python38\lib\site-packages\matplotlib\artist.py in draw_wrapper(artist, renderer, *args, **kwargs)
     39                 renderer.start_filter()
     40
---> 41             return draw(artist, renderer, *args, **kwargs)
     42         finally:
     43             if artist.get_agg_filter() is not None:

c:\program files\python38\lib\site-packages\matplotlib\cbook\deprecation.py in wrapper(*inner_args, **inner_kwargs)
    409                          else deprecation_addendum,
    410                 **kwargs)
--> 411         return func(*inner_args, **inner_kwargs)
    412
    413     return wrapper

c:\program files\python38\lib\site-packages\matplotlib\axes\_base.py in draw(self, renderer, inframe)
   2745             renderer.stop_rasterizing()
   2746
-> 2747         mimage._draw_list_compositing_images(renderer, self, artists)
   2748
   2749         renderer.close_group('axes')

c:\program files\python38\lib\site-packages\matplotlib\image.py in _draw_list_compositing_images(renderer, parent, artists, suppress_composite)
    129     if not_composite or not has_images:
    130         for a in artists:
--> 131             a.draw(renderer)
    132     else:
    133         # Composite any adjacent images together

c:\program files\python38\lib\site-packages\matplotlib\artist.py in draw_wrapper(artist, renderer, *args, **kwargs)
     39                 renderer.start_filter()
     40
---> 41             return draw(artist, renderer, *args, **kwargs)
     42         finally:
     43             if artist.get_agg_filter() is not None:

c:\program files\python38\lib\site-packages\matplotlib\axis.py in draw(self, renderer, *args, **kwargs)
   1176         self._update_label_position(renderer)
   1177
-> 1178         self.label.draw(renderer)
   1179
   1180         self._update_offset_text_position(ticklabelBoxes, ticklabelBoxes2)

c:\program files\python38\lib\site-packages\matplotlib\artist.py in draw_wrapper(artist, renderer, *args, **kwargs)
     39                 renderer.start_filter()
     40
---> 41             return draw(artist, renderer, *args, **kwargs)
     42         finally:
     43             if artist.get_agg_filter() is not None:

c:\program files\python38\lib\site-packages\matplotlib\text.py in draw(self, renderer)
    697
    698             gc = renderer.new_gc()
--> 699             gc.set_foreground(textobj.get_color())
    700             gc.set_alpha(textobj.get_alpha())
    701             gc.set_url(textobj._url)

c:\program files\python38\lib\site-packages\matplotlib\backend_bases.py in set_foreground(self, fg, isRGBA)
    953             self._rgb = fg
    954         else:
--> 955             self._rgb = colors.to_rgba(fg)
    956
    957     def set_joinstyle(self, js):

c:\program files\python38\lib\site-packages\matplotlib\colors.py in to_rgba(c, alpha)
    187         rgba = None
    188     if rgba is None:  # Suppress exception chaining of cache lookup failure.
--> 189         rgba = _to_rgba_no_colorcycle(c, alpha)
    190         try:
    191             _colors_full_map.cache[c, alpha] = rgba

c:\program files\python38\lib\site-packages\matplotlib\colors.py in _to_rgba_no_colorcycle(c, alpha)
    258                     f""Value must be within 0-1 range"")
    259             return c, c, c, alpha if alpha is not None else 1.
--> 260         raise ValueError(f""Invalid RGBA argument: {orig_c!r}"")
    261     # tuple color.
    262     if not np.iterable(c):

ValueError: Invalid RGBA argument: 'G'
<!--The output produced by the above code, which may be a screenshot, console output, etc.-->

```
# If applicable, paste the console output here
#
#
```

**Expected outcome**

<!--A description of the expected outcome from the code snippet-->
<!--If this used to work in an earlier version of Matplotlib, please note the version it used to work on-->

**Matplotlib version**
<!--Please specify your platform and versions of the relevant libraries you are using:-->
  * Operating system: windows 10 
  * Matplotlib version (`import matplotlib; print(matplotlib.__version__)`): 3.3.2
  * Matplotlib backend (`print(matplotlib.get_backend())`): Qt5Agg
  * Python version: 3.8.3
  * Jupyter version (if applicable): 
  * Other libraries: 

<!--Please tell us how you installed matplotlib and python e.g., from source, pip, conda-->pip
<!--If you installed from conda, please specify which channel you used if not the default-->

",seanxwh,closed,2021-02-24 18:23:47,,2021-02-25 02:33:13,jklymak,2021-02-25 02:33:14,9,,,
815685627,Contour lines are rendered incorrectly when closed loops,"The C++ code behind `contour` and `tricontour` returns a list of lines, each line being a numpy array of shape `(?, 2)` and is either a closed line loop (if the first and last points are identical) or an open line strip.  Line strips are rendered correctly, but line loops are not.  Simple example:

![Figure_1](https://user-images.githubusercontent.com/580326/109031037-3fb9c300-76bc-11eb-988e-3a50447b307d.png)

Here the line strip is fine, the line loop is not because they are rendered using a `LineCollection` which is a collection of `Line2D` that do not understand the `closed`-ness of line loops.  The example is slightly artificial because of the large `linewidth`; at normal line widths it looks OK but there is a pixel or two which is not quite correct.  If you draw the same contour/Line2D but starting at a different index the output isn't quite the same.  If you tinker with the contouring algorithm (which I am doing for other reasons) test images are annoyingly slightly different.

I think this has been a problem for many years, just not a particularly important problem.  There are a few complaints about it on SO that haven't made it to this issue tracker.  I have a solution in mind but rather than just write a PR I'd like to explain the alternatives and see what other devs think in case there is some sort of trap waiting for me here.

If we cheat and put round end caps on the lines, the line loop is correct.  But then the line strip also has semicircles on the end and hence stick out too far, i.e. they won't align with a `contourf` plot of the same data.  We could use 2 `LineCollection`s, one for line loops with the cheat and one for line strips without.  This would be easy to do but I think it messes up legends as we'd have 2 artists representing one contour set.  We could write a `CompoundArtist` class to wrap the two, but that is expanding the scope of the fix to potentially break lots of things.

What about other `Collection`s?  Here are the possibilities:
![Figure_1](https://user-images.githubusercontent.com/580326/109034060-29613680-76bf-11eb-8a59-eea0e011eb3a.png)

`PolyCollection` understands `closed`-ness, but applies it to all of its polygons.  Hence we'd need two of them, so rejected for the same reasons as `LineCollection` above.  The other 3 options (`PathCollection` and `PatchCollection` of either `Polygons` or `PathPatches`) give us what we want.  These all work as they are essentially collections of individual objects (`Path`s or `Polygons`s) and you can specify `closed=True` or not on them individually.

The simplest of the 3 is `PathCollection`.  The fix is to replace the existing code, approximately
```python
coll = mcollections.LineCollection(list_of_lines, kwargs...)
ax.add_collection(coll)
```
with something like
```python
paths = [mpath.Path(line, closed=is_it_closed_or_not) for line in list_of_lines]
coll = mcoll.PathCollection(paths, kwargs...)
ax.add_collection(coll)
```
which is surprisingly easy.

Downsides?
1) Churn in test images for `contour` and `tricontour`.  Although it should never have to happen again (!!!)
2) We are explicitly creating potentially a lot of objects, one `Path` for each contour line.  I don't fully understand the impact of this.  Looking at the backend code, which I am not an expert in, it seems that all of these `Artist`s end up calling `draw_path` or `draw_path_collection`, so everything ends up being a `Path` in the end, with arrays of vertices and 'kind' codes so maybe it isn't a great impact.

There is a more complicated alternative.  The C++ code could be modified to return two lists, one containing the line strips and one the line loops.  Then only 2 `Path`s would be needed, one with `closed=False` and one with `closed=True`.  We'd have to explicitly create the 'kind' code arrays rather than them being created automatically in the examples above, but that isn't difficult.
",ianthomas23,open,2021-02-24 17:20:04,,,,2021-03-22 19:43:10,4,,v3.5.0,59
815663840,DOC: fix typos,"## PR Summary
Several typos fixed. Typos are found using codespell.

## PR Checklist

<!-- Please mark any checkboxes that do not apply to this PR as [N/A]. -->

- [ ] Has pytest style unit tests (and `pytest` passes).
- [ ] Is [Flake 8](https://flake8.pycqa.org/en/latest/) compliant (run `flake8` on changed files to check).
- [ ] New features are documented, with examples if plot related.
- [ ] Documentation is sphinx and numpydoc compliant (the docs should [build](https://matplotlib.org/devel/documenting_mpl.html#building-the-docs) without error).
- [ ] Conforms to Matplotlib style conventions (install `flake8-docstrings` and run `flake8 --docstring-convention=all`).
- [ ] New features have an entry in `doc/users/next_whats_new/` (follow instructions in README.rst there).
- [ ] API changes documented in `doc/api/next_api_changes/` (follow instructions in README.rst there).

<!--
Thank you so much for your PR!  To help us review your contribution, please
consider the following points:

- A development guide is available at https://matplotlib.org/devdocs/devel/index.html.

- Help with git and github is available at
  https://matplotlib.org/devel/gitwash/development_workflow.html.

- Do not create the PR out of master, but out of a separate branch.

- The PR title should summarize the changes, for example ""Raise ValueError on
  non-numeric input to set_xlim"".  Avoid non-descriptive titles such as
  ""Addresses issue #8576"".

- The summary should provide at least 1-2 sentences describing the pull request
  in detail (Why is this change required?  What problem does it solve?) and
  link to any relevant issues.

- If you are contributing fixes to docstrings, please pay attention to
  http://matplotlib.org/devel/documenting_mpl.html#formatting.  In particular,
  note the difference between using single backquotes, double backquotes, and
  asterisks in the markup.

We understand that PRs can sometimes be overwhelming, especially as the
reviews start coming in.  Please let us know if the reviews are unclear or
the recommended next step seems overly demanding, if you would like help in
addressing a reviewer's comments, or if you have been waiting too long to hear
back on your PR.
-->
",katrielester,closed,2021-02-24 16:53:54,,2021-02-25 18:57:55,tacaswell,2021-03-01 22:45:41,1,Documentation,v3.4.0,53
815314492,add docstring to ax.quiver,"## PR Summary

## PR Checklist

<!-- Please mark any checkboxes that do not apply to this PR as [N/A]. -->

- [ ] Has pytest style unit tests (and `pytest` passes).
- [ ] Is [Flake 8](https://flake8.pycqa.org/en/latest/) compliant (run `flake8` on changed files to check).
- [ ] New features are documented, with examples if plot related.
- [ ] Documentation is sphinx and numpydoc compliant (the docs should [build](https://matplotlib.org/devel/documenting_mpl.html#building-the-docs) without error).
- [ ] Conforms to Matplotlib style conventions (install `flake8-docstrings` and run `flake8 --docstring-convention=all`).
- [ ] New features have an entry in `doc/users/next_whats_new/` (follow instructions in README.rst there).
- [ ] API changes documented in `doc/api/next_api_changes/` (follow instructions in README.rst there).

<!--
Thank you so much for your PR!  To help us review your contribution, please
consider the following points:

- A development guide is available at https://matplotlib.org/devdocs/devel/index.html.

- Help with git and github is available at
  https://matplotlib.org/devel/gitwash/development_workflow.html.

- Do not create the PR out of master, but out of a separate branch.

- The PR title should summarize the changes, for example ""Raise ValueError on
  non-numeric input to set_xlim"".  Avoid non-descriptive titles such as
  ""Addresses issue #8576"".

- The summary should provide at least 1-2 sentences describing the pull request
  in detail (Why is this change required?  What problem does it solve?) and
  link to any relevant issues.

- If you are contributing fixes to docstrings, please pay attention to
  http://matplotlib.org/devel/documenting_mpl.html#formatting.  In particular,
  note the difference between using single backquotes, double backquotes, and
  asterisks in the markup.

We understand that PRs can sometimes be overwhelming, especially as the
reviews start coming in.  Please let us know if the reviews are unclear or
the recommended next step seems overly demanding, if you would like help in
addressing a reviewer's comments, or if you have been waiting too long to hear
back on your PR.
-->
",K-Monty,closed,2021-02-24 09:57:14,,2021-03-02 00:12:08,QuLogic,2021-03-02 08:48:28,5,Documentation,v3.5.0,59
815272124,axes.get_bars(),"### Problem
I would like to change the appearance of a stacked bar plot, e.g. change the color of the top bars.

If I had multiple lines, I would use matplotlib.axes.Axes.get_lines() to get a list of all line handles and change the line appearance.
Now with bar plots, such a function does not exist (or I couldn't find it).
People have asked for this feature before.
https://stackoverflow.com/questions/22688915/how-do-i-get-all-bars-in-a-matplotlib-bar-chart
The suggestion in the mentioned thread is to store the handle upon creation like 
rects1 = ax.bar(x - width/2, men_means, width, label='Men')
in this example
https://matplotlib.org/3.1.1/gallery/lines_bars_and_markers/barchart.html#sphx-glr-gallery-lines-bars-and-markers-barchart-py

However, I specifically want to change the appearance of a plot after the fact. I want to automatically make them corporate design compliant and export the figure with just one command. And for that, I need a getter function for the handles for each bar.

### Proposed Solution
Create a function
axes.get_bars()
that returns a list of all bar plots. Each element in the list should be a matplotlib.container.BarContainer, just like the return of matplotlib.axes.Axes.bar().

Thank you.",Simplimus,open,2021-02-24 09:05:22,,,,2021-02-25 15:12:15,3,New feature,,
814713257,Micro-optimize type1font loading,"1st commit: Avoid constructing temporary strings in type1font parsing.

Just avoiding to construct a bunch of temporary strings (by instead
asking regexes to start their search at a given position) speeds up
```
python -c 'from pylab import *; mpl.use(""pdf""); rcParams[""text.usetex""] = True; plot(); [savefig(""/tmp/test.pdf"", backend=""pdf"") for _ in range(100)]'
```
by ~5%.

2nd commit: Combine whitespace and comment regexes.

This shaves off another percent or two of runtime.

3nd commit: Avoid repeatedly accessing enum values in type1font parsing.
    
Enum getattr is surprisingly slow; avoiding repeated attribute accesses
speeds up
```
python -c 'from pylab import *; mpl.use(""pdf""); rcParams[""text.usetex""] = True; plot(); [savefig(""/tmp/test.pdf"", backend=""pdf"") for _ in range(100)]'
```
by ~5%

## PR Summary

## PR Checklist

<!-- Please mark any checkboxes that do not apply to this PR as [N/A]. -->

- [ ] Has pytest style unit tests (and `pytest` passes).
- [ ] Is [Flake 8](https://flake8.pycqa.org/en/latest/) compliant (run `flake8` on changed files to check).
- [ ] New features are documented, with examples if plot related.
- [ ] Documentation is sphinx and numpydoc compliant (the docs should [build](https://matplotlib.org/devel/documenting_mpl.html#building-the-docs) without error).
- [ ] Conforms to Matplotlib style conventions (install `flake8-docstrings` and run `flake8 --docstring-convention=all`).
- [ ] New features have an entry in `doc/users/next_whats_new/` (follow instructions in README.rst there).
- [ ] API changes documented in `doc/api/next_api_changes/` (follow instructions in README.rst there).

<!--
Thank you so much for your PR!  To help us review your contribution, please
consider the following points:

- A development guide is available at https://matplotlib.org/devdocs/devel/index.html.

- Help with git and github is available at
  https://matplotlib.org/devel/gitwash/development_workflow.html.

- Do not create the PR out of master, but out of a separate branch.

- The PR title should summarize the changes, for example ""Raise ValueError on
  non-numeric input to set_xlim"".  Avoid non-descriptive titles such as
  ""Addresses issue #8576"".

- The summary should provide at least 1-2 sentences describing the pull request
  in detail (Why is this change required?  What problem does it solve?) and
  link to any relevant issues.

- If you are contributing fixes to docstrings, please pay attention to
  http://matplotlib.org/devel/documenting_mpl.html#formatting.  In particular,
  note the difference between using single backquotes, double backquotes, and
  asterisks in the markup.

We understand that PRs can sometimes be overwhelming, especially as the
reviews start coming in.  Please let us know if the reviews are unclear or
the recommended next step seems overly demanding, if you would like help in
addressing a reviewer's comments, or if you have been waiting too long to hear
back on your PR.
-->
",anntzer,open,2021-02-23 18:14:24,,,,2021-04-05 23:06:40,0,"Performance, backend/pdf",,
814540380,path_effects kwarg triggers exception on 3D scatterplot,"<!--To help us understand and resolve your issue, please fill out the form to the best of your ability.-->
<!--You can feel free to delete the sections that do not apply.-->

### Bug report

**Bug summary**

Using path_effects keyword on a 2D scatterplot works, e.g. to draw outlines on markers. For a 3D scatterplot with only one element, the keyword has no effect, while for a 3D scatterplot with more than one element, it leads to an exception

**Code for reproduction**

```python
import numpy as np
import matplotlib.pyplot as plt
import matplotlib.patheffects as path_effects

fig = plt.figure()
ax = fig.gca(projection='3d')

pe = [path_effects.Stroke(linewidth=4, foreground='white'), path_effects.Normal()]

x = np.linspace(-2, 2)
X, Y = np.meshgrid(x, x)
Z = (X+Y)**2

ax.plot_surface(X, Y, Z, zorder=-1, alpha=0.5)

ax.scatter([0, 1, 2], [0, 1, 2], [2, 1, 2], path_effects=pe, zorder=0)
plt.show()
```

**Actual outcome**

```
---------------------------------------------------------------------------
SystemError                               Traceback (most recent call last)
~\AppData\Local\Programs\Python\Python38\lib\site-packages\IPython\core\formatters.py in __call__(self, obj)
    339                 pass
    340             else:
--> 341                 return printer(obj)
    342             # Finally look for special method names
    343             method = get_real_method(obj, self.print_method)

~\AppData\Local\Programs\Python\Python38\lib\site-packages\IPython\core\pylabtools.py in <lambda>(fig)
    246 
    247     if 'png' in formats:
--> 248         png_formatter.for_type(Figure, lambda fig: print_figure(fig, 'png', **kwargs))
    249     if 'retina' in formats or 'png2x' in formats:
    250         png_formatter.for_type(Figure, lambda fig: retina_figure(fig, **kwargs))

~\AppData\Local\Programs\Python\Python38\lib\site-packages\IPython\core\pylabtools.py in print_figure(fig, fmt, bbox_inches, **kwargs)
    130         FigureCanvasBase(fig)
    131 
--> 132     fig.canvas.print_figure(bytes_io, **kw)
    133     data = bytes_io.getvalue()
    134     if fmt == 'svg':

~\AppData\Local\Programs\Python\Python38\lib\site-packages\matplotlib\backend_bases.py in print_figure(self, filename, dpi, facecolor, edgecolor, orientation, format, bbox_inches, pad_inches, bbox_extra_artists, backend, **kwargs)
   2208 
   2209             try:
-> 2210                 result = print_method(
   2211                     filename,
   2212                     dpi=dpi,

~\AppData\Local\Programs\Python\Python38\lib\site-packages\matplotlib\backend_bases.py in wrapper(*args, **kwargs)
   1637             kwargs.pop(arg)
   1638 
-> 1639         return func(*args, **kwargs)
   1640 
   1641     return wrapper

~\AppData\Local\Programs\Python\Python38\lib\site-packages\matplotlib\backends\backend_agg.py in print_png(self, filename_or_obj, metadata, pil_kwargs, *args)
    507             *metadata*, including the default 'Software' key.
    508         """"""
--> 509         FigureCanvasAgg.draw(self)
    510         mpl.image.imsave(
    511             filename_or_obj, self.buffer_rgba(), format=""png"", origin=""upper"",

~\AppData\Local\Programs\Python\Python38\lib\site-packages\matplotlib\backends\backend_agg.py in draw(self)
    405              (self.toolbar._wait_cursor_for_draw_cm() if self.toolbar
    406               else nullcontext()):
--> 407             self.figure.draw(self.renderer)
    408             # A GUI class may be need to update a window using this draw, so
    409             # don't forget to call the superclass.

~\AppData\Local\Programs\Python\Python38\lib\site-packages\matplotlib\artist.py in draw_wrapper(artist, renderer, *args, **kwargs)
     39                 renderer.start_filter()
     40 
---> 41             return draw(artist, renderer, *args, **kwargs)
     42         finally:
     43             if artist.get_agg_filter() is not None:

~\AppData\Local\Programs\Python\Python38\lib\site-packages\matplotlib\figure.py in draw(self, renderer)
   1861 
   1862             self.patch.draw(renderer)
-> 1863             mimage._draw_list_compositing_images(
   1864                 renderer, self, artists, self.suppressComposite)
   1865 

~\AppData\Local\Programs\Python\Python38\lib\site-packages\matplotlib\image.py in _draw_list_compositing_images(renderer, parent, artists, suppress_composite)
    129     if not_composite or not has_images:
    130         for a in artists:
--> 131             a.draw(renderer)
    132     else:
    133         # Composite any adjacent images together

~\AppData\Local\Programs\Python\Python38\lib\site-packages\matplotlib\artist.py in draw_wrapper(artist, renderer, *args, **kwargs)
     39                 renderer.start_filter()
     40 
---> 41             return draw(artist, renderer, *args, **kwargs)
     42         finally:
     43             if artist.get_agg_filter() is not None:

~\AppData\Local\Programs\Python\Python38\lib\site-packages\mpl_toolkits\mplot3d\axes3d.py in draw(self, renderer)
    462 
    463         # Then rest
--> 464         super().draw(renderer)
    465 
    466     def get_axis_position(self):

~\AppData\Local\Programs\Python\Python38\lib\site-packages\matplotlib\artist.py in draw_wrapper(artist, renderer, *args, **kwargs)
     39                 renderer.start_filter()
     40 
---> 41             return draw(artist, renderer, *args, **kwargs)
     42         finally:
     43             if artist.get_agg_filter() is not None:

~\AppData\Local\Programs\Python\Python38\lib\site-packages\matplotlib\cbook\deprecation.py in wrapper(*inner_args, **inner_kwargs)
    409                          else deprecation_addendum,
    410                 **kwargs)
--> 411         return func(*inner_args, **inner_kwargs)
    412 
    413     return wrapper

~\AppData\Local\Programs\Python\Python38\lib\site-packages\matplotlib\axes\_base.py in draw(self, renderer, inframe)
   2745             renderer.stop_rasterizing()
   2746 
-> 2747         mimage._draw_list_compositing_images(renderer, self, artists)
   2748 
   2749         renderer.close_group('axes')

~\AppData\Local\Programs\Python\Python38\lib\site-packages\matplotlib\image.py in _draw_list_compositing_images(renderer, parent, artists, suppress_composite)
    129     if not_composite or not has_images:
    130         for a in artists:
--> 131             a.draw(renderer)
    132     else:
    133         # Composite any adjacent images together

~\AppData\Local\Programs\Python\Python38\lib\site-packages\matplotlib\artist.py in draw_wrapper(artist, renderer, *args, **kwargs)
     39                 renderer.start_filter()
     40 
---> 41             return draw(artist, renderer, *args, **kwargs)
     42         finally:
     43             if artist.get_agg_filter() is not None:

~\AppData\Local\Programs\Python\Python38\lib\site-packages\matplotlib\collections.py in draw(self, renderer)
    929     def draw(self, renderer):
    930         self.set_sizes(self._sizes, self.figure.dpi)
--> 931         Collection.draw(self, renderer)
    932 
    933 

~\AppData\Local\Programs\Python\Python38\lib\site-packages\matplotlib\artist.py in draw_wrapper(artist, renderer, *args, **kwargs)
     39                 renderer.start_filter()
     40 
---> 41             return draw(artist, renderer, *args, **kwargs)
     42         finally:
     43             if artist.get_agg_filter() is not None:

~\AppData\Local\Programs\Python\Python38\lib\site-packages\matplotlib\collections.py in draw(self, renderer)
    404                 mpath.Path(offsets), transOffset, tuple(facecolors[0]))
    405         else:
--> 406             renderer.draw_path_collection(
    407                 gc, transform.frozen(), paths,
    408                 self.get_transforms(), offsets, transOffset,

~\AppData\Local\Programs\Python\Python38\lib\site-packages\matplotlib\patheffects.py in draw_path_collection(self, gc, master_transform, paths, *args, **kwargs)
    136             # Recursively call this method, only next time we will only have
    137             # one path effect.
--> 138             renderer.draw_path_collection(gc, master_transform, paths,
    139                                           *args, **kwargs)
    140 

~\AppData\Local\Programs\Python\Python38\lib\site-packages\matplotlib\patheffects.py in draw_path_collection(self, gc, master_transform, paths, *args, **kwargs)
    128             # Call the base path effect function - this uses the unoptimised
    129             # approach of calling ""draw_path"" multiple times.
--> 130             return RendererBase.draw_path_collection(self, gc,
    131                                                      master_transform, paths,
    132                                                      *args, **kwargs)

~\AppData\Local\Programs\Python\Python38\lib\site-packages\matplotlib\backend_bases.py in draw_path_collection(self, gc, master_transform, paths, all_transforms, offsets, offsetTrans, facecolors, edgecolors, linewidths, linestyles, antialiaseds, urls, offset_position)
    240                 transform = transform.frozen()
    241                 transform.translate(xo, yo)
--> 242             self.draw_path(gc0, path, transform, rgbFace)
    243 
    244     def draw_quad_mesh(self, gc, master_transform, meshWidth, meshHeight,

~\AppData\Local\Programs\Python\Python38\lib\site-packages\matplotlib\patheffects.py in draw_path(self, gc, tpath, affine, rgbFace)
     98     def draw_path(self, gc, tpath, affine, rgbFace=None):
     99         for path_effect in self._path_effects:
--> 100             path_effect.draw_path(self._renderer, gc, tpath, affine,
    101                                   rgbFace)
    102 

~\AppData\Local\Programs\Python\Python38\lib\site-packages\matplotlib\patheffects.py in draw_path(self, renderer, gc, tpath, affine, rgbFace)
    211         gc0.copy_properties(gc)
    212         gc0 = self._update_gc(gc0, self._gc)
--> 213         renderer.draw_path(
    214             gc0, tpath, affine + self._offset_transform(renderer), rgbFace)
    215         gc0.restore()

~\AppData\Local\Programs\Python\Python38\lib\site-packages\matplotlib\backends\backend_agg.py in draw_path(self, gc, path, transform, rgbFace)
    157         else:
    158             try:
--> 159                 self._renderer.draw_path(gc, path, transform, rgbFace)
    160             except OverflowError as err:
    161                 raise OverflowError(""Exceeded cell block limit (set ""

SystemError: new style getargs format but argument is not a tuple
```

3D scatterplot with path effects applied to markers.

**Matplotlib version**
  * Operating system: Windows 10
  * Matplotlib version: 3.3.4 
  * Matplotlib backend:  (independent of backend)
  * Python version: 3.8.2
  * Jupyter version (if applicable):  (also occurs outside)
  * Other libraries: (numpy, but not relevant for the bug)


",mueslo,open,2021-02-23 14:55:07,,,,2021-03-02 06:48:22,1,"API: consistency, status: has patch, topic: mplot3d",,
814278256,"add docstring for ax.quiver, including a return section","## PR Summary

## PR Checklist

<!-- Please mark any checkboxes that do not apply to this PR as [N/A]. -->

- [ ] Has pytest style unit tests (and `pytest` passes).
- [ ] Is [Flake 8](https://flake8.pycqa.org/en/latest/) compliant (run `flake8` on changed files to check).
- [ ] New features are documented, with examples if plot related.
- [ ] Documentation is sphinx and numpydoc compliant (the docs should [build](https://matplotlib.org/devel/documenting_mpl.html#building-the-docs) without error).
- [ ] Conforms to Matplotlib style conventions (install `flake8-docstrings` and run `flake8 --docstring-convention=all`).
- [ ] New features have an entry in `doc/users/next_whats_new/` (follow instructions in README.rst there).
- [ ] API changes documented in `doc/api/next_api_changes/` (follow instructions in README.rst there).

<!--
Thank you so much for your PR!  To help us review your contribution, please
consider the following points:

- A development guide is available at https://matplotlib.org/devdocs/devel/index.html.

- Help with git and github is available at
  https://matplotlib.org/devel/gitwash/development_workflow.html.

- Do not create the PR out of master, but out of a separate branch.

- The PR title should summarize the changes, for example ""Raise ValueError on
  non-numeric input to set_xlim"".  Avoid non-descriptive titles such as
  ""Addresses issue #8576"".

- The summary should provide at least 1-2 sentences describing the pull request
  in detail (Why is this change required?  What problem does it solve?) and
  link to any relevant issues.

- If you are contributing fixes to docstrings, please pay attention to
  http://matplotlib.org/devel/documenting_mpl.html#formatting.  In particular,
  note the difference between using single backquotes, double backquotes, and
  asterisks in the markup.

We understand that PRs can sometimes be overwhelming, especially as the
reviews start coming in.  Please let us know if the reviews are unclear or
the recommended next step seems overly demanding, if you would like help in
addressing a reviewer's comments, or if you have been waiting too long to hear
back on your PR.
-->
",K-Monty,closed,2021-02-23 09:29:26,,2021-02-24 09:52:46,K-Monty,2021-02-25 18:33:32,1,,,
814107268,Memory leak with FuncAnimation and matshow.,"<!--To help us understand and resolve your issue, please fill out the form to the best of your ability.-->
<!--You can feel free to delete the sections that do not apply.-->

### Bug report

**Bug summary**

Using `FuncAnimation` to update an image (`matshow` or `imshow`) causes a memory leak on Windows. I've tested MacOS as well and it doesn't seem to be a problem.

**Code for reproduction**

```python
# !/usr/bin/env python
# -*- coding: utf-8 -*-
# test_memory_leak.py
""""""Test memory leak.""""""

import matplotlib as mpl

mpl.use(""Qt5Agg"")

import matplotlib.pyplot as plt
import numpy as np
from matplotlib.animation import FuncAnimation


def images(shape=(4096, 4096)):
    """"""Image stream.""""""
    while True:
        yield np.random.randint(256, size=shape, dtype=""uint16"")


def make_display():
    """"""Make display, returns update function.""""""
    # initialize plots
    fig, ax_img = plt.subplots()

    # image plots
    img_plot = ax_img.matshow(np.empty((64, 64)), vmin=-1, vmax=1, cmap=""Greys_r"")
    ax_img.set_title(""Image"")
    ax_img.set_aspect(1)

    ax_img.xaxis.set_major_locator(plt.NullLocator())
    ax_img.yaxis.set_major_locator(plt.NullLocator())

    data_shape = (0, 0)

    def update_func(img):

        nonlocal data_shape

        img_plot.set_data(img)
        img_plot.set_clim(img.min(), img.max())

        if data_shape != img.shape:
            ny, nx = img.shape
            img_plot.set_extent((-0.5, nx + 0.5, ny + 0.5, -0.5))
            data_shape = img.shape

        ax_img.autoscale_view()

        return img_plot

    return update_func, fig


def live():
    """"""Show live image.""""""
    update_func, fig = make_display()

    ani = FuncAnimation(
        fig, update_func, frames=images(), interval=1, cache_frame_data=False, save_count=0
    )
    plt.show()


if __name__ == ""__main__"":
    live()

```

**Matplotlib version**
<!--Please specify your platform and versions of the relevant libraries you are using:-->
  * Operating system: Windows 10 Version 1909 (OS Build 18363.1016)
  * Matplotlib version (`import matplotlib; print(matplotlib.__version__)`): 3.3.2
  * Matplotlib backend (`print(matplotlib.get_backend())`): `Qt5Agg` (I've tested `TkAgg` too)
  * Python version: 3.9.1
<!--Please tell us how you installed matplotlib and python e.g., from source, pip, conda-->
<!--If you installed from conda, please specify which channel you used if not the default-->
All installed with `conda`
",david-hoffman,open,2021-02-23 05:03:32,,,,2021-02-23 09:27:15,1,"status: confirmed bug, topic: images",,
813815873,segfault due to font objects when multi-threading,"Although we are very much no thread safe, that this is a ""segfault"" failure so I think it should be addressed.  Users should be able to take their toes off with threads, not their whole leg.

---
I discovered this in an application my group develops at BNL which is more-or-less 

```python
import faulthandler

import io
import time
import threading
from matplotlib.figure import Figure
from matplotlib.backends.backend_agg import FigureCanvas

faulthandler.enable()

fig = Figure()
cav = FigureCanvas(fig)
ax = fig.subplots()
ln, = ax.plot(range(5), label='bob')
ax.legend()

def bad_idea(fig, n):
    time.sleep(1)
    print(f'go {n}')
    for j in range(100):
        #        time.sleep(.01)
        fig.gca().legend()
        fig.tight_layout()
    print(f'done {n}')


fig.savefig(io.BytesIO())
threads = [threading.Thread(target=bad_idea, name=f'bad_thread_{j}', args=(fig, j)).start()
           for j in range(10)]


for j in range(5):
    fig.canvas.draw()


```

but maybe a bit less over-the-top (we only have 1 background thread and it only fires occasionally), but the goal here is to make sure we always lose the race.  Tracing this back I eventually got to this being related to fonts and reduced the reproducing case to:


```python
import faulthandler
import time
import threading
import matplotlib.font_manager as fm
from matplotlib.ft2font import LOAD_NO_HINTING

faulthandler.enable()


def bad_idea(fm, n):
    time.sleep(1)
    print(f""go {n}"")
    for j in range(100):
        font = fm.get_font(fm.findfont(""DejaVu Sans""))
        # font.clear()
        # font.set_size(12, 72.0)
        font.set_text(str(n), 0.0, flags=LOAD_NO_HINTING)
    print(f""done {n}"")


threads = [
    threading.Thread(target=bad_idea, name=f""bad_thread_{j}"", args=(fm, j)).start()
    for j in range(10)
]

```

If you turn down the number of threads you can also get various errors out of freetype

```
$ python /tmp/bad_font.py
go 0
go 2
go 1
Exception in thread bad_thread_2:
Traceback (most recent call last):
  File ""/usr/lib/python3.9/threading.py"", line 954, in _bootstrap_inner
    self.run()
  File ""/usr/lib/python3.9/threading.py"", line 892, in run
    self._target(*self._args, **self._kwargs)
  File ""/tmp/bad_font.py"", line 17, in bad_idea
    font.set_text(str(n), 0.0, flags=LOAD_NO_HINTING)
RuntimeError: In set_text: Could not get glyph (error code 0x12)
Exception in thread bad_thread_0:
Traceback (most recent call last):
  File ""/usr/lib/python3.9/threading.py"", line 954, in _bootstrap_inner
    self.run()
  File ""/usr/lib/python3.9/threading.py"", line 892, in run
    self._target(*self._args, **self._kwargs)
  File ""/tmp/bad_font.py"", line 17, in bad_idea
    font.set_text(str(n), 0.0, flags=LOAD_NO_HINTING)
RuntimeError: In set_text: Could not load glyph (error code 0x14)
done 1
```


vs

```
$ python /tmp/bad_font.py
go 1
go 2
go 0
Exception in thread bad_thread_2:
Traceback (most recent call last):
  File ""/usr/lib/python3.9/threading.py"", line 954, in _bootstrap_inner
Fatal Python error: Segmentation fault

Thread 0x00007fefdac67640 (most recent call first):
  File ""/usr/lib/python3.9/threading.py"", line 1214 in invoke_excepthook
  File ""/usr/lib/python3.9/threading.py"", line 956 in _bootstrap_inner
  File ""/usr/lib/python3.9/threading.py"", line 912 in _bootstrap

Current thread 0x00007fefd8466640 (most recent call first):
  File ""/tmp/bad_font.py"", line 17 in bad_idea
  File ""/usr/lib/python3.9/threading.py"", line 892 in run
  File ""/usr/lib/python3.9/threading.py"", line 954 in _bootstrap_inner
  File ""/usr/lib/python3.9/threading.py"", line 912 in _bootstrap

Thread 0x00007fefd5c65640 (most recent call first):
  File ""/usr/lib/python3.9/posixpath.py"", line 167 in islink
  File ""/usr/lib/python3.9/posixpath.py"", line 425 in _joinrealpath
  File ""/usr/lib/python3.9/posixpath.py"", line 391 in realpath
  File ""/home/tcaswell/source/p/matplotlib/mpl-main/lib/matplotlib/font_manager.py"", line 1228 in findfont
  File ""/tmp/bad_font.py"", line 14 in bad_idea
  File ""/usr/lib/python3.9/threading.py"", line 892 in run
  File ""/usr/lib/python3.9/threading.py"", line 954 in _bootstrap_inner
  File ""/usr/lib/python3.9/threading.py"", line 912 in _bootstrap

Thread 0x00007fefe6309740 (most recent call first):
  File ""/usr/lib/python3.9/threading.py"", line 1428 in _shutdown
Segmentation fault (core dumped)
```

I bisected this back to https://github.com/matplotlib/matplotlib/pull/15104/files and 97477d7214b400f5b2b69f2cf5ffb0784cf8237d specifically.  


I think we have a couple of options here:
 - revert that PR temporairily (maybe we want to do this for 3.4?)
 - add some locking at the c-level in the ft2font
 - add some locking at the python level
 - make the font cache a thread-local

I have some code to implement locking, but it gets a bit gnarly (as I have both a lock and a semaphore to try and make sure we always use fonts safely).   Sorting out how to make sure we always lock around font access is complicated because we cache the font objects in at least 2 places https://github.com/matplotlib/matplotlib/blob/a510e32a37a8b4e0bc4e8384df20c7b45abd9913/lib/matplotlib/font_manager.py#L1397-L1413 and https://github.com/matplotlib/matplotlib/blob/a510e32a37a8b4e0bc4e8384df20c7b45abd9913/lib/matplotlib/_mathtext.py#L222-L253 and because every backend has slightly different helpers to interact with the font objects.

We also have some existing locking around the font cache https://github.com/matplotlib/matplotlib/blob/a510e32a37a8b4e0bc4e8384df20c7b45abd9913/lib/matplotlib/backends/backend_agg.py#L72-L83 but despite my comments on gitter, I no longer think this code is relevant (and this lock should probably move to font_manager.py anyway). 


<!--A description of the expected outcome from the code snippet-->
<!--If this used to work in an earlier version of Matplotlib, please note the version it used to work on-->

**Matplotlib version**
<!--Please specify your platform and versions of the relevant libraries you are using:-->
  * Operating system: linux
  * Matplotlib version (`import matplotlib; print(matplotlib.__version__)`):  3.3.x +
  * Matplotlib backend (`print(matplotlib.get_backend())`): any
  * Python version: 3.7-3.9
  * Jupyter version (if applicable): N/A
  * Other libraries: 

<!--Please tell us how you installed matplotlib and python e.g., from source, pip, conda-->
<!--If you installed from conda, please specify which channel you used if not the default-->

",tacaswell,closed,2021-02-22 19:56:25,,2021-03-06 03:01:54,QuLogic,2021-03-06 03:01:54,2,,v3.4.0,53
813606098,Axes.get_xticks() returns a numpy array but Axes.get_xticks(minor=True) returns a plain list,"`Axes.get_{x|y}ticks()` called with no actual parameters or with `minor=False` returns a numpy array, but if the same method is called with `minor=True`, then it returns a plain list, as showed by the following snippet:

```python
import matplotlib.pyplot as plt

_, ax = plt.subplots()

print(type(ax.get_xticks()))
print(type(ax.get_xticks(minor=True)))
```

which produces:

```
<class 'numpy.ndarray'>
<class 'list'>
```

so my question is if this is the intended behaviour. It's not just a question of consistency, since this discrepancy in return types can cause unexpected errors in code not entirely fanciful like this:

```python
# given the snippet above
major_locs = ax.get_xticks(minor=False)
minor_locs = ax.get_xticks(minor=True)
locs = major_locs + minor_locs
```

```
---------------------------------------------------------------------------
ValueError                                Traceback (most recent call last)

      1 major_locs = ax.get_xticks(minor=False)
      2 minor_locs = ax.get_xticks(minor=True)
----> 3 locs = major_locs + minor_locs

ValueError: operands could not be broadcast together with shapes (6,) (0,)
```

so I wonder if it could at least be documented.

Thank you for the great work!

**Matplotlib version**
  * Operating system: any
  * Matplotlib version: 3.3.4 
  * Matplotlib backend: module://ipykernel.pylab.backend_inline 
  * Python version: 3.8.8",emazep,open,2021-02-22 15:29:48,,,,2021-02-23 17:11:35,2,API: consistency,,
813503804,Use luatex in --luaonly mode to query kpsewhich.,"`luatex --luaonly` runs a *lua* interpreter with relevant tex libraries
available, which avoids both the overhead of repeatedly initializing
kpathsea (the old approach, very slow on macos and windows).  An
alternative approach would be to use `luatex` followed by `\directlua`
calls, but on windows it appears that one needs to use `lualatex` to get
a working interactive prompt, and just loading the latex format takes
seconds(!).

For the simple following benchmark:
```sh
python -c 'from pylab import *; mpl.use(""pdf""); rcParams[""text.usetex""] = True; plot(); savefig(""test.pdf"", backend=""pdf"")'
```
On a macos machine, this patch brings runtime from ~4.5s to ~2.5s.
On a windows machine, this patch brings runtime from ~6.5s to ~1.7s.

We also need to figure out how to best advertise this (do we emit a
warning suggesting to install luatex on windows and macos if luatex is
not present?).

---

See also #19531 and #19551 for other approaches; I opened separate PRs to
simplify comparison of the approaches.

## PR Summary

## PR Checklist

<!-- Please mark any checkboxes that do not apply to this PR as [N/A]. -->

- [ ] Has pytest style unit tests (and `pytest` passes).
- [ ] Is [Flake 8](https://flake8.pycqa.org/en/latest/) compliant (run `flake8` on changed files to check).
- [ ] New features are documented, with examples if plot related.
- [ ] Documentation is sphinx and numpydoc compliant (the docs should [build](https://matplotlib.org/devel/documenting_mpl.html#building-the-docs) without error).
- [ ] Conforms to Matplotlib style conventions (install `flake8-docstrings` and run `flake8 --docstring-convention=all`).
- [ ] New features have an entry in `doc/users/next_whats_new/` (follow instructions in README.rst there).
- [ ] API changes documented in `doc/api/next_api_changes/` (follow instructions in README.rst there).

<!--
Thank you so much for your PR!  To help us review your contribution, please
consider the following points:

- A development guide is available at https://matplotlib.org/devdocs/devel/index.html.

- Help with git and github is available at
  https://matplotlib.org/devel/gitwash/development_workflow.html.

- Do not create the PR out of master, but out of a separate branch.

- The PR title should summarize the changes, for example ""Raise ValueError on
  non-numeric input to set_xlim"".  Avoid non-descriptive titles such as
  ""Addresses issue #8576"".

- The summary should provide at least 1-2 sentences describing the pull request
  in detail (Why is this change required?  What problem does it solve?) and
  link to any relevant issues.

- If you are contributing fixes to docstrings, please pay attention to
  http://matplotlib.org/devel/documenting_mpl.html#formatting.  In particular,
  note the difference between using single backquotes, double backquotes, and
  asterisks in the markup.

We understand that PRs can sometimes be overwhelming, especially as the
reviews start coming in.  Please let us know if the reviews are unclear or
the recommended next step seems overly demanding, if you would like help in
addressing a reviewer's comments, or if you have been waiting too long to hear
back on your PR.
-->
",anntzer,open,2021-02-22 13:30:46,,,,2021-02-22 19:23:34,0,"Performance, topic: text/usetex",,
813467140,ax.get_tightbbox chops of right axis,"<!--To help us understand and resolve your issue, please fill out the form to the best of your ability.-->
<!--You can feel free to delete the sections that do not apply.-->

### Bug report

**Bug summary**

I was trying to save a subplot using the suggestion of using [`ax.get_tightbbox`](https://matplotlib.org/3.3.4/api/_as_gen/matplotlib.axes.Axes.get_tightbbox.html) given here https://stackoverflow.com/a/26432947/9318372. However, the tightbbox chops of the right axis. Also, `ax.get_tightbbox` doesn't seem to play nice with `tight_layout`.

**Code for reproduction**

<!--A minimum code snippet required to reproduce the bug.
Please make sure to minimize the number of dependencies required, and provide
any necessary plotted data.
Avoid using threads, as Matplotlib is (explicitly) not thread-safe.-->

```python
import matplotlib.pyplot as plt

fig, axes = plt.subplots(ncols=2, figsize=(6, 2), tight_layout=None)
fig.set_facecolor('xkcd:mint green')
axes[0].plot(range(10), 'b-')
axes[0].set_title(""blue line"")
axes[1].plot(range(10), 'r^')
axes[1].set_title(""red triangles"")

fig.savefig(F""full_image.png"")
renderer = fig.canvas.get_renderer()
transform = fig.dpi_scale_trans.inverted()

for k, ax in enumerate(axes):
    ax_extent = ax.get_tightbbox(renderer)
    fig.savefig(F""ax{k}.png"", bbox_inches=ax_extent.transformed(transform), pad_inches=0)

    bbox_extra_artists = ax.get_default_bbox_extra_artists()
    bbox_extra_artists += ax.get_xticklabels()
    bbox_extra_artists += ax.get_yticklabels()

    ax_extent = ax.get_tightbbox(renderer, bbox_extra_artists=bbox_extra_artists)
    fig.savefig(F""ax{k}_with_extra_artists.png"", bbox_inches=ax_extent.transformed(transform), pad_inches=0)
```

**Actual outcome**

The right axis gets chopped off

Original:
![full_image](https://user-images.githubusercontent.com/39696536/108707354-2a079a80-7510-11eb-8a5b-b336754d754c.png)

`tightbbox`: Using ` ax.get_tightbbox(fig.canvas.get_renderer()).transformed(fig.dpi_scale_trans.inverted())` - the right axis gets chopped off
![ax0](https://user-images.githubusercontent.com/39696536/108707342-25db7d00-7510-11eb-80a4-ad15a46f2335.png) ![ax1](https://user-images.githubusercontent.com/39696536/108707360-2d9b2180-7510-11eb-9326-98faac5f4203.png)
`tightbbox` + `bbox_extra_artists`: Manually adding `xticklabels` and `yticklabels` as extra artists - too much space added, for the second ax even some parts of the first plot get captured
![ax0_with_extra_artists](https://user-images.githubusercontent.com/39696536/108707287-13614380-7510-11eb-81e9-f93122858caa.png) ![ax1_with_extra_artists](https://user-images.githubusercontent.com/39696536/108707373-2ffd7b80-7510-11eb-8b37-970f2ba5eaf8.png)

-----

If we construct the figure via `plt.subplots(..., tight_layout=True)` all hell breaks loose:

Original + `tight_layout`
![full_image](https://user-images.githubusercontent.com/39696536/108707681-aef2b400-7510-11eb-96f7-60000ab93071.png)

`tightbbox` + `tight_layout`
![ax0](https://user-images.githubusercontent.com/39696536/108707685-b0bc7780-7510-11eb-88cf-aa5019fb5dd4.png) ![ax1](https://user-images.githubusercontent.com/39696536/108707689-b31ed180-7510-11eb-984d-6fe41a36525d.png)

`tightbbox` + `bbox_extra_artists` + `tight_layout`
![ax0_with_extra_artists](https://user-images.githubusercontent.com/39696536/108707705-b87c1c00-7510-11eb-8b99-8c1158c8dde3.png) ![ax1_with_extra_artists](https://user-images.githubusercontent.com/39696536/108707711-bade7600-7510-11eb-9eea-6956f64c4857.png)


**Expected outcome**

<!--A description of the expected outcome from the code snippet-->
<!--If this used to work in an earlier version of Matplotlib, please note the version it used to work on-->

**Matplotlib version**
<!--Please specify your platform and versions of the relevant libraries you are using:-->
  * Operating system: Ubuntu 20.04.2 LTS
  * Matplotlib version (`3.3.4`): 
  * Matplotlib backend (`agg`): 
  * Python version: 3.9.2 | packaged by conda-forge | (default, Feb 21 2021, 05:02:46) 

-----

**PS:** Another potential issue  I noticed in the [source code of get_tightbbox](https://github.com/matplotlib/matplotlib/blob/9a242b26eaa16f07d41e5c2ba1ba8f8f609c841c/lib/matplotlib/axes/_base.py#L4383): at line 4472 we have 

```python
bbox_artists = bbox_extra_artists
if bbox_artists is None:
    bbox_artists = self.get_default_bbox_extra_artists()

for a in bbox_artists:
    ....
```

But one probably wants that if the user specifies some `bbox_extra_artists`, that the `default_bbox_extra_artists` get added anyway!, i.e.

```python
bbox_artists = self.get_default_bbox_extra_artists()
if bbox_extra_artists is not None:
    bbox_artists += bbox_extra_artists

for a in bbox_artists:
    ....
```
",randolf-scholz,closed,2021-02-22 12:43:02,,2021-02-22 15:44:43,jklymak,2021-02-22 15:45:02,1,"Community support, topic: geometry manager",,
812945342,Allow the func argument in PathCollections.legend_elements to return strings,"## PR Summary
`PathCollections.legend_elements` has a parameter called `func`that allows changing what values are shown in the legend using a custom function. `legend_elements` handles numerics just fine but if you want to convert the numbers into strings instead it will crash. 

This PR allows `func` to return non-numerics. Which is a useful trick when using categorical strings in `colors` or `sizes` in `plt.scatter`, since it avoids using for loops like `[plt.scatter(x, y, label=label) for x, y, label in data]` to simply show the strings in the legend.

Example:
```python
import matplotlib.pyplot as plt
import pandas as pd

# Create data:
a = np.arange(0, 15)
x = 2 + a
y = x**2
categorical = pd.Series(a.astype(str), index=a) + "" Celcius""

# Convert categorical to numerical using np.arange and pd.Series:
normed = np.arange(0, len(categorical))
categorical_to_numerical = pd.Series(normed, index=categorical)

# To get back the original values create a lookup table by 
# inverting categorical_to_numerical:
color_to_label = pd.Series(categorical_to_numerical.index, index=categorical_to_numerical)

# Plot x, y that are colored according to the categorical value:
fig, ax = plt.subplots(1, 1)
pc = ax.scatter(x, y, c=categorical_to_numerical)

# Create a legend, but convert the labels back to it's original value:
ax.legend(*pc.legend_elements(func=lambda x: color_to_label[x]))
```
This code normally crashes because it attempts to take the minimum value of an array of strings. With this PR it bypasses those numerical calculations and successfully returns the plot below:
![image](https://user-images.githubusercontent.com/14371165/108642040-44eff580-74a3-11eb-9092-f59432dd4bf9.png)


## PR Checklist

<!-- Please mark any checkboxes that do not apply to this PR as [N/A]. -->
- [x] Closes #19555.
- [x] Has pytest style unit tests (and `pytest` passes).
- [x] Is [Flake 8](https://flake8.pycqa.org/en/latest/) compliant (run `flake8` on changed files to check).
- [N/A] New features are documented, with examples if plot related.
- [N/A] Documentation is sphinx and numpydoc compliant (the docs should [build](https://matplotlib.org/devel/documenting_mpl.html#building-the-docs) without error).
- [x] Conforms to Matplotlib style conventions (install `flake8-docstrings` and run `flake8 --docstring-convention=all`).
- [N/A] New features have an entry in `doc/users/next_whats_new/` (follow instructions in README.rst there).
- [N/A] API changes documented in `doc/api/next_api_changes/` (follow instructions in README.rst there).

<!--
Thank you so much for your PR!  To help us review your contribution, please
consider the following points:

- A development guide is available at https://matplotlib.org/devdocs/devel/index.html.

- Help with git and github is available at
  https://matplotlib.org/devel/gitwash/development_workflow.html.

- Do not create the PR out of master, but out of a separate branch.

- The PR title should summarize the changes, for example ""Raise ValueError on
  non-numeric input to set_xlim"".  Avoid non-descriptive titles such as
  ""Addresses issue #8576"".

- The summary should provide at least 1-2 sentences describing the pull request
  in detail (Why is this change required?  What problem does it solve?) and
  link to any relevant issues.

- If you are contributing fixes to docstrings, please pay attention to
  http://matplotlib.org/devel/documenting_mpl.html#formatting.  In particular,
  note the difference between using single backquotes, double backquotes, and
  asterisks in the markup.

We understand that PRs can sometimes be overwhelming, especially as the
reviews start coming in.  Please let us know if the reviews are unclear or
the recommended next step seems overly demanding, if you would like help in
addressing a reviewer's comments, or if you have been waiting too long to hear
back on your PR.
-->
",Illviljan,open,2021-02-21 20:38:54,,,,2021-03-13 12:25:52,7,"topic: collections and mappables, topic: legend",,
812930082,Allow legend_elements func parameter to return strings.,"<!--To help us understand and resolve your issue, please fill out the form to the best of your ability.-->
<!--You can feel free to delete the sections that do not apply.-->

### Bug report

**Bug summary**
`PatchCollection.legend_elements` allows mapping values to another using `func`. 
I want to convert numerically values back to categorical strings. But `legend_elements `assumes the converted value is **numerical**.

<!--A short 1-2 sentences that succinctly describes the bug-->

**Code for reproduction**

<!--A minimum code snippet required to reproduce the bug.
Please make sure to minimize the number of dependencies required, and provide
any necessary plotted data.
Avoid using threads, as Matplotlib is (explicitly) not thread-safe.-->

```python
import matplotlib.pyplot as plt
import pandas as pd

# Create date:
a = np.arange(0, 15)
x = 2 + a
y = x**2
categorical = pd.Series(a.astype(str), index=a) + "" Celcius""

# Convert categorical to numerical:
normed = np.arange(0, len(categorical))
categorical_to_numerical = pd.Series(normed, index=categorical)
color_to_label = pd.Series(categorical_to_numerical.index, index=categorical_to_numerical)

# Plot:
fig, ax = plt.subplots(1, 1)
pc = ax.scatter(x, y, c=categorical_to_numerical)
ax.legend(*pc.legend_elements(fmt=""{x}"", func=lambda x: color_to_label[x]))
```

**Actual outcome**

<!--The output produced by the above code, which may be a screenshot, console output, etc.-->


```
Traceback (most recent call last):

  File ""<ipython-input-114-ab835483b758>"", line 1, in <module>
    ax.legend(*pc.legend_elements(func=lambda x: color_to_label[x]))

  File ""C:\Users\J.W\anaconda3\lib\site-packages\matplotlib\collections.py"", line 1104, in legend_elements
    fmt.set_bounds(func(u).min(), func(u).max())

  File ""C:\Users\J.W\anaconda3\lib\site-packages\matplotlib\ticker.py"", line 228, in set_bounds
    self.set_view_interval(vmin, vmax)

  File ""C:\Users\J.W\anaconda3\lib\site-packages\matplotlib\ticker.py"", line 222, in set_view_interval
    self.axis.set_view_interval(vmin, vmax)

  File ""C:\Users\J.W\anaconda3\lib\site-packages\matplotlib\ticker.py"", line 195, in set_view_interval
    self.viewLim.intervalx = vmin, vmax

  File ""C:\Users\J.W\anaconda3\lib\site-packages\matplotlib\transforms.py"", line 943, in intervalx
    self._points[:, 0] = interval

ValueError: could not convert string to float: '0 Celcius'
```

**Expected outcome**

<!--A description of the expected outcome from the code snippet-->
<!--If this used to work in an earlier version of Matplotlib, please note the version it used to work on-->
![image](https://user-images.githubusercontent.com/14371165/108635709-16f9b980-7481-11eb-8711-6f387e800812.png)

**Suggested solution**
Check what dtype func values are, bypass all numerical checks if it's non-numeric.
When there are more than 9 values, just choose evenly distributed values until the length is 9.

Example implementation:
```python
def legend_elements(
    self, prop=""colors"", num=""auto"", fmt=None, func=lambda x: x, **kwargs
):
    """"""
    Create legend handles and labels for a PathCollection.

    Each legend handle is a `.Line2D` representing the Path that was drawn,
    and each label is a string what each Path represents.

    This is useful for obtaining a legend for a `~.Axes.scatter` plot;
    e.g.::

        scatter = plt.scatter([1, 2, 3],  [4, 5, 6],  c=[7, 2, 3])
        plt.legend(*scatter.legend_elements())

    creates three legend elements, one for each color with the numerical
    values passed to *c* as the labels.

    Also see the :ref:`automatedlegendcreation` example.

    Parameters
    ----------
    prop : {""colors"", ""sizes""}, default: ""colors""
        If ""colors"", the legend handles will show the different colors of
        the collection. If ""sizes"", the legend will show the different
        sizes. To set both, use *kwargs* to directly edit the `.Line2D`
        properties.
    num : int, None, ""auto"" (default), array-like, or `~.ticker.Locator`,
        Target number of elements to create.
        If None, use all unique elements of the mappable array. If an
        integer, target to use *num* elements in the normed range.
        If *""auto""*, try to determine which option better suits the nature
        of the data.
        The number of created elements may slightly deviate from *num* due
        to a `~.ticker.Locator` being used to find useful locations.
        If a list or array, use exactly those elements for the legend.
        Finally, a `~.ticker.Locator` can be provided.
    fmt : str, `~matplotlib.ticker.Formatter`, or None (default)
        The format or formatter to use for the labels. If a string must be
        a valid input for a `~.StrMethodFormatter`. If None (the default),
        use a `~.ScalarFormatter`.
    func : function, default *lambda x: x*
        Function to calculate the labels.  Often the size (or color)
        argument to `~.Axes.scatter` will have been pre-processed by the
        user using a function ``s = f(x)`` to make the markers visible;
        e.g. ``size = np.log10(x)``.  Providing the inverse of this
        function here allows that pre-processing to be inverted, so that
        the legend labels have the correct values; e.g. ``func = lambda
        x: 10**x``.
    **kwargs
        Allowed keyword arguments are *color* and *size*. E.g. it may be
        useful to set the color of the markers if *prop=""sizes""* is used;
        similarly to set the size of the markers if *prop=""colors""* is
        used. Any further parameters are passed onto the `.Line2D`
        instance. This may be useful to e.g. specify a different
        *markeredgecolor* or *alpha* for the legend handles.

    Returns
    -------
    handles : list of `.Line2D`
        Visual representation of each element of the legend.
    labels : list of str
        The string labels for elements of the legend.
    """"""
    handles = []
    labels = []
    hasarray = self.get_array() is not None
    if fmt is None:
        fmt = mpl.ticker.ScalarFormatter(useOffset=False, useMathText=True)
    elif isinstance(fmt, str):
        fmt = mpl.ticker.StrMethodFormatter(fmt)
    fmt.create_dummy_axis()

    if prop == ""colors"":
        if not hasarray:
            warnings.warn(
                ""Collection without array used. Make sure to ""
                ""specify the values to be colormapped via the ""
                ""`c` argument.""
            )
            return handles, labels
        u = np.unique(self.get_array())
        size = kwargs.pop(""size"", mpl.rcParams[""lines.markersize""])
    elif prop == ""sizes"":
        u = np.unique(self.get_sizes())
        color = kwargs.pop(""color"", ""k"")
    else:
        raise ValueError(
            ""Valid values for `prop` are 'colors' or ""
            f""'sizes'. You supplied '{prop}' instead.""
        )

    func_is_numeric = True
    try:
        fmt.set_bounds(func(u).min(), func(u).max())
    except ValueError:
        func_is_numeric = False

    if num == ""auto"":
        num = 9
        if len(u) <= num:
            num = None
    if num is None:
        values = u
        label_values = func(values)
    elif not func_is_numeric:
        # Values are not numerical so instead of interpolating just
        # choose evenly distributed indexes instead:
        label_values = func(u)
        which_idxs = lambda m, n: np.rint(np.linspace(1, n, min(m, n)) - 1).astype(int)
        cond = which_idxs(num, len(label_values))
        values = u[cond]
        label_values = label_values[cond]
    else:
        if prop == ""colors"":
            arr = self.get_array()
        elif prop == ""sizes"":
            arr = self.get_sizes()
        if isinstance(num, mpl.ticker.Locator):
            loc = num
        elif np.iterable(num):
            loc = mpl.ticker.FixedLocator(num)
        else:
            num = int(num)
            loc = mpl.ticker.MaxNLocator(
                nbins=num, min_n_ticks=num - 1, steps=[1, 2, 2.5, 3, 5, 6, 8, 10]
            )
        label_values = loc.tick_values(func(arr).min(), func(arr).max())
        cond = (label_values >= func(arr).min()) & (label_values <= func(arr).max())
        label_values = label_values[cond]
        xarr = np.linspace(arr.min(), arr.max(), 256)
        values = np.interp(label_values, func(xarr), xarr)

    kw = dict(markeredgewidth=self.get_linewidths()[0], alpha=self.get_alpha())
    kw.update(kwargs)

    for val, lab in zip(values, label_values):
        if prop == ""colors"":
            color = self.cmap(self.norm(val))
        elif prop == ""sizes"":
            size = np.sqrt(val)
            if np.isclose(size, 0.0):
                continue
        h = mlines.Line2D(
            [0], [0], ls="""", color=color, ms=size, marker=self.get_paths()[0], **kw
        )
        handles.append(h)
        if hasattr(fmt, ""set_locs""):
            fmt.set_locs(label_values)
        l = fmt(lab)
        labels.append(l)

    return handles, labels
```


**Matplotlib version**

<details>

INSTALLED VERSIONS
------------------
commit: None
python: 3.8.5 (default, Sep  3 2020, 21:29:08) [MSC v.1916 64 bit (AMD64)]
python-bits: 64
OS: Windows
OS-release: 10
machine: AMD64
processor: Intel64 Family 6 Model 58 Stepping 9, GenuineIntel
byteorder: little
LC_ALL: None
LANG: en
libhdf5: 1.10.4
libnetcdf: None

xarray: 0.16.2
pandas: 1.2.1
numpy: 1.19.2
scipy: 1.6.0
netCDF4: None
pydap: None
h5netcdf: None
h5py: 2.10.0
Nio: None
zarr: None
cftime: None
nc_time_axis: None
PseudoNetCDF: None
rasterio: None
cfgrib: None
iris: None
bottleneck: 1.3.2
dask: 2021.01.1
distributed: 2021.02.0
matplotlib: 3.3.2
cartopy: None
seaborn: 0.11.1
numbagg: None
pint: None
setuptools: 52.0.0.post20210125
pip: 20.3.3
conda: 4.9.2
pytest: 6.2.2
IPython: 7.20.0
sphinx: 3.4.3
</details>

",Illviljan,open,2021-02-21 19:25:59,,,,2021-02-21 23:15:28,0,,,
812929346,Clarify that it is ok to use plt.subplots to create figures,"

## PR Summary
Adds a line explaining that it is ok to use pyplot methods to create figures. This was (is perhaps) confusing for me and seems to be for other users as well https://discourse.matplotlib.org/t/how-do-i-use-the-object-oriented-interface-without-having-to-rely-on-pyplot/21877

cc @jklymak because this is based on your response to that discourse post.

## PR Checklist

<!-- Please mark any checkboxes that do not apply to this PR as [N/A]. -->

- [ ] Documentation is sphinx and numpydoc compliant (the docs should [build](https://matplotlib.org/devel/documenting_mpl.html#building-the-docs) without error).

<!--
Thank you so much for your PR!  To help us review your contribution, please
consider the following points:

- A development guide is available at https://matplotlib.org/devdocs/devel/index.html.

- Help with git and github is available at
  https://matplotlib.org/devel/gitwash/development_workflow.html.

- Do not create the PR out of master, but out of a separate branch.

- The PR title should summarize the changes, for example ""Raise ValueError on
  non-numeric input to set_xlim"".  Avoid non-descriptive titles such as
  ""Addresses issue #8576"".

- The summary should provide at least 1-2 sentences describing the pull request
  in detail (Why is this change required?  What problem does it solve?) and
  link to any relevant issues.

- If you are contributing fixes to docstrings, please pay attention to
  http://matplotlib.org/devel/documenting_mpl.html#formatting.  In particular,
  note the difference between using single backquotes, double backquotes, and
  asterisks in the markup.

We understand that PRs can sometimes be overwhelming, especially as the
reviews start coming in.  Please let us know if the reviews are unclear or
the recommended next step seems overly demanding, if you would like help in
addressing a reviewer's comments, or if you have been waiting too long to hear
back on your PR.
-->
",ianhi,open,2021-02-21 19:22:38,,,,2021-03-21 21:06:37,2,Documentation,,
812912925,ENH: Adding callbacks to Norms for update signals,"## PR Summary

This adds a callback registry to Norm instances that can be connected to by other objects to be notified when the Norm is updated. This is particularly relevant for ScalarMappables to be notified when the vmin/vmax are changed on the Norm. With this update, the axis is now immediately registered as stale in the following example.

```python
import matplotlib.pyplot as plt

fig, ax = plt.subplots()
norm = plt.Normalize(-2, 2)
ax.imshow([[0, 1], [2, -1]], norm=norm)

norm.vmax = 0.1
print(ax.stale)
```

Closes #4387

## PR Checklist

<!-- Please mark any checkboxes that do not apply to this PR as [N/A]. -->

- [x] Has pytest style unit tests (and `pytest` passes).
- [x] Is [Flake 8](https://flake8.pycqa.org/en/latest/) compliant (run `flake8` on changed files to check).
- [N/A] New features are documented, with examples if plot related.
- [x] Documentation is sphinx and numpydoc compliant (the docs should [build](https://matplotlib.org/devel/documenting_mpl.html#building-the-docs) without error).
- [x] Conforms to Matplotlib style conventions (install `flake8-docstrings` and run `flake8 --docstring-convention=all`).
- [x] New features have an entry in `doc/users/next_whats_new/` (follow instructions in README.rst there).
- [N/A] API changes documented in `doc/api/next_api_changes/` (follow instructions in README.rst there).

<!--
Thank you so much for your PR!  To help us review your contribution, please
consider the following points:

- A development guide is available at https://matplotlib.org/devdocs/devel/index.html.

- Help with git and github is available at
  https://matplotlib.org/devel/gitwash/development_workflow.html.

- Do not create the PR out of master, but out of a separate branch.

- The PR title should summarize the changes, for example ""Raise ValueError on
  non-numeric input to set_xlim"".  Avoid non-descriptive titles such as
  ""Addresses issue #8576"".

- The summary should provide at least 1-2 sentences describing the pull request
  in detail (Why is this change required?  What problem does it solve?) and
  link to any relevant issues.

- If you are contributing fixes to docstrings, please pay attention to
  http://matplotlib.org/devel/documenting_mpl.html#formatting.  In particular,
  note the difference between using single backquotes, double backquotes, and
  asterisks in the markup.

We understand that PRs can sometimes be overwhelming, especially as the
reviews start coming in.  Please let us know if the reviews are unclear or
the recommended next step seems overly demanding, if you would like help in
addressing a reviewer's comments, or if you have been waiting too long to hear
back on your PR.
-->
",greglucas,open,2021-02-21 18:02:30,,,,2021-03-25 23:19:48,10,,v3.5.0,59
812753949,Remove scalarmappable private update attributes,"## PR Summary

The updates to scalar mappable would only occur if the
array was updated. This meant that updating the vmin/vmax of
the sm's norm would not be propagated to the drawn artists. This
update removes the array update checks from scalar mappable to calculate
the colors regardless of updates to the array.

## PR Checklist

<!-- Please mark any checkboxes that do not apply to this PR as [N/A]. -->

- [x] Has pytest style unit tests (and `pytest` passes).
- [x] Is [Flake 8](https://flake8.pycqa.org/en/latest/) compliant (run `flake8` on changed files to check).
- [N/A] New features are documented, with examples if plot related.
- [N/A] Documentation is sphinx and numpydoc compliant (the docs should [build](https://matplotlib.org/devel/documenting_mpl.html#building-the-docs) without error).
- [N/A] Conforms to Matplotlib style conventions (install `flake8-docstrings` and run `flake8 --docstring-convention=all`).
- [ ] New features have an entry in `doc/users/next_whats_new/` (follow instructions in README.rst there).
- [x] API changes documented in `doc/api/next_api_changes/` (follow instructions in README.rst there).

<!--
Thank you so much for your PR!  To help us review your contribution, please
consider the following points:

- A development guide is available at https://matplotlib.org/devdocs/devel/index.html.

- Help with git and github is available at
  https://matplotlib.org/devel/gitwash/development_workflow.html.

- Do not create the PR out of master, but out of a separate branch.

- The PR title should summarize the changes, for example ""Raise ValueError on
  non-numeric input to set_xlim"".  Avoid non-descriptive titles such as
  ""Addresses issue #8576"".

- The summary should provide at least 1-2 sentences describing the pull request
  in detail (Why is this change required?  What problem does it solve?) and
  link to any relevant issues.

- If you are contributing fixes to docstrings, please pay attention to
  http://matplotlib.org/devel/documenting_mpl.html#formatting.  In particular,
  note the difference between using single backquotes, double backquotes, and
  asterisks in the markup.

We understand that PRs can sometimes be overwhelming, especially as the
reviews start coming in.  Please let us know if the reviews are unclear or
the recommended next step seems overly demanding, if you would like help in
addressing a reviewer's comments, or if you have been waiting too long to hear
back on your PR.
-->
",greglucas,closed,2021-02-21 02:18:52,,2021-03-23 04:38:44,QuLogic,2021-03-23 13:15:43,0,,v3.5.0,59
812716524,Use luatex's kpsewhich for speed.,"The machinery for running an interactive tex session mostly already
existed in backend_pgf, so directly reuse that (as a base class).  On
the matplotlib macos, this significantly speeds up
```sh
python -c 'from pylab import *; mpl.use(""pdf""); rcParams[""text.usetex""] = True; plot(); savefig(""/tmp/test.pdf"", backend=""pdf"")'
```
from ~4.5s to ~2.5s.

Note that filesystem encodings may be a bit iffy, we still need to check
how things go through the various layers here; it may end up being best
to make the process streams be binary and perform the encoding/decoding
ourselves.

We also need to figure out how to best advertise this (do we emit a
warning suggesting to install luatex on windows and macos if luatex is
not present?).

---

Edit: See https://github.com/matplotlib/matplotlib/pull/19558 for another approach, which also works on Windows for a large speedup.  I'll keep this PR as separate for now to allow comparing the various approaches.

## PR Summary

## PR Checklist

<!-- Please mark any checkboxes that do not apply to this PR as [N/A]. -->

- [ ] Has pytest style unit tests (and `pytest` passes).
- [ ] Is [Flake 8](https://flake8.pycqa.org/en/latest/) compliant (run `flake8` on changed files to check).
- [ ] New features are documented, with examples if plot related.
- [ ] Documentation is sphinx and numpydoc compliant (the docs should [build](https://matplotlib.org/devel/documenting_mpl.html#building-the-docs) without error).
- [ ] Conforms to Matplotlib style conventions (install `flake8-docstrings` and run `flake8 --docstring-convention=all`).
- [ ] New features have an entry in `doc/users/next_whats_new/` (follow instructions in README.rst there).
- [ ] API changes documented in `doc/api/next_api_changes/` (follow instructions in README.rst there).

<!--
Thank you so much for your PR!  To help us review your contribution, please
consider the following points:

- A development guide is available at https://matplotlib.org/devdocs/devel/index.html.

- Help with git and github is available at
  https://matplotlib.org/devel/gitwash/development_workflow.html.

- Do not create the PR out of master, but out of a separate branch.

- The PR title should summarize the changes, for example ""Raise ValueError on
  non-numeric input to set_xlim"".  Avoid non-descriptive titles such as
  ""Addresses issue #8576"".

- The summary should provide at least 1-2 sentences describing the pull request
  in detail (Why is this change required?  What problem does it solve?) and
  link to any relevant issues.

- If you are contributing fixes to docstrings, please pay attention to
  http://matplotlib.org/devel/documenting_mpl.html#formatting.  In particular,
  note the difference between using single backquotes, double backquotes, and
  asterisks in the markup.

We understand that PRs can sometimes be overwhelming, especially as the
reviews start coming in.  Please let us know if the reviews are unclear or
the recommended next step seems overly demanding, if you would like help in
addressing a reviewer's comments, or if you have been waiting too long to hear
back on your PR.
-->
",anntzer,open,2021-02-20 22:06:56,,,,2021-02-22 13:32:21,1,"Performance, topic: text/usetex",,
812707850,Arc and pathpatch_2d_to_3d plots full ellipse,"<!--To help us understand and resolve your issue, please fill out the form to the best of your ability.-->
<!--You can feel free to delete the sections that do not apply.-->

### Bug report

**Bug summary**

I'm trying to draw an arc with an arrow in a 3D plot (to visualize an angle) and am having trouble using `pathpatch_2d_to_3d`. The full circle is displayed when a 3D figure is used.

I found https://discourse.matplotlib.org/t/matplotlib-users-arc-and-art3d-pathpatch-2d-to-3d/21104, which is the exact same issue.
What's the best way to achieve the desired outcome?

<!--A short 1-2 sentences that succinctly describes the bug-->

**Code for reproduction**



<!--A minimum code snippet required to reproduce the bug.
Please make sure to minimize the number of dependencies required, and provide
any necessary plotted data.
Avoid using threads, as Matplotlib is (explicitly) not thread-safe.-->

```python

import matplotlib.pyplot as plt
from matplotlib.patches import Arc
import mpl_toolkits.mplot3d.art3d as art3d

fig = plt.figure()
ax = plt.axes(projection='3d')
a = Arc((0.5, 0.5), width=0.5, height=0.5, angle=0, theta1=0, theta2=90)
ax.add_patch(a)
art3d.pathpatch_2d_to_3d(a, z=0, zdir='z')
plt.show()
```

**Actual outcome**

![Figure_1](https://user-images.githubusercontent.com/4065335/108608587-f30d7980-7395-11eb-9820-ff115524c589.png)

**Expected outcome**

I expect the arc to be 90 degrees, not a full circle.

**Matplotlib version**
Matplotlib 3.3.4 w/ Python 3.9.1.

",alspitz,open,2021-02-20 21:12:27,,,,2021-02-28 19:35:54,2,"status: confirmed bug, topic: mplot3d",,
812453879,Backport PR #19545 on branch v3.4.x (Replace references to pygtk by pygobject in docs.),Backport PR #19545: Replace references to pygtk by pygobject in docs.,meeseeksmachine,closed,2021-02-20 00:36:33,,2021-02-20 18:10:20,jklymak,2021-03-01 22:44:33,0,Documentation,v3.4.0,53
812400475,Increase tolerances for other arches.,"## PR Summary

See scratch build here:
https://koji.fedoraproject.org/koji/taskinfo?taskID=62275793

## PR Checklist

- [x] Has pytest style unit tests (and `pytest` passes).
- [x] Is [Flake 8](https://flake8.pycqa.org/en/latest/) compliant (run `flake8` on changed files to check).
- [n/a] New features are documented, with examples if plot related.
- [n/a] Documentation is sphinx and numpydoc compliant (the docs should [build](https://matplotlib.org/devel/documenting_mpl.html#building-the-docs) without error).
- [x] Conforms to Matplotlib style conventions (install `flake8-docstrings` and run `flake8 --docstring-convention=all`).
- [n/a] New features have an entry in `doc/users/next_whats_new/` (follow instructions in README.rst there).
- [n/a] API changes documented in `doc/api/next_api_changes/` (follow instructions in README.rst there).",QuLogic,closed,2021-02-19 22:29:07,,2021-03-03 19:57:01,tacaswell,2021-03-03 20:02:22,0,topic: testing,v3.4.0,53
812313300,OSError on import when cairosvg is installed.,"<!--To help us understand and resolve your issue, please fill out the form to the best of your ability.-->
<!--You can feel free to delete the sections that do not apply.-->

### Bug report

**Bug summary**

Installing `cairosvg` and `matplotlib` using `pip` causes an `OSError` when trying to `import matplotlib.pyplot`.
The error is not present when `cairosvg` is not installed.

I ran into this issue when running the test suite of `lmfit`. You can see the discussion here: https://github.com/lmfit/lmfit-py/issues/712

I narrowed the issue down to the example below. I encounter this issue on windows, it doesn't seem to happen on linux (lmfit's Azure pipelines don't catch it).

Compounding the issue, the import raises an `OSError` instead of an `ImportError`. It is therefore not caught by `pytest.importorskip`.


**Code for reproduction**

```
conda create -n mpl_cairo python pip
conda activate mpl_cairo
pip install cairosvg matplotlib
python -c ""import matplotlib.pyplot""
```

**Actual outcome**

Output of the last command:
```
Traceback (most recent call last):
  File ""C:\Users\samue\Anaconda3\envs\mpl_cairo\lib\site-packages\matplotlib\backends\backend_cairo.py"", line 15, in <module>
    import cairo
ModuleNotFoundError: No module named 'cairo'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File ""<string>"", line 1, in <module>
  File ""C:\Users\samue\Anaconda3\envs\mpl_cairo\lib\site-packages\matplotlib\pyplot.py"", line 2336, in <module>
    switch_backend(rcParams[""backend""])
  File ""C:\Users\samue\Anaconda3\envs\mpl_cairo\lib\site-packages\matplotlib\__init__.py"", line 703, in __getitem__
    plt.switch_backend(rcsetup._auto_backend_sentinel)
  File ""C:\Users\samue\Anaconda3\envs\mpl_cairo\lib\site-packages\matplotlib\pyplot.py"", line 256, in switch_backend
    switch_backend(candidate)
  File ""C:\Users\samue\Anaconda3\envs\mpl_cairo\lib\site-packages\matplotlib\pyplot.py"", line 276, in switch_backend
    class backend_mod(matplotlib.backend_bases._Backend):
  File ""C:\Users\samue\Anaconda3\envs\mpl_cairo\lib\site-packages\matplotlib\pyplot.py"", line 277, in backend_mod
    locals().update(vars(importlib.import_module(backend_name)))
  File ""C:\Users\samue\Anaconda3\envs\mpl_cairo\lib\importlib\__init__.py"", line 127, in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
  File ""C:\Users\samue\Anaconda3\envs\mpl_cairo\lib\site-packages\matplotlib\backends\backend_gtk3agg.py"", line 5, in <module>
    from . import backend_cairo
  File ""C:\Users\samue\Anaconda3\envs\mpl_cairo\lib\site-packages\matplotlib\backends\backend_cairo.py"", line 21, in <module>
    import cairocffi as cairo
  File ""C:\Users\samue\Anaconda3\envs\mpl_cairo\lib\site-packages\cairocffi\__init__.py"", line 48, in <module>
    cairo = dlopen(
  File ""C:\Users\samue\Anaconda3\envs\mpl_cairo\lib\site-packages\cairocffi\__init__.py"", line 45, in dlopen
    raise OSError(error_message)  # pragma: no cover
OSError: no library called ""cairo"" was found
no library called ""libcairo-2"" was found
cannot load library 'libcairo.so.2': error 0x7e
cannot load library 'libcairo.2.dylib': error 0x7e
cannot load library 'libcairo-2.dll': error 0x7e
```

**Working example**

Somehow this works without `cairosvg`:
```
conda create -n mpl python pip
conda activate mpl
pip install matplotlib
python -c ""import matplotlib.pyplot""
```


**Matplotlib version**
<!--Please specify your platform and versions of the relevant libraries you are using:-->
  * Operating system: Windows 10
  * Matplotlib version (`import matplotlib; print(matplotlib.__version__)`): 3.3.4
  * Matplotlib backend (`print(matplotlib.get_backend())`): TkAgg, only in working case. When using `cairosvg`, this raises the same error as above.
  * Python version: Python 3.9.1 | packaged by conda-forge | (default, Jan 26 2021, 01:29:07) [MSC v.1916 64 bit (AMD64)] on win32
  * Jupyter version (if applicable): 
  * Other libraries: cairocffi 1.2.0, CairoSVG 2.5.1, cffi 1.14.5
",spalato,closed,2021-02-19 20:20:40,,2021-02-19 20:55:09,jklymak,2021-02-19 20:55:09,1,,,
812258868,Move unrendered README.wx to thirdpartypackages/index.rst.,"... actually just add a section for wxmplot in thr third-party packages
list (the description is a copy-paste of the first line of the PyPI
description).  wxmpl is basically dead now -- it doesn't even have a Py3
port yet (https://github.com/NOAA-ORR-ERD/wxmpl).

## PR Summary

## PR Checklist

<!-- Please mark any checkboxes that do not apply to this PR as [N/A]. -->

- [ ] Has pytest style unit tests (and `pytest` passes).
- [ ] Is [Flake 8](https://flake8.pycqa.org/en/latest/) compliant (run `flake8` on changed files to check).
- [ ] New features are documented, with examples if plot related.
- [ ] Documentation is sphinx and numpydoc compliant (the docs should [build](https://matplotlib.org/devel/documenting_mpl.html#building-the-docs) without error).
- [ ] Conforms to Matplotlib style conventions (install `flake8-docstrings` and run `flake8 --docstring-convention=all`).
- [ ] New features have an entry in `doc/users/next_whats_new/` (follow instructions in README.rst there).
- [ ] API changes documented in `doc/api/next_api_changes/` (follow instructions in README.rst there).

<!--
Thank you so much for your PR!  To help us review your contribution, please
consider the following points:

- A development guide is available at https://matplotlib.org/devdocs/devel/index.html.

- Help with git and github is available at
  https://matplotlib.org/devel/gitwash/development_workflow.html.

- Do not create the PR out of master, but out of a separate branch.

- The PR title should summarize the changes, for example ""Raise ValueError on
  non-numeric input to set_xlim"".  Avoid non-descriptive titles such as
  ""Addresses issue #8576"".

- The summary should provide at least 1-2 sentences describing the pull request
  in detail (Why is this change required?  What problem does it solve?) and
  link to any relevant issues.

- If you are contributing fixes to docstrings, please pay attention to
  http://matplotlib.org/devel/documenting_mpl.html#formatting.  In particular,
  note the difference between using single backquotes, double backquotes, and
  asterisks in the markup.

We understand that PRs can sometimes be overwhelming, especially as the
reviews start coming in.  Please let us know if the reviews are unclear or
the recommended next step seems overly demanding, if you would like help in
addressing a reviewer's comments, or if you have been waiting too long to hear
back on your PR.
-->
",anntzer,closed,2021-02-19 18:55:41,,2021-02-20 00:38:33,timhoffm,2021-03-01 22:42:57,2,"Documentation, GUI/wx",v3.4.0,53
812241537,Replace references to pygtk by pygobject in docs.,"Also reorder mentioned backends by fallback order (which is effectively
our preference order), except that the OS-specific macos backend goes
last.

Capitalization follows the docs of each project.

## PR Summary

## PR Checklist

<!-- Please mark any checkboxes that do not apply to this PR as [N/A]. -->

- [ ] Has pytest style unit tests (and `pytest` passes).
- [ ] Is [Flake 8](https://flake8.pycqa.org/en/latest/) compliant (run `flake8` on changed files to check).
- [ ] New features are documented, with examples if plot related.
- [ ] Documentation is sphinx and numpydoc compliant (the docs should [build](https://matplotlib.org/devel/documenting_mpl.html#building-the-docs) without error).
- [ ] Conforms to Matplotlib style conventions (install `flake8-docstrings` and run `flake8 --docstring-convention=all`).
- [ ] New features have an entry in `doc/users/next_whats_new/` (follow instructions in README.rst there).
- [ ] API changes documented in `doc/api/next_api_changes/` (follow instructions in README.rst there).

<!--
Thank you so much for your PR!  To help us review your contribution, please
consider the following points:

- A development guide is available at https://matplotlib.org/devdocs/devel/index.html.

- Help with git and github is available at
  https://matplotlib.org/devel/gitwash/development_workflow.html.

- Do not create the PR out of master, but out of a separate branch.

- The PR title should summarize the changes, for example ""Raise ValueError on
  non-numeric input to set_xlim"".  Avoid non-descriptive titles such as
  ""Addresses issue #8576"".

- The summary should provide at least 1-2 sentences describing the pull request
  in detail (Why is this change required?  What problem does it solve?) and
  link to any relevant issues.

- If you are contributing fixes to docstrings, please pay attention to
  http://matplotlib.org/devel/documenting_mpl.html#formatting.  In particular,
  note the difference between using single backquotes, double backquotes, and
  asterisks in the markup.

We understand that PRs can sometimes be overwhelming, especially as the
reviews start coming in.  Please let us know if the reviews are unclear or
the recommended next step seems overly demanding, if you would like help in
addressing a reviewer's comments, or if you have been waiting too long to hear
back on your PR.
-->
",anntzer,closed,2021-02-19 18:27:11,,2021-02-20 00:35:45,timhoffm,2021-02-20 10:41:32,0,Documentation,v3.4.0,53
812008047,Regression in 3.4.0rc1 in creating ListedColormap from a set,"<!--To help us understand and resolve your issue, please fill out the form to the best of your ability.-->
<!--You can feel free to delete the sections that do not apply.-->

### Bug report

**Bug summary**

Apparently I have some code that creates a `ListedColormap` object from a set of RGB tuples (I'm not sure why) and this fails on the 3.4.0 release candidate, but didn't previously.

**Code for reproduction**

<!--A minimum code snippet required to reproduce the bug.
Please make sure to minimize the number of dependencies required, and provide
any necessary plotted data.
Avoid using threads, as Matplotlib is (explicitly) not thread-safe.-->

```python
import matplotlib as mpl
print(mpl.__version__)
colors = [(0, .5, 1), (1, .2, .5), (.4, 1, .2)]
cmap = mpl.colors.ListedColormap(set(colors))
print(cmap([0, .5, 1]))
```

**Actual outcome**

<!--The output produced by the above code, which may be a screenshot, console output, etc.-->

```python-traceback
3.4.0rc1
Traceback (most recent call last):
  File ""mpl_debug.py"", line 5, in <module>
    print(cmap([0, .5, 1]))
  File ""/Users/mwaskom/miniconda3/envs/mpl34_test/lib/python3.8/site-packages/matplotlib/colors.py"", line 598, in __call__
    self._init()
  File ""/Users/mwaskom/miniconda3/envs/mpl34_test/lib/python3.8/site-packages/matplotlib/colors.py"", line 1036, in _init
    self._lut[:-3] = to_rgba_array(self.colors)
  File ""/Users/mwaskom/miniconda3/envs/mpl34_test/lib/python3.8/site-packages/matplotlib/colors.py"", line 369, in to_rgba_array
    rgba = np.column_stack([c, np.ones(len(c))])
  File ""<__array_function__ internals>"", line 5, in column_stack
  File ""/Users/mwaskom/miniconda3/envs/mpl34_test/lib/python3.8/site-packages/numpy/lib/shape_base.py"", line 656, in column_stack
    return _nx.concatenate(arrays, 1)
  File ""<__array_function__ internals>"", line 5, in concatenate
ValueError: all the input array dimensions for the concatenation axis must match exactly, but along dimension 0, the array at index 0 has size 1 and the array at index 1 has size 3
```

**Expected outcome**

```
3.3.2
[[1.  0.2 0.5 1. ]
 [0.4 1.  0.2 1. ]
 [0.  0.5 1.  1. ]]
```

**Matplotlib version**
<!--Please specify your platform and versions of the relevant libraries you are using:-->
  * Operating system: macos
  * Matplotlib version (`import matplotlib; print(matplotlib.__version__)`):  3.4.0.rc1
  * Matplotlib backend (`print(matplotlib.get_backend())`):  macosx
  * Python version: 3.8.x
  * Jupyter version (if applicable): na
  * Other libraries: 

<!--Please tell us how you installed matplotlib and python e.g., from source, pip, conda-->
<!--If you installed from conda, please specify which channel you used if not the default-->

Installed the release candidate by pointing pip at the tarball on the github releases page.
",mwaskom,closed,2021-02-19 13:06:30,,2021-03-01 23:29:36,QuLogic,2021-03-01 23:29:36,21,Release critical,v3.4.0,53
811790092,Extra ticks at an extended part of colorbar,"<!--To help us understand and resolve your issue, please fill out the form to the best of your ability.-->
<!--You can feel free to delete the sections that do not apply.-->

### Bug report

Extra minorticks appear at an extended part of colorbar with `ticks=LogLocator(numticks=10, subs='all')`.

<!--A short 1-2 sentences that succinctly describes the bug-->

**Code for reproduction**

<!--A minimum code snippet required to reproduce the bug.
Please make sure to minimize the number of dependencies required, and provide
any necessary plotted data.
Avoid using threads, as Matplotlib is (explicitly) not thread-safe.-->

```python
%matplotlib inline

import numpy as np
import matplotlib.pyplot as plt
from matplotlib.colors import LogNorm
from matplotlib.ticker import LogLocator

v = np.geomspace(1e0, 1e4, num=3 * 4).reshape(3, 4)

fig, axs = plt.subplots(figsize=(6, 2))
pc = axs.pcolormesh(v, norm=LogNorm())
fig.colorbar(pc, extend='both')

fig, axs = plt.subplots(figsize=(6, 2))
pc = axs.pcolormesh(v, norm=LogNorm())
fig.colorbar(pc, extend='both', ticks=LogLocator(numticks=10))

fig, axs = plt.subplots(figsize=(6, 2))
pc = axs.pcolormesh(v, norm=LogNorm())
fig.colorbar(pc, extend='both', ticks=LogLocator(numticks=10, subs='all'))
```

**Actual outcome**

<!--The output produced by the above code, which may be a screenshot, console output, etc.-->
![screenshot 2021-02-19 153003](https://user-images.githubusercontent.com/44988698/108472295-86c44480-72c7-11eb-9ea0-531beb09da21.png)


**Expected outcome**

Minor ticks appear only at the body of the colorbar.

Probably this is not a right usage for the `subs` option, but I just want to show minor ticks, which by default are not shown for a short colorbar.

<!--A description of the expected outcome from the code snippet-->
<!--If this used to work in an earlier version of Matplotlib, please note the version it used to work on-->

**Matplotlib version**
<!--Please specify your platform and versions of the relevant libraries you are using:-->
  * Operating system: 
  * Matplotlib version: 3.3.4
  * Matplotlib backend: module://ipykernel.pylab.backend_inline
  * Python version: 3.7.9
  * Jupyter version (if applicable): Jupyterlab 3.0.8
  * Other libraries: 

All installed by `conda install -c conda-forge ...`

<!--Please tell us how you installed matplotlib and python e.g., from source, pip, conda-->
<!--If you installed from conda, please specify which channel you used if not the default-->

",yoichi-kazama,open,2021-02-19 07:49:27,,,,2021-02-19 16:08:35,1,,,
811772462,Backport PR #19532 on branch v3.4.x (Add note on interaction between text wrapping and bbox_inches='tight'),Backport PR #19532: Add note on interaction between text wrapping and bbox_inches='tight',meeseeksmachine,closed,2021-02-19 07:20:34,,2021-02-20 18:11:17,jklymak,2021-03-01 22:45:17,0,"Documentation, third-party integration: jupyter",v3.4.0,53
811599107,MAINT: fix typo from #19438,,lpsinger,closed,2021-02-19 01:11:47,,2021-02-19 01:16:15,QuLogic,2021-02-19 01:43:21,1,Documentation,v3.4.0,53
811563800,Share subplots() label visibility handling with label_outer().,"This allows label_outer() to also benefit from handling of top-or-right
labeled axes (not only for the tick labels, but also for the axis labels
themselves).

followup to #19472.

edit: this should also be useful for https://github.com/matplotlib/matplotlib/issues/18305.

## PR Summary

## PR Checklist

<!-- Please mark any checkboxes that do not apply to this PR as [N/A]. -->

- [ ] Has pytest style unit tests (and `pytest` passes).
- [ ] Is [Flake 8](https://flake8.pycqa.org/en/latest/) compliant (run `flake8` on changed files to check).
- [ ] New features are documented, with examples if plot related.
- [ ] Documentation is sphinx and numpydoc compliant (the docs should [build](https://matplotlib.org/devel/documenting_mpl.html#building-the-docs) without error).
- [ ] Conforms to Matplotlib style conventions (install `flake8-docstrings` and run `flake8 --docstring-convention=all`).
- [ ] New features have an entry in `doc/users/next_whats_new/` (follow instructions in README.rst there).
- [ ] API changes documented in `doc/api/next_api_changes/` (follow instructions in README.rst there).

<!--
Thank you so much for your PR!  To help us review your contribution, please
consider the following points:

- A development guide is available at https://matplotlib.org/devdocs/devel/index.html.

- Help with git and github is available at
  https://matplotlib.org/devel/gitwash/development_workflow.html.

- Do not create the PR out of master, but out of a separate branch.

- The PR title should summarize the changes, for example ""Raise ValueError on
  non-numeric input to set_xlim"".  Avoid non-descriptive titles such as
  ""Addresses issue #8576"".

- The summary should provide at least 1-2 sentences describing the pull request
  in detail (Why is this change required?  What problem does it solve?) and
  link to any relevant issues.

- If you are contributing fixes to docstrings, please pay attention to
  http://matplotlib.org/devel/documenting_mpl.html#formatting.  In particular,
  note the difference between using single backquotes, double backquotes, and
  asterisks in the markup.

We understand that PRs can sometimes be overwhelming, especially as the
reviews start coming in.  Please let us know if the reviews are unclear or
the recommended next step seems overly demanding, if you would like help in
addressing a reviewer's comments, or if you have been waiting too long to hear
back on your PR.
-->
",anntzer,closed,2021-02-18 23:52:14,,2021-03-22 02:25:35,jklymak,2021-03-22 08:07:24,3,topic: ticks axis labels,v3.5.0,59
811545515,"In scatter, fix single rgb edgecolors handling","Closes #19066.

## PR Summary

## PR Checklist

<!-- Please mark any checkboxes that do not apply to this PR as [N/A]. -->

- [x] Has pytest style unit tests (and `pytest` passes).
- [x] Is [Flake 8](https://flake8.pycqa.org/en/latest/) compliant (run `flake8` on changed files to check).
- [N/A ] New features are documented, with examples if plot related.
- [N/A] Documentation is sphinx and numpydoc compliant (the docs should [build](https://matplotlib.org/devel/documenting_mpl.html#building-the-docs) without error).
- [N/A] Conforms to Matplotlib style conventions (install `flake8-docstrings` and run `flake8 --docstring-convention=all`).
- [N/A] New features have an entry in `doc/users/next_whats_new/` (follow instructions in README.rst there).
- [N/A] API changes documented in `doc/api/next_api_changes/` (follow instructions in README.rst there).

<!--
Thank you so much for your PR!  To help us review your contribution, please
consider the following points:

- A development guide is available at https://matplotlib.org/devdocs/devel/index.html.

- Help with git and github is available at
  https://matplotlib.org/devel/gitwash/development_workflow.html.

- Do not create the PR out of master, but out of a separate branch.

- The PR title should summarize the changes, for example ""Raise ValueError on
  non-numeric input to set_xlim"".  Avoid non-descriptive titles such as
  ""Addresses issue #8576"".

- The summary should provide at least 1-2 sentences describing the pull request
  in detail (Why is this change required?  What problem does it solve?) and
  link to any relevant issues.

- If you are contributing fixes to docstrings, please pay attention to
  http://matplotlib.org/devel/documenting_mpl.html#formatting.  In particular,
  note the difference between using single backquotes, double backquotes, and
  asterisks in the markup.

We understand that PRs can sometimes be overwhelming, especially as the
reviews start coming in.  Please let us know if the reviews are unclear or
the recommended next step seems overly demanding, if you would like help in
addressing a reviewer's comments, or if you have been waiting too long to hear
back on your PR.
-->
",efiring,closed,2021-02-18 23:12:27,,2021-02-19 00:59:49,QuLogic,2021-02-19 00:59:49,0,,v3.4.0,53
811536594,Speedup pdftex.map parsing.,"1st commit:

For reminder, pdftex.map is a file that maps tex font names (""cmr10"") to
filesystem font names (""cmr10.pfb""), together with additional metadata
(font encoding, postscript special commands).  When using pdf output
with usetex, we parse usetex-generated dvi files and then need to locate
and load these fonts for embedding into the pdf file, hence then need to
parse pdftex.map.

On some systems (likely with large texlive installs), pdftex.map can be
really large (>10^4 entries), and parsing it is quite slow (>500ms on
the matplotlib macos).

This patch implements a new (simpler?) parser, which is ~25% faster
(so it can cut hundreds of ms on systems with large maps).  The patch
additionally correctly handles entries of the form `foo <bar.pfb`
(i.e., with no postscript font name -- in that case the docs say that
the postscript font name is the same as the tfm name).  On the other
hand, the patch also drops support for quotes around anything but the
postscript specials (in accordance with the psfonts.map docs, and the
actual pdftex implementation in `src/texk/web2c/pdftexdir/mapfile.c`:
`case '""': /* opening quote */` only handles postscript specials).  See
also changes to test.map for the changes in supported syntax.

2nd commit:

See previous commit for description of pdftex.map.  The vast majority
of entries (dozens of thousands) in pdftex.map actually end up being
unused, and their parsing is just wasted.  This patch takes advantage of
the fact that we can quickly recover the tex font name from pdftex.map
entries (it's just the first word), so we can very quickly build a
mapping of tex font names to unparsed pdftex.map entries, and then only
parse the few entries that we'll need on-demand.  This speeds up e.g.
```
python -c 'from pylab import *; rcParams[""text.usetex""] = True; plot(); savefig(""/tmp/test.pdf"")'
```
by ~700ms (~20%) on the matplotlib macos.

## PR Summary

## PR Checklist

<!-- Please mark any checkboxes that do not apply to this PR as [N/A]. -->

- [ ] Has pytest style unit tests (and `pytest` passes).
- [ ] Is [Flake 8](https://flake8.pycqa.org/en/latest/) compliant (run `flake8` on changed files to check).
- [ ] New features are documented, with examples if plot related.
- [ ] Documentation is sphinx and numpydoc compliant (the docs should [build](https://matplotlib.org/devel/documenting_mpl.html#building-the-docs) without error).
- [ ] Conforms to Matplotlib style conventions (install `flake8-docstrings` and run `flake8 --docstring-convention=all`).
- [ ] New features have an entry in `doc/users/next_whats_new/` (follow instructions in README.rst there).
- [ ] API changes documented in `doc/api/next_api_changes/` (follow instructions in README.rst there).

<!--
Thank you so much for your PR!  To help us review your contribution, please
consider the following points:

- A development guide is available at https://matplotlib.org/devdocs/devel/index.html.

- Help with git and github is available at
  https://matplotlib.org/devel/gitwash/development_workflow.html.

- Do not create the PR out of master, but out of a separate branch.

- The PR title should summarize the changes, for example ""Raise ValueError on
  non-numeric input to set_xlim"".  Avoid non-descriptive titles such as
  ""Addresses issue #8576"".

- The summary should provide at least 1-2 sentences describing the pull request
  in detail (Why is this change required?  What problem does it solve?) and
  link to any relevant issues.

- If you are contributing fixes to docstrings, please pay attention to
  http://matplotlib.org/devel/documenting_mpl.html#formatting.  In particular,
  note the difference between using single backquotes, double backquotes, and
  asterisks in the markup.

We understand that PRs can sometimes be overwhelming, especially as the
reviews start coming in.  Please let us know if the reviews are unclear or
the recommended next step seems overly demanding, if you would like help in
addressing a reviewer's comments, or if you have been waiting too long to hear
back on your PR.
-->
",anntzer,open,2021-02-18 22:56:26,,,,2021-04-05 23:31:50,1,"Performance, topic: text/usetex",,
811312336,Stem plot creates diagonal connections,"### Bug report

**Bug summary**

I want to plot x/y data as bars, using the `stem` command. The first array (`coords_sample1s[i]`) contains the positions, the second one (`percentages_sample1s[i]`) the y-values. This produces a plot, where some of the stems are connected. 
This goes against my undestanding of the documentation: ""A stem plot plots vertical lines at each x location from the baseline to y, and places a marker there.""

**Code for reproduction**

The twin axis plots the grey line, and can be ignored, I included it only for completeness.

```python
for i in range(len(sample1s)):
        axs[i].stem(coords_sample1s[i], percentages_sample1s[i], markerfmt='', bottom=0)
        axs[i].ticklabel_format(useOffset=False, style='plain')
        axs[i].set_ylim(-0.05, 1.05)
        axs[i].axvspan(int(dmr[2]), int(dmr[3]), alpha=0.3, color='orange')
        axs[i].set_xlim([min_coord-20, max_coord+20])
        twins.append(axs[i].twinx())
        twins[i].plot(coords_sample1s[i], covs_sample1s[i], '-', color=(96/255, 96/255, 96/255, 0.8), linewidth=0.5)
        twins[i].set_ylim([-(max_cov / 20), max_cov + (max_cov / 20)]) 
        twins[i].yaxis.set_major_locator(MaxNLocator(integer=True))
        axs[i].set_xlabel(""position"", fontsize=8)
        axs[i].set_ylabel(""ratio methylated"", fontsize=8)
        twins[i].set_ylabel(""coverage"", fontsize=8)
```

**Actual outcome**

![stemplot](https://user-images.githubusercontent.com/43847498/108394273-d564d680-7214-11eb-87be-e83ece83ce74.PNG)


**Expected outcome**
I am expecting a result similar to this, with independent stems:
![stemplot2](https://user-images.githubusercontent.com/43847498/108394497-0cd38300-7215-11eb-9eb9-49890699e449.PNG)

**important packages in my conda environment**
<!--Please specify your platform and versions of the relevant libraries you are using:-->
  * matplotlib 3.3.4
  * matplotlib-base 3.3.4
  * python 3.8.5

",ViHammer,closed,2021-02-18 17:31:48,,2021-02-18 17:33:35,jklymak,2021-02-19 13:09:31,2,Community support,,
811139243,Add a way to set a window to maximum size common to all the backends,"<!--
Welcome! Thanks for thinking of a way to improve Matplotlib.


Before creating a new feature request please search the issues for relevant feature requests.
-->

### Problem

The different backends for matplotlib have different ways of set a window as maximized. See for example this question on Stack Overflow:  [How to maximize a plt.show() window using Python](https://stackoverflow.com/questions/12439588/how-to-maximize-a-plt-show-window-using-python)



<!--
Provide a clear and concise description of the problem this feature will solve. 

For example:
* I'm always frustrated when [...] because [...]
* I would like it if [...] happened when I [...] because [...]
* Here is a sample image of what I am asking for [...]
-->

### Proposed Solution

I would like to suggest to add a common function to the figure manager/backend so that one could set the window as maximized without having to change the code depending on the backend. Of course, this would only be available on interactive backends such as GTK*, Qt* and wx*.

<!-- Provide a clear and concise description of a way to accomplish what you want. For example:

* Add an option so that when [...]  [...] will happen
 -->

<!-- Add any other context or screenshots about the feature request here. You can also include links to examples of other programs that have something similar to your request. For example:

* Another project [...] solved this by [...]
-->",Noxbru,closed,2021-02-18 14:15:58,,2021-02-18 15:12:18,anntzer,2021-02-18 18:05:06,2,"New feature, status: duplicate",,
810811205,Fix example's BasicUnit array conversion.,"## PR Summary

The unit examples are broken in NumPy < 1.20. This fixes a bug that was exposed by #19415 ~~, but does not fix the examples fully. `radian_demo` is fixed by this change, but `ellipse_with_units` is still broken. I do not understand the NumPy subclassing methods enough to fix it short of reverting #19415..~~

A unit is a scalar, not a length-1 array. Though `BasicUnit` implements `__rmul__`, if multiplying by an array, the NumPy implementation will call `__array__` instead. If the LHS is an array, everything is fine, but if the LHS is a scalar, the previous code would incorrectly cause it to be upcast to a 1D array. When `__getitem__` was added in #19415, `np.atleast_1d` started iterating each (now 1D, not scalar) `TaggedValue`, seeing it was length 1, and made the x/y arrays into (N, 1) instead of (N,).

## PR Checklist

- [n/a] Has pytest style unit tests (and `pytest` passes).
- [x] Is [Flake 8](https://flake8.pycqa.org/en/latest/) compliant (run `flake8` on changed files to check).
- [n/a] New features are documented, with examples if plot related.
- [x] Documentation is sphinx and numpydoc compliant (the docs should [build](https://matplotlib.org/devel/documenting_mpl.html#building-the-docs) without error).
- [x] Conforms to Matplotlib style conventions (install `flake8-docstrings` and run `flake8 --docstring-convention=all`).
- [n/a] New features have an entry in `doc/users/next_whats_new/` (follow instructions in README.rst there).
- [n/a] API changes documented in `doc/api/next_api_changes/` (follow instructions in README.rst there).",QuLogic,closed,2021-02-18 06:43:10,,2021-03-25 19:27:13,tacaswell,2021-03-31 05:13:17,7,"Documentation, topic: units",v3.4.0,53
810603801,BUG: fill_between with interpolate=True and NaN.,"## PR Summary

closes #18986

Fixes a bug in `fill_between` when using `interpolate=True` with NaNs and/or masked arrays (issue #18986).

Here
https://github.com/matplotlib/matplotlib/blob/140ed408b11c91b8f8696c6d5bc8016f1ecab5bf/lib/matplotlib/axes/_axes.py#L5269-L5271
we correctly convert the input arrays `ind`, `dep1` and `dep1` to masked arrays, but a few lines later
https://github.com/matplotlib/matplotlib/blob/140ed408b11c91b8f8696c6d5bc8016f1ecab5bf/lib/matplotlib/axes/_axes.py#L5288
the `np.broadcast_arrays` call converts the masked arrays back to normal `ndarray`s.  The subsequent `np.ma.is_masked` test fails and the fill is rendered incorrectly.

The fix is simple, I've added the kwarg `subok=True` to the `broadcast_arrays` call which preserves the masked arrays.

I've added a new test based on the OP's example, and the existing test images for `test_axes/fill_between_interpolate` are now correct.  We are unlucky not to have spotted this before but it is not surprising, there are only a few erroneous pixels on the left-hand side corresponding to the first element being masked.

OP's script now produces the correct result:
![Figure_1](https://user-images.githubusercontent.com/580326/108278872-9a5e9680-7173-11eb-9ac2-872c3e16a44d.png)

## PR Checklist

- [x] Has pytest style unit tests (and `pytest` passes).
- [x] Is [Flake 8](https://flake8.pycqa.org/en/latest/) compliant (run `flake8` on changed files to check).
",ianthomas23,closed,2021-02-17 23:02:13,,2021-02-20 18:15:27,jklymak,2021-02-22 20:00:22,1,,v3.5.0,59
810588608,Clarify the animated property and reword blitting tutorial a bit,## PR Summary,timhoffm,closed,2021-02-17 22:31:56,,2021-02-18 03:25:05,QuLogic,2021-02-18 07:34:04,0,Documentation,v3.4.0,53
810538572,Add note on interaction between text wrapping and bbox_inches='tight',"## PR Summary

Closes #19523.",timhoffm,closed,2021-02-17 21:07:20,,2021-02-19 07:19:49,timhoffm,2021-02-19 13:55:44,2,"Documentation, third-party integration: jupyter",v3.4.0,53
809741560,Reuse single kpsewhich instance for speed.,"On MacOS, where spawing kpsewhich instances is rather slow (https://github.com/matplotlib/matplotlib/issues/4880#issuecomment-355492230), this appears
to speed up
```
python -c 'from pylab import *; mpl.use(""pdf""); rcParams[""text.usetex""] = True; plot(); savefig(""/tmp/test.pdf"", backend=""pdf"")'
```
around two-fold (~4s to ~2s).  (There's also a small speedup on Linux,
perhaps ~10%, but the whole thing is already reasonably fast.)

Note that this is assuming that the dvi cache has already been built;
the costly subprocess calls here are due to calls to kpsewhich to
resolve the fonts whose name are listed in the dvi file.

Much of the complexity here comes from the need to force unbuffered
stdin/stdout when interacting with kpsewhich (otherwise, things just
hang); this is also the reason why this is not implemented on Windows
(Windows experts are welcome to look into this...; there, the speedup
should be even more significant).  (On Linux, another solution, which
does not require a third-party dependency, is to call
`stdbuf -oL kpsewhich ...` and pass bufsize=0 to Popen(), but
`ptyprocess` is pure Python so adding a dependency seems reasonable).

The `format` kwarg to `find_tex_file` had never been used before, and
cannot be handled in the single-process case, so just deprecate it.

Edit: See https://github.com/matplotlib/matplotlib/pull/19558 for another approach, which also works on Windows for a large speedup.  I'll keep this PR as separate for now to allow comparing the various approaches.

## PR Summary

## PR Checklist

<!-- Please mark any checkboxes that do not apply to this PR as [N/A]. -->

- [ ] Has pytest style unit tests (and `pytest` passes).
- [ ] Is [Flake 8](https://flake8.pycqa.org/en/latest/) compliant (run `flake8` on changed files to check).
- [ ] New features are documented, with examples if plot related.
- [ ] Documentation is sphinx and numpydoc compliant (the docs should [build](https://matplotlib.org/devel/documenting_mpl.html#building-the-docs) without error).
- [ ] Conforms to Matplotlib style conventions (install `flake8-docstrings` and run `flake8 --docstring-convention=all`).
- [ ] New features have an entry in `doc/users/next_whats_new/` (follow instructions in README.rst there).
- [ ] API changes documented in `doc/api/next_api_changes/` (follow instructions in README.rst there).

<!--
Thank you so much for your PR!  To help us review your contribution, please
consider the following points:

- A development guide is available at https://matplotlib.org/devdocs/devel/index.html.

- Help with git and github is available at
  https://matplotlib.org/devel/gitwash/development_workflow.html.

- Do not create the PR out of master, but out of a separate branch.

- The PR title should summarize the changes, for example ""Raise ValueError on
  non-numeric input to set_xlim"".  Avoid non-descriptive titles such as
  ""Addresses issue #8576"".

- The summary should provide at least 1-2 sentences describing the pull request
  in detail (Why is this change required?  What problem does it solve?) and
  link to any relevant issues.

- If you are contributing fixes to docstrings, please pay attention to
  http://matplotlib.org/devel/documenting_mpl.html#formatting.  In particular,
  note the difference between using single backquotes, double backquotes, and
  asterisks in the markup.

We understand that PRs can sometimes be overwhelming, especially as the
reviews start coming in.  Please let us know if the reviews are unclear or
the recommended next step seems overly demanding, if you would like help in
addressing a reviewer's comments, or if you have been waiting too long to hear
back on your PR.
-->
",anntzer,open,2021-02-17 00:09:27,,,,2021-02-22 13:32:43,7,"OS/Apple, Performance, topic: text/usetex",,
809558093,AnnotationBbox returns weird window_extent?,"<!--To help us understand and resolve your issue, please fill out the form to the best of your ability.-->
<!--You can feel free to delete the sections that do not apply.-->

### Bug report

**Bug summary**

A TextArea that is placed onto the figure with an AnnotationBbox at the same location as an ax.text returns a different window extent and I can't figure out why that is / how to get the window extent in the same coordinates.

Same for AnnotationBbox with xycoords=fig.transFigure and fig.text.

**Code for reproduction**

```python
import matplotlib.pyplot as plt
import matplotlib as mpl
from matplotlib.offsetbox import AnnotationBbox, TextArea

fig, ax = plt.subplots(1, 2, figsize=(6, 4))

figtext = fig.text(s='text', x=0.5, y=0.5, ha='center', va='center', color='C1')

textarea = TextArea(s='text', textprops={'color': 'None'})
annobox = AnnotationBbox(textarea, xy=(0.5, 0.5),
                         bboxprops={'facecolor': 'lightgrey', 'alpha': 0.5, 'edgecolor': 'none'})
ax[0].add_artist(annobox)

axtext = ax[0].text(s='text', x=0.5, y=0.5, ha='center', va='center', color='C1', zorder=9)

textarea2 = TextArea(s='text', textprops={'color': 'None'})
annobox2 = AnnotationBbox(textarea2, xy=(0.5, 0.5), xycoords=fig.transFigure,
                         bboxprops={'facecolor': 'lightgrey', 'alpha': 0.5, 'edgecolor': 'none'})
ax[0].add_artist(annobox2)

plt.show()

renderer = fig.canvas.get_renderer()
print(axtext.get_window_extent(renderer),'\n',
      annobox.get_window_extent(renderer))

print(figtext.get_window_extent(renderer),'\n',
      annobox2.get_window_extent(renderer))
```

**Actual outcome**

<!--The output produced by the above code, which may be a screenshot, console output, etc.-->

```
Bbox(x0=120.27840909090907, y0=139.72, x1=139.90340909090907, y1=149.72) 
 Bbox(x0=184.5193181818182, y0=247.34000000000003, x1=383.9625, y1=282.34000000000003)

Bbox(x0=206.1875, y0=139.0, x1=225.8125, y1=149.0) 
 Bbox(x0=356.3375, y0=245.89999999999998, x1=411.9625, y1=280.9)
```

<img width=""380"" alt=""AnnotationBBox_example"" src=""https://user-images.githubusercontent.com/34557509/108106404-2f875f80-708e-11eb-84a6-e0965f7ba507.png"">


**Expected outcome**

I would expect to get the same window_extents returned both times as they show above one another on the plot.

**Matplotlib version**
<!--Please specify your platform and versions of the relevant libraries you are using:-->
  * Operating system: MacOS
  * Matplotlib version 3.3.2
  * Matplotlib backend module://ipykernel.pylab.backend_inline
  * Python version: 
  * Jupyter version (if applicable): 
  * Other libraries: 

<!--Please tell us how you installed matplotlib and python e.g., from source, pip, conda-->
<!--If you installed from conda, please specify which channel you used if not the default-->

",znstrider,open,2021-02-16 18:42:30,,,,2021-02-17 08:36:25,4,,,
809434385,Simplify checking for tex packages.,"It's already implemented in dviread.

## PR Summary

## PR Checklist

<!-- Please mark any checkboxes that do not apply to this PR as [N/A]. -->

- [ ] Has pytest style unit tests (and `pytest` passes).
- [ ] Is [Flake 8](https://flake8.pycqa.org/en/latest/) compliant (run `flake8` on changed files to check).
- [ ] New features are documented, with examples if plot related.
- [ ] Documentation is sphinx and numpydoc compliant (the docs should [build](https://matplotlib.org/devel/documenting_mpl.html#building-the-docs) without error).
- [ ] Conforms to Matplotlib style conventions (install `flake8-docstrings` and run `flake8 --docstring-convention=all`).
- [ ] New features have an entry in `doc/users/next_whats_new/` (follow instructions in README.rst there).
- [ ] API changes documented in `doc/api/next_api_changes/` (follow instructions in README.rst there).

<!--
Thank you so much for your PR!  To help us review your contribution, please
consider the following points:

- A development guide is available at https://matplotlib.org/devdocs/devel/index.html.

- Help with git and github is available at
  https://matplotlib.org/devel/gitwash/development_workflow.html.

- Do not create the PR out of master, but out of a separate branch.

- The PR title should summarize the changes, for example ""Raise ValueError on
  non-numeric input to set_xlim"".  Avoid non-descriptive titles such as
  ""Addresses issue #8576"".

- The summary should provide at least 1-2 sentences describing the pull request
  in detail (Why is this change required?  What problem does it solve?) and
  link to any relevant issues.

- If you are contributing fixes to docstrings, please pay attention to
  http://matplotlib.org/devel/documenting_mpl.html#formatting.  In particular,
  note the difference between using single backquotes, double backquotes, and
  asterisks in the markup.

We understand that PRs can sometimes be overwhelming, especially as the
reviews start coming in.  Please let us know if the reviews are unclear or
the recommended next step seems overly demanding, if you would like help in
addressing a reviewer's comments, or if you have been waiting too long to hear
back on your PR.
-->
",anntzer,closed,2021-02-16 15:59:16,,2021-02-16 19:47:24,jklymak,2021-02-16 20:07:42,0,"Maintenance, backend/pgf, topic: testing",v3.4.0,53
809379717,Unable to build on Jetson Xavier NX ,"
## Bug summary
Can't install matplotlib directly via pip3, or can't python3 setup.py install after downloading the package offline

#### install directly
`pip3 install matplotlib`
#### Actul outcome
```
 ERROR: Command errored out with exit status -4:
     command: /usr/bin/python3 -c 'import sys, setuptools, tokenize; sys.argv[0] = '""'""'/tmp/pip-install-blgjd4ml/matplotlib_dd61eacb074e4852bd9e041768be3aff/setup.py'""'""'; __file__='""'""'/tmp/pip-install-blgjd4ml/matplotlib_dd61eacb074e4852bd9e041768be3aff/setup.py'""'""';f=getattr(tokenize, '""'""'open'""'""', open)(__file__);code=f.read().replace('""'""'\r\n'""'""', '""'""'\n'""'""');f.close();exec(compile(code, __file__, '""'""'exec'""'""'))' egg_info --egg-base /tmp/pip-pip-egg-info-iyg9nbtj
         cwd: /tmp/pip-install-blgjd4ml/matplotlib_dd61eacb074e4852bd9e041768be3aff/
    Complete output (19 lines):
    
    Edit setup.cfg to change the build options; suppress output with --quiet.
    
    BUILDING MATPLOTLIB
      matplotlib: yes [3.3.4]
          python: yes [3.6.9 (default, Apr 18 2020, 01:56:04)  [GCC 8.4.0]]
        platform: yes [linux]
     sample_data: yes [installing]
           tests: no  [skipping due to configuration]
          macosx: no  [Mac OS-X only]
    
    running egg_info
    creating /tmp/pip-pip-egg-info-iyg9nbtj/matplotlib.egg-info
    writing /tmp/pip-pip-egg-info-iyg9nbtj/matplotlib.egg-info/PKG-INFO
    writing dependency_links to /tmp/pip-pip-egg-info-iyg9nbtj/matplotlib.egg-info/dependency_links.txt
    writing namespace_packages to /tmp/pip-pip-egg-info-iyg9nbtj/matplotlib.egg-info/namespace_packages.txt
    writing requirements to /tmp/pip-pip-egg-info-iyg9nbtj/matplotlib.egg-info/requires.txt
    writing top-level names to /tmp/pip-pip-egg-info-iyg9nbtj/matplotlib.egg-info/top_level.txt
    writing manifest file '/tmp/pip-pip-egg-info-iyg9nbtj/matplotlib.egg-info/SOURCES.txt'
    ----------------------------------------
```
**and continue installing lower versions after the error is reported, and so on.**

### Installing with the offline installer

In the unpacked file
`sudo python3 setup.py install`

#### Actul outcome
```
Edit setup.cfg to change the build options; suppress output with --quiet.

BUILDING MATPLOTLIB
  matplotlib: yes [3.3.4]
      python: yes [3.6.9 (default, Apr 18 2020, 01:56:04)  [GCC 8.4.0]]
    platform: yes [linux]
 sample_data: yes [installing]
       tests: no  [skipping due to configuration]
      macosx: no  [Mac OS-X only]

running install
running bdist_egg
running egg_info
writing lib/matplotlib.egg-info/PKG-INFO
writing dependency_links to lib/matplotlib.egg-info/dependency_links.txt
writing namespace_packages to lib/matplotlib.egg-info/namespace_packages.txt
writing requirements to lib/matplotlib.egg-info/requires.txt
writing top-level names to lib/matplotlib.egg-info/top_level.txt
Illegal commands
```

I have seen similar problems and I have executed
`sudo apt install libfreetype6-dev`
",L-QF,closed,2021-02-16 14:52:48,,2021-02-16 15:24:33,jklymak,2021-02-16 15:24:48,1,"Community support, status: duplicate",,
809250238,Adding text with kwarg 'font' overwrites previous kwargs,"### Bug report

**Bug summary**

When adding text, if you use the (undocumented) kwarg `font`, it works but overwrites previous kwargs like `fontsize` and `fontstyle` with defaults.  This does not happen if you use other kwarg options like `fontname`, `name`, `fontdict['name']`, etc instead of `font`.

**Code for reproduction**

```python
import matplotlib.pyplot as plt
fig, ax = plt.subplots(figsize=(4.5, 5))
ax.axis('off')
name = 'DejaVu Sans Mono'

ax.text(0,  1.05, ""kwarg fontsize"", fontsize=20, name=name)
ax.text(0,  0.95, ""kwarg fontsize"", name=name, fontsize=20)

ax.text(0,  0.8,  ""kwarg fontname"", fontsize=20, fontname=name)
ax.text(0,  0.7,  ""kwarg fontname"", fontname=name, fontsize=20)

ax.text(0,  0.55, ""kwarg fontdict['font']"", fontsize=20, fontdict={'font': name})
ax.text(0,  0.45, ""kwarg fontdict['font']"", fontdict={'font': name}, fontsize=20)

ax.text(0,  0.3,  ""kwarg fontdict['name']"", fontsize=20, fontdict={'name': name})
ax.text(0,  0.2,  ""kwarg fontdict['name']"", fontdict={'name': name}, fontsize=20)

ax.text(0,  0.05, ""kwarg font"", fontsize=20, font=name)
ax.text(0, -0.05, ""kwarg font"", font=name, fontsize=20)
plt.show()
```

**Actual outcome**

![text_problem](https://user-images.githubusercontent.com/580326/108059262-232ee280-704d-11eb-9a4e-eae5fee13dc3.png)


**Expected outcome**

One of these 2 options:
- It should produce the correct results regardless of kwarg order.
- kwarg `font` shouldn't work at all.

**Matplotlib version**

  * Matplotlib version: 3.3.4
  * Matplotlib backend: Qt5Agg
  * Python version: 3.9.1
Installed via conda.",ianthomas23,closed,2021-02-16 11:59:41,,2021-02-16 13:12:12,ianthomas23,2021-02-16 13:12:12,2,"status: duplicate, topic: text/fonts",,
809212776,Apply unit conversion early in errorbar().,"This allow using normal numpy constructs rather than manually looping
and broadcasting.

_process_unit_info was already special-handling `data is None` in a few
places; the change here only handle the (theoretical) extra case where a
custom unit converter would fail to properly pass None through.

## PR Summary

## PR Checklist

<!-- Please mark any checkboxes that do not apply to this PR as [N/A]. -->

- [ ] Has pytest style unit tests (and `pytest` passes).
- [ ] Is [Flake 8](https://flake8.pycqa.org/en/latest/) compliant (run `flake8` on changed files to check).
- [ ] New features are documented, with examples if plot related.
- [ ] Documentation is sphinx and numpydoc compliant (the docs should [build](https://matplotlib.org/devel/documenting_mpl.html#building-the-docs) without error).
- [ ] Conforms to Matplotlib style conventions (install `flake8-docstrings` and run `flake8 --docstring-convention=all`).
- [ ] New features have an entry in `doc/users/next_whats_new/` (follow instructions in README.rst there).
- [ ] API changes documented in `doc/api/next_api_changes/` (follow instructions in README.rst there).

<!--
Thank you so much for your PR!  To help us review your contribution, please
consider the following points:

- A development guide is available at https://matplotlib.org/devdocs/devel/index.html.

- Help with git and github is available at
  https://matplotlib.org/devel/gitwash/development_workflow.html.

- Do not create the PR out of master, but out of a separate branch.

- The PR title should summarize the changes, for example ""Raise ValueError on
  non-numeric input to set_xlim"".  Avoid non-descriptive titles such as
  ""Addresses issue #8576"".

- The summary should provide at least 1-2 sentences describing the pull request
  in detail (Why is this change required?  What problem does it solve?) and
  link to any relevant issues.

- If you are contributing fixes to docstrings, please pay attention to
  http://matplotlib.org/devel/documenting_mpl.html#formatting.  In particular,
  note the difference between using single backquotes, double backquotes, and
  asterisks in the markup.

We understand that PRs can sometimes be overwhelming, especially as the
reviews start coming in.  Please let us know if the reviews are unclear or
the recommended next step seems overly demanding, if you would like help in
addressing a reviewer's comments, or if you have been waiting too long to hear
back on your PR.
-->
",anntzer,closed,2021-02-16 11:03:07,,2021-04-05 09:07:52,dstansby,2021-04-05 18:49:38,10,"Maintenance, topic: units",v3.5.0,59
809158727,Don't create page transparency group in pdf output (for pdftex compat).,"## PR Summary

Closes https://github.com/matplotlib/matplotlib/issues/19506, see discussion there.

## PR Checklist

<!-- Please mark any checkboxes that do not apply to this PR as [N/A]. -->

- [ ] Has pytest style unit tests (and `pytest` passes).
- [ ] Is [Flake 8](https://flake8.pycqa.org/en/latest/) compliant (run `flake8` on changed files to check).
- [ ] New features are documented, with examples if plot related.
- [ ] Documentation is sphinx and numpydoc compliant (the docs should [build](https://matplotlib.org/devel/documenting_mpl.html#building-the-docs) without error).
- [ ] Conforms to Matplotlib style conventions (install `flake8-docstrings` and run `flake8 --docstring-convention=all`).
- [ ] New features have an entry in `doc/users/next_whats_new/` (follow instructions in README.rst there).
- [ ] API changes documented in `doc/api/next_api_changes/` (follow instructions in README.rst there).

<!--
Thank you so much for your PR!  To help us review your contribution, please
consider the following points:

- A development guide is available at https://matplotlib.org/devdocs/devel/index.html.

- Help with git and github is available at
  https://matplotlib.org/devel/gitwash/development_workflow.html.

- Do not create the PR out of master, but out of a separate branch.

- The PR title should summarize the changes, for example ""Raise ValueError on
  non-numeric input to set_xlim"".  Avoid non-descriptive titles such as
  ""Addresses issue #8576"".

- The summary should provide at least 1-2 sentences describing the pull request
  in detail (Why is this change required?  What problem does it solve?) and
  link to any relevant issues.

- If you are contributing fixes to docstrings, please pay attention to
  http://matplotlib.org/devel/documenting_mpl.html#formatting.  In particular,
  note the difference between using single backquotes, double backquotes, and
  asterisks in the markup.

We understand that PRs can sometimes be overwhelming, especially as the
reviews start coming in.  Please let us know if the reviews are unclear or
the recommended next step seems overly demanding, if you would like help in
addressing a reviewer's comments, or if you have been waiting too long to hear
back on your PR.
-->
",anntzer,open,2021-02-16 09:55:38,,,,2021-02-16 09:55:38,0,backend/pdf,,
809128621,Add draw_style to fill_between,"### Problem
I would like it if the area painted by fill_between aligned properly with a plot that has draw_style flags

### Proposed Solution
I would propose to add draw_style to fill_between

### Additional context and prior art
Having a plot_date that has drawstyle=""steps-post"" if you use fill_between the area that is painted is just the area like if the drawstyle was set to the default value and generates a filled area that does not fit inside the lines.
What I am proposing here is that fill_between has the option to receive the same drawstyle that exists in as an example in plot_date so that the area that is filled with color and the lines of the plot are aligned properly.
![image](https://user-images.githubusercontent.com/66196409/108042184-55602600-6ff4-11eb-89f2-2712d09aeb13.png)

",jllamasaspa,closed,2021-02-16 09:17:18,,2021-02-17 01:19:24,jllamasaspa,2021-03-06 04:48:08,1,New feature,,
809125188,"""Auto-wrapping text"" example does not work with inline backend, add link to bugreport/workaround","<!--To help us understand and resolve your issue, please fill out the form to the best of your ability.-->
<!--You can feel free to delete the sections that do not apply.-->

### Problem

In the matplotlib gallery, there is an auto-wrapping example, which also provides a sample jupyter notebook:

[https://matplotlib.org/stable/gallery/text_labels_and_annotations/autowrap.html](https://matplotlib.org/stable/gallery/text_labels_and_annotations/autowrap.html)

However, due to bug #10869, the auto-wrapping in Jupyter does not work. 

### Suggested Improvement

It would be nice if a note about #10869 could be added in the example, or even possibly the fix indicated in that bug report be included in the notebook.

**Matplotlib version**
<!--Please specify the version of matplotlib and the version of the documentation that you are using:-->
  * Operating system: Windows 10
  * Matplotlib version: **3.3.3** and **3.2.2**
  * Matplotlib documentation version: Stable version from the website, as linked to above",mghansen256,open,2021-02-16 09:12:35,,,timhoffm,2021-02-19 15:07:50,6,"Documentation, third-party integration: jupyter",,
808930185,Add emojis to issue template titles,"## PR Summary
Follow up to https://github.com/matplotlib/matplotlib/pull/19521
",ianhi,open,2021-02-16 02:14:38,,,,2021-03-15 17:35:21,8,,,
808911375,use config.yml to redirect questions,"## PR Summary
Removes the questions template and makes the button for that redirect to discourse.

You can see what this would look like in practice here: https://github.com/napari/napari/issues/new/choose

![image](https://user-images.githubusercontent.com/10111092/108006672-1d43ed80-6fca-11eb-851b-a7a17f46b7e1.png)

## PR Checklist

nothing applicable I suppose


",ianhi,closed,2021-02-16 01:12:54,,2021-02-16 01:51:30,tacaswell,2021-02-16 02:02:31,3,,,
808909012,Create a reference example for `set_data` and friends,"<!--To help us understand and resolve your issue, please fill out the form to the best of your ability.-->
<!--You can feel free to delete the sections that do not apply.-->

### Problem
It's tricky to learn that you should use `set_data` when animating. When i first got into this I was essentially doing:
```python
for t in range(timepoints):
    ax.imshow(data[t])
```
which is bad news for performance. I fortunately had someone around to tell me to use `set_data` but lacking that I think it would have taken me a lot longer to figure out. 

However, even after figuring that out it's not all smooth sailing. I was tripped up for quite awhile on how to animate a scatter plot as it uses `set_offsets` instead of `set_data`. There can also be other complications see for example https://github.com/matplotlib/matplotlib/issues/18401. 


### Suggested Improvement
Include a reference style example in the animation section of the gallery that goes over how to animate all the possible animatable artists (`set_data`, `set_offsets`, etc...). Or at least all of the artists that get returned from pyplot functions. Ideally the example would use the artists created from pyplot(or equivalent `ax`) functions as this is how I imagine most people will create the artists for their animations.

For reference I brought this up on gitter, but gitter just crashed :(

**Matplotlib version**
  * Matplotlib documentation version: any",ianhi,open,2021-02-16 01:05:26,,,,2021-02-24 20:32:28,2,"Documentation, Documentation/new page, topic: animation",,
808874618,Too much white space around graphs in 3d projection,"When using 3d projection:

fig = plt.figure(figsize=(20,15))
ax = fig.gca(projection='3d')

and save the figure into png file, there is way too much white space from left right top and bottom, so when I want to add this graph into latex and use it in publication, I have to do post-processing of the image and remove unnecessary amount of blank space.",pepe78,open,2021-02-15 23:25:31,,,pepe78,2021-02-16 17:40:15,7,"Community support, topic: mplot3d",,
808780183,Skip setting up a tmpdir in tests that don't need one.,"## PR Summary

## PR Checklist

<!-- Please mark any checkboxes that do not apply to this PR as [N/A]. -->

- [ ] Has pytest style unit tests (and `pytest` passes).
- [ ] Is [Flake 8](https://flake8.pycqa.org/en/latest/) compliant (run `flake8` on changed files to check).
- [ ] New features are documented, with examples if plot related.
- [ ] Documentation is sphinx and numpydoc compliant (the docs should [build](https://matplotlib.org/devel/documenting_mpl.html#building-the-docs) without error).
- [ ] Conforms to Matplotlib style conventions (install `flake8-docstrings` and run `flake8 --docstring-convention=all`).
- [ ] New features have an entry in `doc/users/next_whats_new/` (follow instructions in README.rst there).
- [ ] API changes documented in `doc/api/next_api_changes/` (follow instructions in README.rst there).

<!--
Thank you so much for your PR!  To help us review your contribution, please
consider the following points:

- A development guide is available at https://matplotlib.org/devdocs/devel/index.html.

- Help with git and github is available at
  https://matplotlib.org/devel/gitwash/development_workflow.html.

- Do not create the PR out of master, but out of a separate branch.

- The PR title should summarize the changes, for example ""Raise ValueError on
  non-numeric input to set_xlim"".  Avoid non-descriptive titles such as
  ""Addresses issue #8576"".

- The summary should provide at least 1-2 sentences describing the pull request
  in detail (Why is this change required?  What problem does it solve?) and
  link to any relevant issues.

- If you are contributing fixes to docstrings, please pay attention to
  http://matplotlib.org/devel/documenting_mpl.html#formatting.  In particular,
  note the difference between using single backquotes, double backquotes, and
  asterisks in the markup.

We understand that PRs can sometimes be overwhelming, especially as the
reviews start coming in.  Please let us know if the reviews are unclear or
the recommended next step seems overly demanding, if you would like help in
addressing a reviewer's comments, or if you have been waiting too long to hear
back on your PR.
-->
",anntzer,closed,2021-02-15 19:45:17,,2021-02-16 01:52:56,tacaswell,2021-02-16 07:49:45,0,"Maintenance, topic: testing",v3.4.0,53
808770762,"Deprecate toplevel is_url, URL_REGEX helpers.","They certainly don't warrant being defined at the toplevel.  Also, we
don't actually need regexes here.

## PR Summary

## PR Checklist

<!-- Please mark any checkboxes that do not apply to this PR as [N/A]. -->

- [ ] Has pytest style unit tests (and `pytest` passes).
- [ ] Is [Flake 8](https://flake8.pycqa.org/en/latest/) compliant (run `flake8` on changed files to check).
- [ ] New features are documented, with examples if plot related.
- [ ] Documentation is sphinx and numpydoc compliant (the docs should [build](https://matplotlib.org/devel/documenting_mpl.html#building-the-docs) without error).
- [ ] Conforms to Matplotlib style conventions (install `flake8-docstrings` and run `flake8 --docstring-convention=all`).
- [ ] New features have an entry in `doc/users/next_whats_new/` (follow instructions in README.rst there).
- [ ] API changes documented in `doc/api/next_api_changes/` (follow instructions in README.rst there).

<!--
Thank you so much for your PR!  To help us review your contribution, please
consider the following points:

- A development guide is available at https://matplotlib.org/devdocs/devel/index.html.

- Help with git and github is available at
  https://matplotlib.org/devel/gitwash/development_workflow.html.

- Do not create the PR out of master, but out of a separate branch.

- The PR title should summarize the changes, for example ""Raise ValueError on
  non-numeric input to set_xlim"".  Avoid non-descriptive titles such as
  ""Addresses issue #8576"".

- The summary should provide at least 1-2 sentences describing the pull request
  in detail (Why is this change required?  What problem does it solve?) and
  link to any relevant issues.

- If you are contributing fixes to docstrings, please pay attention to
  http://matplotlib.org/devel/documenting_mpl.html#formatting.  In particular,
  note the difference between using single backquotes, double backquotes, and
  asterisks in the markup.

We understand that PRs can sometimes be overwhelming, especially as the
reviews start coming in.  Please let us know if the reviews are unclear or
the recommended next step seems overly demanding, if you would like help in
addressing a reviewer's comments, or if you have been waiting too long to hear
back on your PR.
-->
",anntzer,closed,2021-02-15 19:26:18,,2021-03-01 23:24:16,QuLogic,2021-03-01 23:37:28,0,Maintenance,v3.5.0,59
808504906,Ignore files from annotate coverage reports,"## PR Summary

Hi,

This PR ignores coverage files generated per python files

This avoid to have the following `git status` output

```
Untracked files:
  (use ""git add <file>..."" to include in what will be committed)

	lib/matplotlib/__init__.py,cover
	lib/matplotlib/_animation_data.py,cover
	lib/matplotlib/_api/__init__.py,cover
	lib/matplotlib/_api/deprecation.py,cover
	lib/matplotlib/_cm.py,cover
	lib/matplotlib/_cm_listed.py,cover
	lib/matplotlib/_color_data.py,cover
	lib/matplotlib/_constrained_layout.py,cover
	lib/matplotlib/_enums.py,cover
	lib/matplotlib/_internal_utils.py,cover
	lib/matplotlib/_layoutbox.py,cover
	lib/matplotlib/_layoutgrid.py,cover
	lib/matplotlib/_mathtext.py,cover
        [...]
```


## PR Checklist

<!-- Please mark any checkboxes that do not apply to this PR as [N/A]. -->

- [ ] Has pytest style unit tests (and `pytest` passes).
- [ ] Is [Flake 8](https://flake8.pycqa.org/en/latest/) compliant (run `flake8` on changed files to check).
- [ ] New features are documented, with examples if plot related.
- [ ] Documentation is sphinx and numpydoc compliant (the docs should [build](https://matplotlib.org/devel/documenting_mpl.html#building-the-docs) without error).
- [ ] Conforms to Matplotlib style conventions (install `flake8-docstrings` and run `flake8 --docstring-convention=all`).
- [ ] New features have an entry in `doc/users/next_whats_new/` (follow instructions in README.rst there).
- [ ] API changes documented in `doc/api/next_api_changes/` (follow instructions in README.rst there).

<!--
Thank you so much for your PR!  To help us review your contribution, please
consider the following points:

- A development guide is available at https://matplotlib.org/devdocs/devel/index.html.

- Help with git and github is available at
  https://matplotlib.org/devel/gitwash/development_workflow.html.

- Do not create the PR out of master, but out of a separate branch.

- The PR title should summarize the changes, for example ""Raise ValueError on
  non-numeric input to set_xlim"".  Avoid non-descriptive titles such as
  ""Addresses issue #8576"".

- The summary should provide at least 1-2 sentences describing the pull request
  in detail (Why is this change required?  What problem does it solve?) and
  link to any relevant issues.

- If you are contributing fixes to docstrings, please pay attention to
  http://matplotlib.org/devel/documenting_mpl.html#formatting.  In particular,
  note the difference between using single backquotes, double backquotes, and
  asterisks in the markup.

We understand that PRs can sometimes be overwhelming, especially as the
reviews start coming in.  Please let us know if the reviews are unclear or
the recommended next step seems overly demanding, if you would like help in
addressing a reviewer's comments, or if you have been waiting too long to hear
back on your PR.
-->
",vallsv,closed,2021-02-15 12:39:34,,2021-02-16 16:25:24,jklymak,2021-02-16 19:01:52,3,,v3.4.0,53
808158324,[WIP] Colorbar axis zoom and pan,"## PR Summary

I've wanted to zoom/pan on values rather than extents of the image before and haven't figured out a clean way to do that without adding widgets. For example, if I set the range poorly the first time with my data and want to zoom in on a specific region of data, or if outliers made the vmin/vmax too large the first time. This adds zoom and pan capabilities to the colorbar. When zooming and panning on the axis, this updates the vmin/vmax of the scalar mappable norm associated with the colorbar. Currently, this changes the xlim/ylim of the axis holding the colorbar, which I don't think is desired behavior. This builds off of #18900 to handle the events in the parent axis.

![test_colorbar2](https://user-images.githubusercontent.com/12417828/107905688-82d1a480-6f0c-11eb-87f6-e1fd885a0b61.gif)

Before adding tests, I wanted to see if this is even a desired enhancement.

The second commit artificially removes the update check to force Quadmesh to update and demo on those meshes. I'll need to think about how to add stale flags to the vmin/vmax on Normalize to force the redraw on those collections too.

For this to work, we need the parent axis for events, and the scalar mappable object. I wasn't sure where the best place to implement these methods is, as we need to override the parent axis event handlers, but that doesn't have access to the scalarmappable... I might be overlooking something obvious here too, so better suggestions welcome
.

Interactive example if you use the zoom/pan on the colorbar axis:
```python
import matplotlib as mpl
import matplotlib.pyplot as plt
import numpy as np


rand_data = np.random.random((10, 10))*100

fig, [ax1, ax2, ax3] = plt.subplots(ncols=3)
cm = mpl.cm.get_cmap('plasma')
norm = mpl.colors.LogNorm(1, 100)
sm = mpl.cm.ScalarMappable(norm=norm, cmap=cm)

mesh1 = ax1.pcolor(rand_data, cmap=cm, norm=norm)
mesh2 = ax2.pcolorfast(rand_data, cmap=cm, norm=norm)
mesh3 = ax3.pcolormesh(rand_data, cmap=cm, norm=norm,)

cb3 = fig.colorbar(sm, ax=[ax1, ax2, ax3],
                   extend='max', orientation='horizontal')

plt.show()
```

## PR Checklist

<!-- Please mark any checkboxes that do not apply to this PR as [N/A]. -->

- [ ] Has pytest style unit tests (and `pytest` passes).
- [ ] Is [Flake 8](https://flake8.pycqa.org/en/latest/) compliant (run `flake8` on changed files to check).
- [ ] New features are documented, with examples if plot related.
- [ ] Documentation is sphinx and numpydoc compliant (the docs should [build](https://matplotlib.org/devel/documenting_mpl.html#building-the-docs) without error).
- [ ] Conforms to Matplotlib style conventions (install `flake8-docstrings` and run `flake8 --docstring-convention=all`).
- [ ] New features have an entry in `doc/users/next_whats_new/` (follow instructions in README.rst there).
- [ ] API changes documented in `doc/api/next_api_changes/` (follow instructions in README.rst there).

<!--
Thank you so much for your PR!  To help us review your contribution, please
consider the following points:

- A development guide is available at https://matplotlib.org/devdocs/devel/index.html.

- Help with git and github is available at
  https://matplotlib.org/devel/gitwash/development_workflow.html.

- Do not create the PR out of master, but out of a separate branch.

- The PR title should summarize the changes, for example ""Raise ValueError on
  non-numeric input to set_xlim"".  Avoid non-descriptive titles such as
  ""Addresses issue #8576"".

- The summary should provide at least 1-2 sentences describing the pull request
  in detail (Why is this change required?  What problem does it solve?) and
  link to any relevant issues.

- If you are contributing fixes to docstrings, please pay attention to
  http://matplotlib.org/devel/documenting_mpl.html#formatting.  In particular,
  note the difference between using single backquotes, double backquotes, and
  asterisks in the markup.

We understand that PRs can sometimes be overwhelming, especially as the
reviews start coming in.  Please let us know if the reviews are unclear or
the recommended next step seems overly demanding, if you would like help in
addressing a reviewer's comments, or if you have been waiting too long to hear
back on your PR.
-->
",greglucas,open,2021-02-15 04:36:51,,,,2021-02-16 23:57:44,1,"New feature, topic: color/colorbar",,
808079566,DOC: add fixed-aspect colorbar examples,"## PR Summary

Update the colorbar placement tutorial to point out the utility of `ax.inset_axes` for placing colorbars when the axes has fixed aspect ratios...



## PR Checklist

<!-- Please mark any checkboxes that do not apply to this PR as [N/A]. -->

- [ ] Has pytest style unit tests (and `pytest` passes).
- [ ] Is [Flake 8](https://flake8.pycqa.org/en/latest/) compliant (run `flake8` on changed files to check).
- [ ] New features are documented, with examples if plot related.
- [ ] Documentation is sphinx and numpydoc compliant (the docs should [build](https://matplotlib.org/devel/documenting_mpl.html#building-the-docs) without error).
- [ ] Conforms to Matplotlib style conventions (install `flake8-docstrings` and run `flake8 --docstring-convention=all`).
- [ ] New features have an entry in `doc/users/next_whats_new/` (follow instructions in README.rst there).
- [ ] API changes documented in `doc/api/next_api_changes/` (follow instructions in README.rst there).

<!--
Thank you so much for your PR!  To help us review your contribution, please
consider the following points:

- A development guide is available at https://matplotlib.org/devdocs/devel/index.html.

- Help with git and github is available at
  https://matplotlib.org/devel/gitwash/development_workflow.html.

- Do not create the PR out of master, but out of a separate branch.

- The PR title should summarize the changes, for example ""Raise ValueError on
  non-numeric input to set_xlim"".  Avoid non-descriptive titles such as
  ""Addresses issue #8576"".

- The summary should provide at least 1-2 sentences describing the pull request
  in detail (Why is this change required?  What problem does it solve?) and
  link to any relevant issues.

- If you are contributing fixes to docstrings, please pay attention to
  http://matplotlib.org/devel/documenting_mpl.html#formatting.  In particular,
  note the difference between using single backquotes, double backquotes, and
  asterisks in the markup.

We understand that PRs can sometimes be overwhelming, especially as the
reviews start coming in.  Please let us know if the reviews are unclear or
the recommended next step seems overly demanding, if you would like help in
addressing a reviewer's comments, or if you have been waiting too long to hear
back on your PR.
-->
",jklymak,closed,2021-02-15 00:07:34,,2021-02-15 22:13:45,timhoffm,2021-02-15 23:39:53,1,Documentation,v3.4.0,53
808071214,"ImportError: cannot import name ""pyplot"" from ""matplotlib"" (unknown location)","Hi, I've been using the matplotlib library but by some reason today started to fail while trying to load pyplot.

This is the error I have now:

>>> import matplotlib
>>> from matplotlib import pyplot as plt
Traceback (most recent call last):
  File ""<stdin>"", line 1, in <module>
ImportError: cannot import name 'pyplot' from 'matplotlib' (unknown location)

I've been trying several things like downgrading and uninstalling - reinstalling using conda and pip but with the same result.

Please, help me with this.

I'm running this on Anaconda in Windows 10..",bpinedaf,closed,2021-02-14 23:22:24,,2021-02-15 00:09:02,jklymak,2021-02-15 00:09:09,1,Community support,,
808045537,How do i rotate x axis text values,"version 3.1.3
I have date data. But all x labels seems intertwined..
Thanks for all comments.

![image](https://user-images.githubusercontent.com/9121424/107888839-e87b5c00-6f1f-11eb-908e-23aa7d840e62.png)



`plt.bar(dfr['Tarih'],dfr['Bugünkü Vefat Sayýsý'])

plt.xlabel('tarih')

plt.ylabel('vefat')

plt.show()`
",bsbilal,closed,2021-02-14 20:56:11,,2021-02-15 00:20:23,jklymak,2021-02-15 00:20:23,1,Community support,,
808040477,Clarify axes.autolimit_mode rcParam.,"(see also the Axes.autoscale_view docstring)

Closes https://github.com/matplotlib/matplotlib/issues/2298 (mostly, the existence of `axes.autolimit_mode` allows toggling the behavior desired by the issue reporter).

## PR Summary

## PR Checklist

<!-- Please mark any checkboxes that do not apply to this PR as [N/A]. -->

- [ ] Has pytest style unit tests (and `pytest` passes).
- [ ] Is [Flake 8](https://flake8.pycqa.org/en/latest/) compliant (run `flake8` on changed files to check).
- [ ] New features are documented, with examples if plot related.
- [ ] Documentation is sphinx and numpydoc compliant (the docs should [build](https://matplotlib.org/devel/documenting_mpl.html#building-the-docs) without error).
- [ ] Conforms to Matplotlib style conventions (install `flake8-docstrings` and run `flake8 --docstring-convention=all`).
- [ ] New features have an entry in `doc/users/next_whats_new/` (follow instructions in README.rst there).
- [ ] API changes documented in `doc/api/next_api_changes/` (follow instructions in README.rst there).

<!--
Thank you so much for your PR!  To help us review your contribution, please
consider the following points:

- A development guide is available at https://matplotlib.org/devdocs/devel/index.html.

- Help with git and github is available at
  https://matplotlib.org/devel/gitwash/development_workflow.html.

- Do not create the PR out of master, but out of a separate branch.

- The PR title should summarize the changes, for example ""Raise ValueError on
  non-numeric input to set_xlim"".  Avoid non-descriptive titles such as
  ""Addresses issue #8576"".

- The summary should provide at least 1-2 sentences describing the pull request
  in detail (Why is this change required?  What problem does it solve?) and
  link to any relevant issues.

- If you are contributing fixes to docstrings, please pay attention to
  http://matplotlib.org/devel/documenting_mpl.html#formatting.  In particular,
  note the difference between using single backquotes, double backquotes, and
  asterisks in the markup.

We understand that PRs can sometimes be overwhelming, especially as the
reviews start coming in.  Please let us know if the reviews are unclear or
the recommended next step seems overly demanding, if you would like help in
addressing a reviewer's comments, or if you have been waiting too long to hear
back on your PR.
-->
",anntzer,closed,2021-02-14 20:28:36,,2021-02-15 00:10:41,jklymak,2021-02-16 23:51:55,0,Documentation,v3.4.0,53
807927535,Update .gitignore,"ADDED A TEXT ON THE TOP

## PR Summary

## PR Checklist

<!-- Please mark any checkboxes that do not apply to this PR as [N/A]. -->

- [ ] Has pytest style unit tests (and `pytest` passes).
- [ ] Is [Flake 8](https://flake8.pycqa.org/en/latest/) compliant (run `flake8` on changed files to check).
- [ ] New features are documented, with examples if plot related.
- [ ] Documentation is sphinx and numpydoc compliant (the docs should [build](https://matplotlib.org/devel/documenting_mpl.html#building-the-docs) without error).
- [ ] Conforms to Matplotlib style conventions (install `flake8-docstrings` and run `flake8 --docstring-convention=all`).
- [ ] New features have an entry in `doc/users/next_whats_new/` (follow instructions in README.rst there).
- [ ] API changes documented in `doc/api/next_api_changes/` (follow instructions in README.rst there).

<!--
Thank you so much for your PR!  To help us review your contribution, please
consider the following points:

- A development guide is available at https://matplotlib.org/devdocs/devel/index.html.

- Help with git and github is available at
  https://matplotlib.org/devel/gitwash/development_workflow.html.

- Do not create the PR out of master, but out of a separate branch.

- The PR title should summarize the changes, for example ""Raise ValueError on
  non-numeric input to set_xlim"".  Avoid non-descriptive titles such as
  ""Addresses issue #8576"".

- The summary should provide at least 1-2 sentences describing the pull request
  in detail (Why is this change required?  What problem does it solve?) and
  link to any relevant issues.

- If you are contributing fixes to docstrings, please pay attention to
  http://matplotlib.org/devel/documenting_mpl.html#formatting.  In particular,
  note the difference between using single backquotes, double backquotes, and
  asterisks in the markup.

We understand that PRs can sometimes be overwhelming, especially as the
reviews start coming in.  Please let us know if the reviews are unclear or
the recommended next step seems overly demanding, if you would like help in
addressing a reviewer's comments, or if you have been waiting too long to hear
back on your PR.
-->
",avdul-q101,closed,2021-02-14 09:57:37,,2021-02-14 15:06:14,jklymak,2021-02-15 00:32:48,0,status: invalid,,
807869572,Adding lightsource when plotting Poly3DCollection,"I am trying to visualize a .stl file using the libraries numpy-stl and mplot3D. 
```

new_mesh = mesh.Mesh.from_file('result.stl')
figure = plt.Figure(figsize=(6.4,5.4), dpi=100) 
ax = mplot3d.Axes3D(figure)
ax.add_collection3d(mplot3d.art3d.Poly3DCollection(new_mesh.vectors))
```

But in the plot we can barely see any features and its quite flat. Is it possible to add a `lightsource `option for Poly3DCollections.
![mplot3d plot](https://user-images.githubusercontent.com/71412585/107866345-dec40b00-6ec3-11eb-8b45-347ef01d2fef.PNG)
",n2d7,open,2021-02-14 01:55:27,,,,2021-02-16 23:55:33,0,"New feature, topic: mplot3d",,
807626471,Add user defined font entry with custom name,"### Problem

In order to add a custom font with chosen alias (name) i find myself doing this:

```py
from matplotlib.font_manager import fontManager, FontEntry

fontManager.ttflist.append(FontEntry(
    fname='MyFont1.ttf',
    name='MyFont1',
    size='large',
    style='normal',
    variant='normal',
    weight='normal',
    stretch='normal'
))
```

This is the only way I can use the font 'MyFont1' by name in code (like set_title) and in rcParams.

### Proposed Solution

New function add_font_entry(entry):

```py
from matplotlib.font_manager import add_font_entry

add_font_entry(
    fname='MyFont1.ttf',
    name='MyFont1',
    size='large',
    style='normal',
    variant='normal',
    weight='normal',
    stretch='normal'
)

```",spajak,open,2021-02-13 00:13:00,,,,2021-02-15 10:09:36,10,"New feature, status: needs patch, topic: text/fonts",,
807600698,FIX: ensure we import when the user cwd does not exist,"## PR Summary

This is the only place that we directly access the cwd in the main library.

You can drive your self to this state by in one shell cd'ing to a directory and then from a different shell removing that directory.  The first shell will still think it's working directory is the (now non-existent) path and mild chaos ensues.

This has probably been broken forever (at least back to the 2.2.x series), however I do not think that it is worth the trouble to set up this weird state in the tests.   If you are in this state IPyhon will not start and PyQt5 will not import.


## PR Checklist

<!-- Please mark any checkboxes that do not apply to this PR as [N/A]. -->

- [ ] Has pytest style unit tests (and `pytest` passes).
- [x] Is [Flake 8](https://flake8.pycqa.org/en/latest/) compliant (run `flake8` on changed files to check).
- [x] Conforms to Matplotlib style conventions (install `flake8-docstrings` and run `flake8 --docstring-convention=all`).

<!--
Thank you so much for your PR!  To help us review your contribution, please
consider the following points:

- A development guide is available at https://matplotlib.org/devdocs/devel/index.html.

- Help with git and github is available at
  https://matplotlib.org/devel/gitwash/development_workflow.html.

- Do not create the PR out of master, but out of a separate branch.

- The PR title should summarize the changes, for example ""Raise ValueError on
  non-numeric input to set_xlim"".  Avoid non-descriptive titles such as
  ""Addresses issue #8576"".

- The summary should provide at least 1-2 sentences describing the pull request
  in detail (Why is this change required?  What problem does it solve?) and
  link to any relevant issues.

- If you are contributing fixes to docstrings, please pay attention to
  http://matplotlib.org/devel/documenting_mpl.html#formatting.  In particular,
  note the difference between using single backquotes, double backquotes, and
  asterisks in the markup.

We understand that PRs can sometimes be overwhelming, especially as the
reviews start coming in.  Please let us know if the reviews are unclear or
the recommended next step seems overly demanding, if you would like help in
addressing a reviewer's comments, or if you have been waiting too long to hear
back on your PR.
-->
",tacaswell,closed,2021-02-12 22:58:36,,2021-02-17 22:41:49,QuLogic,2021-02-18 01:32:41,3,,v3.4.0,53
807067888,Allow saving PDF files without a page group,"### Problem

My problem is shown with this code, creating `bug.pdf` with `matplotlib` and then reusing that figure in `pdflatex`:

```
echo ""import matplotlib.pyplot as plt;plt.figure();plt.savefig('bug.pdf')"" | python3 -
cp bug.pdf bug2.pdf
echo ""\documentclass{article}\usepackage{graphicx}\begin{document}
\includegraphics[height=1in]{bug}\includegraphics[height=1in]{bug2}
\end{document}"" | pdflatex | grep -A 1 warning
```

What's the problem?
> pdfTeX warning: pdflatex (file ./bug2.pdf): PDF inclusion: multiple pdfs with page group included in a single page

Find a lot of information on this problem at https://tex.stackexchange.com/a/78020/30810

What solves the problem in my case is deleting the page group (by replacing with spaces to maintain file size):

```
grep -a Group bug.pdf
sed -i 's-/Group << /CS /DeviceRGB /S /Transparency /Type /Group >>-                                                         -' bug.pdf
cp bug.pdf bug2.pdf
echo ""\documentclass{article}\usepackage{graphicx}\begin{document}
\includegraphics[height=1in]{bug}\includegraphics[height=1in]{bug2}
\end{document}"" | pdflatex | grep -A 1 warning
```

No warning!

### Proposed Solution

1. Allow skipping the (optional!) `Group` element in this code block to increase compatibility with `pdflatex`:

https://github.com/matplotlib/matplotlib/blob/7e3cef3ba8c62d79491a94db26c5b06904d9944e/lib/matplotlib/backends/backend_pdf.py#L730-L741

2. Ideally, determine if transparency is needed and skip the element only if not.",bersbersbers,open,2021-02-12 09:08:09,,,,2021-02-16 05:53:32,2,"New feature, backend/pdf, status: has patch",,
806839855,Move some advanced documentation away from Installation Guide,"## PR Summary

This is a first step for making the [Installation Guide](https://matplotlib.org/devdocs/users/installing.html) less intimidating. More than two screens of installation instructions is really scary, and the information moved within this PR is not needed by 99.999%* of our users.

For easier review, this PR is split in two commits:

1. Move sections from INSTALL.rst:
   - Dependencies --> New section in devolopment guide (This is bulk copy&paste. The text is not modified.)
   - Conda packaging --> Release Guide
2. Rewording and minor restructuring of dependencies

(*) Number based on ~10M downloads per month, and I'm quite sure less than less than 100 people per month install C libraries by hand or build conda packages.",timhoffm,closed,2021-02-11 23:56:24,,2021-03-17 17:21:56,story645,2021-03-18 20:07:32,2,Documentation,v3.4.0,53
806829536,Remove remaining references to Travis CI,"## PR Summary

As in title.

## PR Checklist

- [n/a] Has pytest style unit tests (and `pytest` passes).
- [x] Is [Flake 8](https://flake8.pycqa.org/en/latest/) compliant (run `flake8` on changed files to check).
- [n/a] New features are documented, with examples if plot related.
- [x] Documentation is sphinx and numpydoc compliant (the docs should [build](https://matplotlib.org/devel/documenting_mpl.html#building-the-docs) without error).
- [x] Conforms to Matplotlib style conventions (install `flake8-docstrings` and run `flake8 --docstring-convention=all`).
- [n/a] New features have an entry in `doc/users/next_whats_new/` (follow instructions in README.rst there).
- [n/a] API changes documented in `doc/api/next_api_changes/` (follow instructions in README.rst there).",QuLogic,closed,2021-02-11 23:32:46,,2021-02-17 00:13:33,QuLogic,2021-02-17 00:13:35,0,"Documentation, topic: testing",v3.4.0,53
806815746,"Fix tight_layout() on ""canvasless"" figures.","This patch avoids a deprecation warning (""unexpected argument 'dpi'"")
on `Figure().tight_layout()`.  To do so we stop passing `dpi` to
`print_foo`, which is actually fine because `print_figure` already sets
the figure dpi to whatever value we will want, so `print_foo` can just
read `self.figure.dpi`.

Closes https://github.com/matplotlib/matplotlib/issues/19486.

## PR Summary

## PR Checklist

<!-- Please mark any checkboxes that do not apply to this PR as [N/A]. -->

- [ ] Has pytest style unit tests (and `pytest` passes).
- [ ] Is [Flake 8](https://flake8.pycqa.org/en/latest/) compliant (run `flake8` on changed files to check).
- [ ] New features are documented, with examples if plot related.
- [ ] Documentation is sphinx and numpydoc compliant (the docs should [build](https://matplotlib.org/devel/documenting_mpl.html#building-the-docs) without error).
- [ ] Conforms to Matplotlib style conventions (install `flake8-docstrings` and run `flake8 --docstring-convention=all`).
- [ ] New features have an entry in `doc/users/next_whats_new/` (follow instructions in README.rst there).
- [ ] API changes documented in `doc/api/next_api_changes/` (follow instructions in README.rst there).

<!--
Thank you so much for your PR!  To help us review your contribution, please
consider the following points:

- A development guide is available at https://matplotlib.org/devdocs/devel/index.html.

- Help with git and github is available at
  https://matplotlib.org/devel/gitwash/development_workflow.html.

- Do not create the PR out of master, but out of a separate branch.

- The PR title should summarize the changes, for example ""Raise ValueError on
  non-numeric input to set_xlim"".  Avoid non-descriptive titles such as
  ""Addresses issue #8576"".

- The summary should provide at least 1-2 sentences describing the pull request
  in detail (Why is this change required?  What problem does it solve?) and
  link to any relevant issues.

- If you are contributing fixes to docstrings, please pay attention to
  http://matplotlib.org/devel/documenting_mpl.html#formatting.  In particular,
  note the difference between using single backquotes, double backquotes, and
  asterisks in the markup.

We understand that PRs can sometimes be overwhelming, especially as the
reviews start coming in.  Please let us know if the reviews are unclear or
the recommended next step seems overly demanding, if you would like help in
addressing a reviewer's comments, or if you have been waiting too long to hear
back on your PR.
-->
",anntzer,closed,2021-02-11 23:08:08,,2021-02-12 01:24:53,jklymak,2021-02-12 07:13:16,0,,v3.4.0,53
806738351,"Prefer projection=""polar"" over polar=True.","... per dev call.

The docstring of add_axes/add_subplot still needs to be changed, but
this should wait until after projection reuse behavior is finalized.

Also, cases of polar=True in the tests have been left as such, to keep
exercising that API.

## PR Summary

## PR Checklist

<!-- Please mark any checkboxes that do not apply to this PR as [N/A]. -->

- [ ] Has pytest style unit tests (and `pytest` passes).
- [ ] Is [Flake 8](https://flake8.pycqa.org/en/latest/) compliant (run `flake8` on changed files to check).
- [ ] New features are documented, with examples if plot related.
- [ ] Documentation is sphinx and numpydoc compliant (the docs should [build](https://matplotlib.org/devel/documenting_mpl.html#building-the-docs) without error).
- [ ] Conforms to Matplotlib style conventions (install `flake8-docstrings` and run `flake8 --docstring-convention=all`).
- [ ] New features have an entry in `doc/users/next_whats_new/` (follow instructions in README.rst there).
- [ ] API changes documented in `doc/api/next_api_changes/` (follow instructions in README.rst there).

<!--
Thank you so much for your PR!  To help us review your contribution, please
consider the following points:

- A development guide is available at https://matplotlib.org/devdocs/devel/index.html.

- Help with git and github is available at
  https://matplotlib.org/devel/gitwash/development_workflow.html.

- Do not create the PR out of master, but out of a separate branch.

- The PR title should summarize the changes, for example ""Raise ValueError on
  non-numeric input to set_xlim"".  Avoid non-descriptive titles such as
  ""Addresses issue #8576"".

- The summary should provide at least 1-2 sentences describing the pull request
  in detail (Why is this change required?  What problem does it solve?) and
  link to any relevant issues.

- If you are contributing fixes to docstrings, please pay attention to
  http://matplotlib.org/devel/documenting_mpl.html#formatting.  In particular,
  note the difference between using single backquotes, double backquotes, and
  asterisks in the markup.

We understand that PRs can sometimes be overwhelming, especially as the
reviews start coming in.  Please let us know if the reviews are unclear or
the recommended next step seems overly demanding, if you would like help in
addressing a reviewer's comments, or if you have been waiting too long to hear
back on your PR.
-->
",anntzer,closed,2021-02-11 21:02:52,,2021-02-17 20:47:16,QuLogic,2021-02-17 21:04:59,0,Documentation,v3.4.0,53
806694467,Fix text position with usetex and xcolor,"## PR Summary

Applies the patch from @anntzer and adds a test
Fixes #19234.

## PR Checklist

- [x] Has pytest style unit tests (and `pytest` passes).
- [x] Is [Flake 8](https://flake8.pycqa.org/en/latest/) compliant (run `flake8` on changed files to check).
- [n/a] New features are documented, with examples if plot related.
- [n/a] Documentation is sphinx and numpydoc compliant (the docs should [build](https://matplotlib.org/devel/documenting_mpl.html#building-the-docs) without error).
- [x] Conforms to Matplotlib style conventions (install `flake8-docstrings` and run `flake8 --docstring-convention=all`).
- [n/a] New features have an entry in `doc/users/next_whats_new/` (follow instructions in README.rst there).
- [n/a] API changes documented in `doc/api/next_api_changes/` (follow instructions in README.rst there).",QuLogic,closed,2021-02-11 19:55:35,,2021-02-17 04:10:00,tacaswell,2021-02-17 04:11:00,2,"Release critical, topic: text/usetex",v3.4.0,53
806652576,"Remove workaround for numpy<1.16, and update version check.","We now require numpy 1.16 (per setup.py and NEP29).

## PR Summary

## PR Checklist

<!-- Please mark any checkboxes that do not apply to this PR as [N/A]. -->

- [ ] Has pytest style unit tests (and `pytest` passes).
- [ ] Is [Flake 8](https://flake8.pycqa.org/en/latest/) compliant (run `flake8` on changed files to check).
- [ ] New features are documented, with examples if plot related.
- [ ] Documentation is sphinx and numpydoc compliant (the docs should [build](https://matplotlib.org/devel/documenting_mpl.html#building-the-docs) without error).
- [ ] Conforms to Matplotlib style conventions (install `flake8-docstrings` and run `flake8 --docstring-convention=all`).
- [ ] New features have an entry in `doc/users/next_whats_new/` (follow instructions in README.rst there).
- [ ] API changes documented in `doc/api/next_api_changes/` (follow instructions in README.rst there).

<!--
Thank you so much for your PR!  To help us review your contribution, please
consider the following points:

- A development guide is available at https://matplotlib.org/devdocs/devel/index.html.

- Help with git and github is available at
  https://matplotlib.org/devel/gitwash/development_workflow.html.

- Do not create the PR out of master, but out of a separate branch.

- The PR title should summarize the changes, for example ""Raise ValueError on
  non-numeric input to set_xlim"".  Avoid non-descriptive titles such as
  ""Addresses issue #8576"".

- The summary should provide at least 1-2 sentences describing the pull request
  in detail (Why is this change required?  What problem does it solve?) and
  link to any relevant issues.

- If you are contributing fixes to docstrings, please pay attention to
  http://matplotlib.org/devel/documenting_mpl.html#formatting.  In particular,
  note the difference between using single backquotes, double backquotes, and
  asterisks in the markup.

We understand that PRs can sometimes be overwhelming, especially as the
reviews start coming in.  Please let us know if the reviews are unclear or
the recommended next step seems overly demanding, if you would like help in
addressing a reviewer's comments, or if you have been waiting too long to hear
back on your PR.
-->
",anntzer,closed,2021-02-11 18:52:47,,2021-02-16 07:58:04,timhoffm,2021-02-16 08:41:33,3,Maintenance,v3.4.0,53
806632154,Fully fold overset/underset into _genset.,"No need to repeat the tokens expansion twice, and it seems reasonable
enough to check the string itself instead of inventing a separate
parameter just to pass the information of whether an overset or an
underset is being handled.

## PR Summary

## PR Checklist

<!-- Please mark any checkboxes that do not apply to this PR as [N/A]. -->

- [ ] Has pytest style unit tests (and `pytest` passes).
- [ ] Is [Flake 8](https://flake8.pycqa.org/en/latest/) compliant (run `flake8` on changed files to check).
- [ ] New features are documented, with examples if plot related.
- [ ] Documentation is sphinx and numpydoc compliant (the docs should [build](https://matplotlib.org/devel/documenting_mpl.html#building-the-docs) without error).
- [ ] Conforms to Matplotlib style conventions (install `flake8-docstrings` and run `flake8 --docstring-convention=all`).
- [ ] New features have an entry in `doc/users/next_whats_new/` (follow instructions in README.rst there).
- [ ] API changes documented in `doc/api/next_api_changes/` (follow instructions in README.rst there).

<!--
Thank you so much for your PR!  To help us review your contribution, please
consider the following points:

- A development guide is available at https://matplotlib.org/devdocs/devel/index.html.

- Help with git and github is available at
  https://matplotlib.org/devel/gitwash/development_workflow.html.

- Do not create the PR out of master, but out of a separate branch.

- The PR title should summarize the changes, for example ""Raise ValueError on
  non-numeric input to set_xlim"".  Avoid non-descriptive titles such as
  ""Addresses issue #8576"".

- The summary should provide at least 1-2 sentences describing the pull request
  in detail (Why is this change required?  What problem does it solve?) and
  link to any relevant issues.

- If you are contributing fixes to docstrings, please pay attention to
  http://matplotlib.org/devel/documenting_mpl.html#formatting.  In particular,
  note the difference between using single backquotes, double backquotes, and
  asterisks in the markup.

We understand that PRs can sometimes be overwhelming, especially as the
reviews start coming in.  Please let us know if the reviews are unclear or
the recommended next step seems overly demanding, if you would like help in
addressing a reviewer's comments, or if you have been waiting too long to hear
back on your PR.
-->
",anntzer,open,2021-02-11 18:21:19,,,,2021-02-12 00:58:21,0,"Maintenance, topic: text/mathtext",,
806415540,"Dedupe implementations of {XAxis,YAxis}._get_tick_boxes_siblings.","A single implementation can be written in the base class.

Also, the alignment groupers only need to be defined in FigureBase;
we don't need to redefine them in the Figure subclass.

## PR Summary

## PR Checklist

<!-- Please mark any checkboxes that do not apply to this PR as [N/A]. -->

- [ ] Has pytest style unit tests (and `pytest` passes).
- [ ] Is [Flake 8](https://flake8.pycqa.org/en/latest/) compliant (run `flake8` on changed files to check).
- [ ] New features are documented, with examples if plot related.
- [ ] Documentation is sphinx and numpydoc compliant (the docs should [build](https://matplotlib.org/devel/documenting_mpl.html#building-the-docs) without error).
- [ ] Conforms to Matplotlib style conventions (install `flake8-docstrings` and run `flake8 --docstring-convention=all`).
- [ ] New features have an entry in `doc/users/next_whats_new/` (follow instructions in README.rst there).
- [ ] API changes documented in `doc/api/next_api_changes/` (follow instructions in README.rst there).

<!--
Thank you so much for your PR!  To help us review your contribution, please
consider the following points:

- A development guide is available at https://matplotlib.org/devdocs/devel/index.html.

- Help with git and github is available at
  https://matplotlib.org/devel/gitwash/development_workflow.html.

- Do not create the PR out of master, but out of a separate branch.

- The PR title should summarize the changes, for example ""Raise ValueError on
  non-numeric input to set_xlim"".  Avoid non-descriptive titles such as
  ""Addresses issue #8576"".

- The summary should provide at least 1-2 sentences describing the pull request
  in detail (Why is this change required?  What problem does it solve?) and
  link to any relevant issues.

- If you are contributing fixes to docstrings, please pay attention to
  http://matplotlib.org/devel/documenting_mpl.html#formatting.  In particular,
  note the difference between using single backquotes, double backquotes, and
  asterisks in the markup.

We understand that PRs can sometimes be overwhelming, especially as the
reviews start coming in.  Please let us know if the reviews are unclear or
the recommended next step seems overly demanding, if you would like help in
addressing a reviewer's comments, or if you have been waiting too long to hear
back on your PR.
-->
",anntzer,closed,2021-02-11 13:59:24,,2021-02-17 20:49:48,timhoffm,2021-02-17 21:04:47,0,"Maintenance, topic: geometry manager",v3.4.0,53
806201809,Add overset/underset whatsnew entry,"## PR Summary
This is a continuation of the previous PR https://github.com/matplotlib/matplotlib/pull/18916,
w.r.t. this comment: https://github.com/matplotlib/matplotlib/pull/18916#issuecomment-776654901

## PR Checklist

<!-- Please mark any checkboxes that do not apply to this PR as [N/A]. -->

- [x] Has pytest style unit tests (and `pytest` passes).
- [x] Is [Flake 8](https://flake8.pycqa.org/en/latest/) compliant (run `flake8` on changed files to check).
- [x] New features are documented, with examples if plot related.
- [x] Documentation is sphinx and numpydoc compliant (the docs should [build](https://matplotlib.org/devel/documenting_mpl.html#building-the-docs) without error).
- [x] Conforms to Matplotlib style conventions (install `flake8-docstrings` and run `flake8 --docstring-convention=all`).
- [x] New features have an entry in `doc/users/next_whats_new/` (follow instructions in README.rst there).
- [x] API changes documented in `doc/api/next_api_changes/` (follow instructions in README.rst there).

<!--
Thank you so much for your PR!  To help us review your contribution, please
consider the following points:

- A development guide is available at https://matplotlib.org/devdocs/devel/index.html.

- Help with git and github is available at
  https://matplotlib.org/devel/gitwash/development_workflow.html.

- Do not create the PR out of master, but out of a separate branch.

- The PR title should summarize the changes, for example ""Raise ValueError on
  non-numeric input to set_xlim"".  Avoid non-descriptive titles such as
  ""Addresses issue #8576"".

- The summary should provide at least 1-2 sentences describing the pull request
  in detail (Why is this change required?  What problem does it solve?) and
  link to any relevant issues.

- If you are contributing fixes to docstrings, please pay attention to
  http://matplotlib.org/devel/documenting_mpl.html#formatting.  In particular,
  note the difference between using single backquotes, double backquotes, and
  asterisks in the markup.

We understand that PRs can sometimes be overwhelming, especially as the
reviews start coming in.  Please let us know if the reviews are unclear or
the recommended next step seems overly demanding, if you would like help in
addressing a reviewer's comments, or if you have been waiting too long to hear
back on your PR.
-->
",aitikgupta,closed,2021-02-11 09:07:42,,2021-02-11 17:58:42,anntzer,2021-02-11 17:58:43,4,topic: text/mathtext,v3.4.0,53
806092197,MNT: Restore auto-adding Axes3D to their parent figure on init,"Only do this when directly created by the user, not via our machinery.

## PR Summary

Alternative to #19413.

This still needs tests and updates to the docs.

## PR Checklist

<!-- Please mark any checkboxes that do not apply to this PR as [N/A]. -->

- [x] Has pytest style unit tests (and `pytest` passes).
- [x] Is [Flake 8](https://flake8.pycqa.org/en/latest/) compliant (run `flake8` on changed files to check).
- [ ] New features are documented, with examples if plot related.
- [x] Documentation is sphinx and numpydoc compliant (the docs should [build](https://matplotlib.org/devel/documenting_mpl.html#building-the-docs) without error).
- [x] Conforms to Matplotlib style conventions (install `flake8-docstrings` and run `flake8 --docstring-convention=all`).
- [x] New features have an entry in `doc/users/next_whats_new/` (follow instructions in README.rst there).
- [ ] API changes documented in `doc/api/next_api_changes/` (follow instructions in README.rst there).

<!--
Thank you so much for your PR!  To help us review your contribution, please
consider the following points:

- A development guide is available at https://matplotlib.org/devdocs/devel/index.html.

- Help with git and github is available at
  https://matplotlib.org/devel/gitwash/development_workflow.html.

- Do not create the PR out of master, but out of a separate branch.

- The PR title should summarize the changes, for example ""Raise ValueError on
  non-numeric input to set_xlim"".  Avoid non-descriptive titles such as
  ""Addresses issue #8576"".

- The summary should provide at least 1-2 sentences describing the pull request
  in detail (Why is this change required?  What problem does it solve?) and
  link to any relevant issues.

- If you are contributing fixes to docstrings, please pay attention to
  http://matplotlib.org/devel/documenting_mpl.html#formatting.  In particular,
  note the difference between using single backquotes, double backquotes, and
  asterisks in the markup.

We understand that PRs can sometimes be overwhelming, especially as the
reviews start coming in.  Please let us know if the reviews are unclear or
the recommended next step seems overly demanding, if you would like help in
addressing a reviewer's comments, or if you have been waiting too long to hear
back on your PR.
-->
",tacaswell,closed,2021-02-11 05:32:43,,2021-02-18 17:22:18,jklymak,2021-02-18 17:45:08,3,Release critical,v3.4.0,53
805712411,Move svg basename detection down to RendererSVG.,"This means one fewer argument to track down the call stack (avoiding
passing it from print_svg to RendererSVG).  Wrapping the file object
in a TextIOWrapper (as done in print_svg) forwards the `.name` to the
wrapper, so we're fine there.

## PR Summary

## PR Checklist

<!-- Please mark any checkboxes that do not apply to this PR as [N/A]. -->

- [ ] Has pytest style unit tests (and `pytest` passes).
- [ ] Is [Flake 8](https://flake8.pycqa.org/en/latest/) compliant (run `flake8` on changed files to check).
- [ ] New features are documented, with examples if plot related.
- [ ] Documentation is sphinx and numpydoc compliant (the docs should [build](https://matplotlib.org/devel/documenting_mpl.html#building-the-docs) without error).
- [ ] Conforms to Matplotlib style conventions (install `flake8-docstrings` and run `flake8 --docstring-convention=all`).
- [ ] New features have an entry in `doc/users/next_whats_new/` (follow instructions in README.rst there).
- [ ] API changes documented in `doc/api/next_api_changes/` (follow instructions in README.rst there).

<!--
Thank you so much for your PR!  To help us review your contribution, please
consider the following points:

- A development guide is available at https://matplotlib.org/devdocs/devel/index.html.

- Help with git and github is available at
  https://matplotlib.org/devel/gitwash/development_workflow.html.

- Do not create the PR out of master, but out of a separate branch.

- The PR title should summarize the changes, for example ""Raise ValueError on
  non-numeric input to set_xlim"".  Avoid non-descriptive titles such as
  ""Addresses issue #8576"".

- The summary should provide at least 1-2 sentences describing the pull request
  in detail (Why is this change required?  What problem does it solve?) and
  link to any relevant issues.

- If you are contributing fixes to docstrings, please pay attention to
  http://matplotlib.org/devel/documenting_mpl.html#formatting.  In particular,
  note the difference between using single backquotes, double backquotes, and
  asterisks in the markup.

We understand that PRs can sometimes be overwhelming, especially as the
reviews start coming in.  Please let us know if the reviews are unclear or
the recommended next step seems overly demanding, if you would like help in
addressing a reviewer's comments, or if you have been waiting too long to hear
back on your PR.
-->
",anntzer,open,2021-02-10 17:19:27,,,,2021-02-10 17:19:27,0,"Maintenance, backend/svg",,
805661696,"Update azure ubuntu images to 18.04, or update texlive in CI","### Describe the issue

**Summary**

The pgf/luatex tests have been flaky for a while on azure (see e.g. https://dev.azure.com/matplotlib/matplotlib/_build/results?buildId=17033).  Based on the logs
```
E               ! LuaTeX error ...xmf-dist/tex/luatex/luaotfload/fontloader-2016-02-12.lua:11111
E               : attempt to get length of local 'lookupdata' (a number value).
E               <to be read again> 
E               \scan_stop: 
E               <*> .../work/1/s/lib/matplotlib/mpl-data/fonts/ttf/}]
```
I have traced this back to a piece of code in luaotfload that has been removed in early 2016 from luaotfload (https://github.com/latex3/luaotfload/commit/0cf41dff08cdc61119a2598cf1fa501cd15bfc54 / https://github.com/contextgarden/context-mirror/commit/788487819ccf38a8478cc2afd88e0c0b088d0ec1 are the specific commits, grep for `local function ligature` in `src/fontloader/misc/fontloader-font-otn.lua` (`fontloader-2016-02-12.lua` is a concatenated version of the lua sources)).  I don't think it's worth spending more time on a 5y old bug(?) in luatex, so perhaps we could consider either updating the azure ubuntu images to 18.04, or, if we really want to keep the 16.04 images, figure out how to use a more recent texlive in it.
",anntzer,open,2021-02-10 16:19:52,,,,2021-02-11 17:16:57,1,"Build, Maintenance, backend/pgf",v3.5.0,59
805606699,Mep30,"## PR Summary
Creates a new MEP, named MEP30
## PR Checklist

<!-- Please mark any checkboxes that do not apply to this PR as [N/A]. -->

- [ ] Has pytest style unit tests (and `pytest` passes).
- [ ] Is [Flake 8](https://flake8.pycqa.org/en/latest/) compliant (run `flake8` on changed files to check).
- [ ] New features are documented, with examples if plot related.
- [ ] Documentation is sphinx and numpydoc compliant (the docs should [build](https://matplotlib.org/devel/documenting_mpl.html#building-the-docs) without error).
- [ ] Conforms to Matplotlib style conventions (install `flake8-docstrings` and run `flake8 --docstring-convention=all`).
- [ ] New features have an entry in `doc/users/next_whats_new/` (follow instructions in README.rst there).
- [ ] API changes documented in `doc/api/next_api_changes/` (follow instructions in README.rst there).

<!--
Thank you so much for your PR!  To help us review your contribution, please
consider the following points:

- A development guide is available at https://matplotlib.org/devdocs/devel/index.html.

- Help with git and github is available at
  https://matplotlib.org/devel/gitwash/development_workflow.html.

- Do not create the PR out of master, but out of a separate branch.

- The PR title should summarize the changes, for example ""Raise ValueError on
  non-numeric input to set_xlim"".  Avoid non-descriptive titles such as
  ""Addresses issue #8576"".

- The summary should provide at least 1-2 sentences describing the pull request
  in detail (Why is this change required?  What problem does it solve?) and
  link to any relevant issues.

- If you are contributing fixes to docstrings, please pay attention to
  http://matplotlib.org/devel/documenting_mpl.html#formatting.  In particular,
  note the difference between using single backquotes, double backquotes, and
  asterisks in the markup.

We understand that PRs can sometimes be overwhelming, especially as the
reviews start coming in.  Please let us know if the reviews are unclear or
the recommended next step seems overly demanding, if you would like help in
addressing a reviewer's comments, or if you have been waiting too long to hear
back on your PR.
-->
",EBenkler,closed,2021-02-10 15:17:18,,2021-02-18 08:13:31,EBenkler,2021-02-18 08:13:31,3,,,
805470728,Unexpected Tricontour behaviour in polar projection,"<!--To help us understand and resolve your issue, please fill out the form to the best of your ability.-->
<!--You can feel free to delete the sections that do not apply.-->

### Bug report

**Bug summary**

<!--A short 1-2 sentences that succinctly describes the bug-->
When using tricontour and tricontourf in polar projection, some levels will jump across the plot rather than cross over the periodic border at 0/360 degrees.

**Code for reproduction**

<!--A minimum code snippet required to reproduce the bug.
Please make sure to minimize the number of dependencies required, and provide
any necessary plotted data.
Avoid using threads, as Matplotlib is (explicitly) not thread-safe.-->

```python
import numpy as np
from matplotlib import pyplot as plt
from matplotlib import tri


def function_z(x, y):
    # Example data taken from https://matplotlib.org/3.3.4/gallery/images_contours_and_fields/tricontour_smooth_user.html#sphx-glr-gallery-images-contours-and-fields-tricontour-smooth-user-py
    r1 = np.sqrt((0.5 - x)**2 + (0.5 - y)**2)
    theta1 = np.arctan2(0.5 - x, 0.5 - y)
    r2 = np.sqrt((-x - 0.2)**2 + (-y - 0.2)**2)
    theta2 = np.arctan2(-x - 0.2, -y - 0.2)
    z = -(2 * (np.exp((r1 / 10)**2) - 1) * 30. * np.cos(7. * theta1) +
          (np.exp((r2 / 10)**2) - 1) * 30. * np.cos(11. * theta2) +
          0.7 * (x**2 + y**2))
    return (np.max(z) - z) / (np.max(z) - np.min(z))


# Generate random unordered grid of polar coordinates
np.random.seed(2685)
radius, azimuth = np.meshgrid(np.pi*np.random.random(14), 2*np.pi*np.random.random(35), indexing='ij')

radius = radius.ravel()
azimuth = azimuth.ravel()

# Perform triangulation in cartesian coordinates to account for periodicity in azimuth
x = radius*np.cos(azimuth)
y = radius*np.sin(azimuth)
triangles = tri.Triangulation(x, y).get_masked_triangles()

z = function_z(x, y)

# Polar tricontour with triangulation from cartesian
ax = plt.figure().add_subplot(111, polar=True)
ax.tricontour(azimuth, radius, triangles, z)
# ax.scatter(azimuth, radius, 1, 'r')

# Cartesian tricontour with triangulation from cartesian
fig = plt.figure()
ax_polar = fig.add_subplot(111, polar=True, frameon=True)
ax_cart = fig.add_subplot(111, polar=False, frameon=False)
ax_cart.tricontour(x, y, triangles, z)
# ax_cart.scatter(x, y, 1, 'r')
ax_cart.axis('equal')
ax_cart.get_xaxis().set_visible(False)
ax_cart.get_yaxis().set_visible(False)
plt.show()

```

**Actual outcome**
![actual](https://user-images.githubusercontent.com/21970817/107508679-b1185280-6ba1-11eb-9c8d-499f219dc6d6.png)

<!--The output produced by the above code, which may be a screenshot, console output, etc.-->



**Expected outcome**
![expected](https://user-images.githubusercontent.com/21970817/107509902-80d1b380-6ba3-11eb-8991-a3134c3af660.png)


<!--A description of the expected outcome from the code snippet-->
<!--If this used to work in an earlier version of Matplotlib, please note the version it used to work on-->

**Matplotlib version**
<!--Please specify your platform and versions of the relevant libraries you are using:-->
  * Operating system: Microsoft Windows 10 Pro (10.0.19042 Build 19042)
  * Matplotlib version (`import matplotlib; print(matplotlib.__version__)`): 3.3.4
  * Matplotlib backend (`print(matplotlib.get_backend())`): TkAgg
  * Python version: 3.8.1 64 bit
  * Jupyter version (if applicable): N/A
  * Other libraries: numpy: 1.16.1
 
Note that this same behavior seems to exist in older versions of Python and matplotlib as well as with the Qt5Agg backend.

<!--Please tell us how you installed matplotlib and python e.g., from source, pip, conda-->
<!--If you installed from conda, please specify which channel you used if not the default-->
All packages installed via pip
",skogsvik,closed,2021-02-10 12:29:28,,2021-02-11 12:10:54,skogsvik,2021-02-11 12:10:54,2,topic: polar,,
805438792,"plt.show() strong discrepancy to plt.savefig() PNG, PDF & SVG (which are all 'identical')  ","<!--To help us understand and resolve your issue, please fill out the form to the best of your ability.-->
<!--You can feel free to delete the sections that do not apply.-->

### Bug report

**Bug summary**

The saved figures of a scatter plot are rendered/interpreted completely different from showing them. This is consistent and might be related to [#18871](https://github.com/matplotlib/matplotlib/issues/18871) and/or [#8847](https://github.com/matplotlib/matplotlib/issues/8847). Is there a way to circumvent this and to get closer to the desired plot from 'show()' whilst saving to a file?

**Code for reproduction**

<!--A minimum code snippet required to reproduce the bug.
Please make sure to minimize the number of dependencies required, and provide
any necessary plotted data.
Avoid using threads, as Matplotlib is (explicitly) not thread-safe.-->

```python
import matplotlib.pyplot as plt         # for my tests version 3.3.2
import numpy as np

# Creating dataset
np.random.seed(42)
x = np.random.random_sample(size=10000)
y = np.random.random_sample(size=10000)
z = np.random.random_sample(size=10000)

# Creating figure
fig = plt.figure(figsize=(16, 9))
ax = plt.axes(projection=""3d"")

# Add x, y gridlines
ax.grid(b=True, color='grey', linestyle='-.', linewidth=0.3, alpha=0.2)

# Creating color map
# https://matplotlib.org/3.1.0/tutorials/colors/colormaps.html
my_cmap = plt.get_cmap('brg')

# Creating plot
sctt = ax.scatter3D(x, y, z, alpha=0.8, c=z, cmap=my_cmap, marker='o')

plt.title(""3D-Scatter"")
ax.set_xlabel('x label', fontweight='bold')
ax.set_ylabel('y label', fontweight='bold')
ax.set_zlabel('z label', fontweight='bold')
fig.colorbar(sctt, ax=ax, shrink=0.5, aspect=5)

# show plot
plt.show()
# plt.savefig('fig_savefig.png')
plt.close()
```

**Actual outcome**
![fig_savefig](https://user-images.githubusercontent.com/34138513/107504892-3dc01200-6b9c-11eb-97e6-32085aeefedf.png)

**Expected outcome**
![fig_show](https://user-images.githubusercontent.com/34138513/107504873-36006d80-6b9c-11eb-8eef-ed503c041de2.png)


**Matplotlib version**
<!--Please specify your platform and versions of the relevant libraries you are using:-->
  * Operating system:  Win10
  * Matplotlib version (`import matplotlib; print(matplotlib.__version__)`): 3.3.2
  * Matplotlib backend (`print(matplotlib.get_backend())`): TkAgg
  * Python version: 3.8.5 (default, Sep  3 2020, 21:29:08) [MSC v.1916 64 bit (AMD64)] 
  * Jupyter version (if applicable): 
  * Other libraries: 

<!--Please tell us how you installed matplotlib and python e.g., from source, pip, conda-->
<!--If you installed from conda, please specify which channel you used if not the default-->

",rengel8,closed,2021-02-10 11:43:00,,2021-02-10 23:27:44,QuLogic,2021-02-10 23:27:59,1,status: duplicate,v3.3.3,58
805374207,Fix error message in plt.close().,"## PR Summary

Currently, the `TypeError` thrown when an inappropriate type is passed to `pyplot.close()` has the following message:

> TypeError: close() argument must be a Figure, an int, a string, or None, not '%s'

This is clearly a typo (introduced in f6bdcb5fe60fabe8fa2093981383b5e23a109fce) as it says `'%s'` instead of telling the user the type that was passed in.

We update the `raise` statement to include the type so that `pyplot.close(1.1)` gives

> TypeError: close() argument must be a Figure, an int, a string, or None, not <class 'float'>

instead of 

> TypeError: close() argument must be a Figure, an int, a string, or None, not '%s'

## PR Checklist

<!-- Please mark any checkboxes that do not apply to this PR as [N/A]. -->

- [x] Has pytest style unit tests (and `pytest` passes).
- [x] Is [Flake 8](https://flake8.pycqa.org/en/latest/) compliant (run `flake8` on changed files to check).
- [N/A] New features are documented, with examples if plot related.
- [N/A] Documentation is sphinx and numpydoc compliant (the docs should [build](https://matplotlib.org/devel/documenting_mpl.html#building-the-docs) without error).
- [x] Conforms to Matplotlib style conventions (install `flake8-docstrings` and run `flake8 --docstring-convention=all`).
- [N/A] New features have an entry in `doc/users/next_whats_new/` (follow instructions in README.rst there).
- [N/A] API changes documented in `doc/api/next_api_changes/` (follow instructions in README.rst there).

<!--
Thank you so much for your PR!  To help us review your contribution, please
consider the following points:

- A development guide is available at https://matplotlib.org/devdocs/devel/index.html.

- Help with git and github is available at
  https://matplotlib.org/devel/gitwash/development_workflow.html.

- Do not create the PR out of master, but out of a separate branch.

- The PR title should summarize the changes, for example ""Raise ValueError on
  non-numeric input to set_xlim"".  Avoid non-descriptive titles such as
  ""Addresses issue #8576"".

- The summary should provide at least 1-2 sentences describing the pull request
  in detail (Why is this change required?  What problem does it solve?) and
  link to any relevant issues.

- If you are contributing fixes to docstrings, please pay attention to
  http://matplotlib.org/devel/documenting_mpl.html#formatting.  In particular,
  note the difference between using single backquotes, double backquotes, and
  asterisks in the markup.

We understand that PRs can sometimes be overwhelming, especially as the
reviews start coming in.  Please let us know if the reviews are unclear or
the recommended next step seems overly demanding, if you would like help in
addressing a reviewer's comments, or if you have been waiting too long to hear
back on your PR.
-->
",Iain-S,closed,2021-02-10 10:18:23,,2021-02-11 00:32:31,QuLogic,2021-02-11 00:32:47,1,API: argument checking,v3.4.0,53
805336116,Reformatting the Files,"### Describe the issue
The code in various files are not formatted properly.
**Summary**
Actually I was working on a different issue but I just ran Black which is code formatting tool on entire local repository. Only 55 files were found be having proper format. rest all needed formatting.
 A short 1-2 sentences that succinctly describe what could be improved -->
Add some tests for code formatting as well.
### Proposed fix
Reformat all the files using Black.
As Black gives you speed, determinism, and freedom from pycodestyle nagging about formatting. You will save time and mental energy for more important matters.
Blackened code looks the same regardless of the project you're reading. Formatting becomes transparent after a while and you can focus on the content instead. so it will help other contributors to understand the code better.",rajpratyush,closed,2021-02-10 09:29:33,,2021-02-10 09:36:17,QuLogic,2021-02-10 09:36:17,1,Maintenance,,
805333269,Prefer `tr1-tr2` to `tr1+tr2.inverted()`.,"As discussed elsewhere, the first form is both faster and more accurate
as it can handle exact cancellations.

followup to #19485.

## PR Summary

## PR Checklist

<!-- Please mark any checkboxes that do not apply to this PR as [N/A]. -->

- [ ] Has pytest style unit tests (and `pytest` passes).
- [ ] Is [Flake 8](https://flake8.pycqa.org/en/latest/) compliant (run `flake8` on changed files to check).
- [ ] New features are documented, with examples if plot related.
- [ ] Documentation is sphinx and numpydoc compliant (the docs should [build](https://matplotlib.org/devel/documenting_mpl.html#building-the-docs) without error).
- [ ] Conforms to Matplotlib style conventions (install `flake8-docstrings` and run `flake8 --docstring-convention=all`).
- [ ] New features have an entry in `doc/users/next_whats_new/` (follow instructions in README.rst there).
- [ ] API changes documented in `doc/api/next_api_changes/` (follow instructions in README.rst there).

<!--
Thank you so much for your PR!  To help us review your contribution, please
consider the following points:

- A development guide is available at https://matplotlib.org/devdocs/devel/index.html.

- Help with git and github is available at
  https://matplotlib.org/devel/gitwash/development_workflow.html.

- Do not create the PR out of master, but out of a separate branch.

- The PR title should summarize the changes, for example ""Raise ValueError on
  non-numeric input to set_xlim"".  Avoid non-descriptive titles such as
  ""Addresses issue #8576"".

- The summary should provide at least 1-2 sentences describing the pull request
  in detail (Why is this change required?  What problem does it solve?) and
  link to any relevant issues.

- If you are contributing fixes to docstrings, please pay attention to
  http://matplotlib.org/devel/documenting_mpl.html#formatting.  In particular,
  note the difference between using single backquotes, double backquotes, and
  asterisks in the markup.

We understand that PRs can sometimes be overwhelming, especially as the
reviews start coming in.  Please let us know if the reviews are unclear or
the recommended next step seems overly demanding, if you would like help in
addressing a reviewer's comments, or if you have been waiting too long to hear
back on your PR.
-->
",anntzer,closed,2021-02-10 09:25:48,,2021-02-10 20:22:23,tacaswell,2021-02-10 21:13:38,0,topic: transforms and scales,v3.4.0,53
805320470,Deprecate unused \*args to print_<foo>.,"These `*args` are never used.

gtk3agg's print_png can just be directly inherited from agg (likely, it
is a remnant of a time when gtk3 would rely on cairo's png output by
default).

For the pgf backend, `*args` can be directly deleted because it would
previously have caused exceptions when forwarded to _print_pgf_to_fh.

## PR Summary

## PR Checklist

<!-- Please mark any checkboxes that do not apply to this PR as [N/A]. -->

- [ ] Has pytest style unit tests (and `pytest` passes).
- [ ] Is [Flake 8](https://flake8.pycqa.org/en/latest/) compliant (run `flake8` on changed files to check).
- [ ] New features are documented, with examples if plot related.
- [ ] Documentation is sphinx and numpydoc compliant (the docs should [build](https://matplotlib.org/devel/documenting_mpl.html#building-the-docs) without error).
- [ ] Conforms to Matplotlib style conventions (install `flake8-docstrings` and run `flake8 --docstring-convention=all`).
- [ ] New features have an entry in `doc/users/next_whats_new/` (follow instructions in README.rst there).
- [ ] API changes documented in `doc/api/next_api_changes/` (follow instructions in README.rst there).

<!--
Thank you so much for your PR!  To help us review your contribution, please
consider the following points:

- A development guide is available at https://matplotlib.org/devdocs/devel/index.html.

- Help with git and github is available at
  https://matplotlib.org/devel/gitwash/development_workflow.html.

- Do not create the PR out of master, but out of a separate branch.

- The PR title should summarize the changes, for example ""Raise ValueError on
  non-numeric input to set_xlim"".  Avoid non-descriptive titles such as
  ""Addresses issue #8576"".

- The summary should provide at least 1-2 sentences describing the pull request
  in detail (Why is this change required?  What problem does it solve?) and
  link to any relevant issues.

- If you are contributing fixes to docstrings, please pay attention to
  http://matplotlib.org/devel/documenting_mpl.html#formatting.  In particular,
  note the difference between using single backquotes, double backquotes, and
  asterisks in the markup.

We understand that PRs can sometimes be overwhelming, especially as the
reviews start coming in.  Please let us know if the reviews are unclear or
the recommended next step seems overly demanding, if you would like help in
addressing a reviewer's comments, or if you have been waiting too long to hear
back on your PR.
-->
",anntzer,closed,2021-02-10 09:09:02,,2021-03-11 00:20:18,QuLogic,2021-03-11 00:21:50,1,,v3.5.0,59
805264238,Figure.tight_layout() raises MatplotlibDeprecationWarning,"### Bug report

I've been creating `Figure`s and plotting on them, and then finally calling `Figure.tight_layout()` before saving so that everything fits nicely. However I've been getting deprecation warnings for the `tight_layout()` call.

**Code for reproduction**

Running `python` in interactive prompt mode:
```python
from matplotlib.figure import Figure
fig = Figure()
fig.tight_layout()
```

**Outcome**
```
<stdin>:1: MatplotlibDeprecationWarning: savefig() got unexpected keyword argument ""dpi"" which is no longer supported as of 3.3 and will become an error two minor releases later
```

<details>
<summary>
<b>More details</b>
</summary>

Stack trace of the warning with `python -W error`:
```
>>> fig.tight_layout()
Traceback (most recent call last):
  File ""<stdin>"", line 1, in <module>
  File "".../lib/python3.8/site-packages/matplotlib/cbook/deprecation.py"", line 411, in wrapper
    return func(*inner_args, **inner_kwargs)
  File "".../lib/python3.8/site-packages/matplotlib/figure.py"", line 2608, in tight_layout
    renderer = get_renderer(self)
  File "".../lib/python3.8/site-packages/matplotlib/tight_layout.py"", line 176, in get_renderer
    return backend_bases._get_renderer(fig)
  File "".../lib/python3.8/site-packages/matplotlib/backend_bases.py"", line 1555, in _get_renderer
    print_method(io.BytesIO(), dpi=figure.dpi)
  File "".../lib/python3.8/site-packages/matplotlib/backend_bases.py"", line 1631, in wrapper
    cbook.warn_deprecated(
  File "".../lib/python3.8/site-packages/matplotlib/cbook/deprecation.py"", line 109, in warn_deprecated
    _warn_external(warning, category=MatplotlibDeprecationWarning)
  File "".../lib/python3.8/site-packages/matplotlib/cbook/__init__.py"", line 2108, in _warn_external
    warnings.warn(message, category, stacklevel)
matplotlib.cbook.deprecation.MatplotlibDeprecationWarning: savefig() got unexpected keyword argument ""dpi"" which is no longer supported as of 3.3 and will become an error two minor releases later
```

Source for `matplotlib.tight_layout.get_renderer()`:

https://github.com/matplotlib/matplotlib/blob/396e8c72b132f9a659d6f86388da6b40275b9290/lib/matplotlib/tight_layout.py#L167-L176

Source for `matplotlib.backend_bases._get_renderer()`:

https://github.com/matplotlib/matplotlib/blob/396e8c72b132f9a659d6f86388da6b40275b9290/lib/matplotlib/backend_bases.py#L1530-L1563

```
>>> from matplotlib.figure import Figure
>>> import matplotlib.backend_bases
>>> fig = Figure()
>>> type(fig.canvas)
<class 'matplotlib.backend_bases.FigureCanvasBase'>
>>> fig.canvas.get_default_filetype()
'png'
>>> fig.canvas._get_output_canvas(None, 'png')
<matplotlib.backends.backend_agg.FigureCanvasAgg object at 0x7f3ea3d75fd0>
>>> matplotlib.backend_bases._get_renderer(fig)
<stdin>:1: MatplotlibDeprecationWarning: savefig() got unexpected keyword argument ""dpi"" which is no longer supported as of 3.3 and will become an error two minor releases later
<matplotlib.backends.backend_agg.RendererAgg object at 0x7f66e72e2c70>
```

I think the warning might be from L1555 of backend_bases.py where `print_method` has been set on L1552 to `FigureCanvasAgg.print_png`

https://github.com/matplotlib/matplotlib/blob/396e8c72b132f9a659d6f86388da6b40275b9290/lib/matplotlib/backends/backend_agg.py#L460-L462

which doesn't look like it accepts the `dpi` argument anymore.

</details>


**Matplotlib version**
<!--Please specify your platform and versions of the relevant libraries you are using:-->
  * Operating system: Linux 5.10.11-arch1-1
  * Matplotlib version (`import matplotlib; print(matplotlib.__version__)`):  3.3.4
  * Matplotlib backend (`print(matplotlib.get_backend())`): GTK3Agg
  * Python version: 3.8.6

<!--Please tell us how you installed matplotlib and python e.g., from source, pip, conda-->
<!--If you installed from conda, please specify which channel you used if not the default-->

",eugenhu,closed,2021-02-10 07:41:43,,2021-02-12 01:24:53,jklymak,2021-02-12 01:24:53,0,status: confirmed bug,v3.4.0,53
804962755,fix regression of axline behavior with non-linear scales,"## PR Summary

#18647 broke loglog scale axlines (see #19445). This PR fixes it by adding `transScale` to the transformations applied to the points of the line and adds a test to verify the result (based on the example given by @anntzer in #19445).

This should have no effect on results with linear scales, and the remaining tests are still passing, so it looks like it works correctly.

## PR Checklist

<!-- Please mark any checkboxes that do not apply to this PR as [N/A]. -->

- [x] Has pytest style unit tests (and `pytest` passes).
- [x] Is [Flake 8](https://flake8.pycqa.org/en/latest/) compliant (run `flake8` on changed files to check).
- [ ] New features are documented, with examples if plot related. [N/A]
- [ ] Documentation is sphinx and numpydoc compliant (the docs should [build](https://matplotlib.org/devel/documenting_mpl.html#building-the-docs) without error). [N/A]
- [ ] Conforms to Matplotlib style conventions (install `flake8-docstrings` and run `flake8 --docstring-convention=all`). [N/A]
- [ ] New features have an entry in `doc/users/next_whats_new/` (follow instructions in README.rst there). [N/A]
- [ ] API changes documented in `doc/api/next_api_changes/` (follow instructions in README.rst there). [N/A]

<!--
Thank you so much for your PR!  To help us review your contribution, please
consider the following points:

- A development guide is available at https://matplotlib.org/devdocs/devel/index.html.

- Help with git and github is available at
  https://matplotlib.org/devel/gitwash/development_workflow.html.

- Do not create the PR out of master, but out of a separate branch.

- The PR title should summarize the changes, for example ""Raise ValueError on
  non-numeric input to set_xlim"".  Avoid non-descriptive titles such as
  ""Addresses issue #8576"".

- The summary should provide at least 1-2 sentences describing the pull request
  in detail (Why is this change required?  What problem does it solve?) and
  link to any relevant issues.

- If you are contributing fixes to docstrings, please pay attention to
  http://matplotlib.org/devel/documenting_mpl.html#formatting.  In particular,
  note the difference between using single backquotes, double backquotes, and
  asterisks in the markup.

We understand that PRs can sometimes be overwhelming, especially as the
reviews start coming in.  Please let us know if the reviews are unclear or
the recommended next step seems overly demanding, if you would like help in
addressing a reviewer's comments, or if you have been waiting too long to hear
back on your PR.
-->
",johan12345,closed,2021-02-09 21:59:03,,2021-02-10 09:17:32,QuLogic,2021-02-10 20:23:14,1,,v3.4.0,53
804806628,Shareable property cyclers,"First commit: Simplify _process_plot_var_args.set_prop_cycle.

It is private, so we can restrict it to only support cycler instances
and None.

Second commit: Shareable property cyclers.

Allow a single property cycler to be reused across multiple axes, with
plots on any axes advancing the same joint iterator.

e.g.
```python
from matplotlib import pyplot as plt
from matplotlib.axes._base import to_shareable_cycler

shared = to_shareable_cycler(plt.rcParams[""axes.prop_cycle""])
fig, axs = plt.subplots(2, sharex=True)
axs[0].set_prop_cycle(shared)
axs[1].set_prop_cycle(shared)

axs[0].plot([0, 1])
axs[1].plot([0, 1])
# Check that fill uses a separate iterator.
axs[1].fill([2, 3, 4], [0, 1, 0])
axs[0].fill([2, 3, 4], [0, 1, 0])
# Check that the second axes goes back to the first color, even though it
# didn't use it on the first cycle.
for i in range(10):
    axs[1].plot([5+i, 5+i], [0, 1])
plt.show()
```
![test](https://user-images.githubusercontent.com/1322974/107409000-f8540400-6b0b-11eb-9a6e-3d9b0f792980.png)

We may want to move `to_shareable_cycler` and `_get_cycling_iterator` to the cycler repo itself (possibly under different names), here I just made them free functions to keep the PR self-contained.

An example use case:
```python
from matplotlib import pyplot as plt
from matplotlib.axes._base import to_shareable_cycler
import numpy as np

fig, axs = plt.subplots(2, 3, sharex=True, sharey=True)
axs = axs.ravel()
shared = to_shareable_cycler(plt.rcParams[""axes.prop_cycle""])
for ax in axs[1:]:
    ax.set_prop_cycle(shared)

xs = np.arange(10)
all_ys = (5 + np.random.randn(5)[:, None]) * xs + 3 * np.random.randn(5, 10)
axs[0].set_title(""all datasets"")
for i, ys in enumerate(all_ys):
    axs[0].plot(ys)
    axs[i + 1].set_title(f""dataset #{i} & fit"")
    axs[i + 1].plot(ys)
    axs[i + 1].plot(xs, np.polyval(np.polyfit(xs, ys, 1), xs), c=""k"", zorder=.5)

plt.show()
```
![test](https://user-images.githubusercontent.com/1322974/107410108-27b74080-6b0d-11eb-903d-0e8afce49f5d.png)
(Obviously this is also doable by manually passing the correct colors to each plot call, although it's quite harder to do so if you want to support arbitrary property cycles...)

Closes https://github.com/matplotlib/matplotlib/issues/19479.",anntzer,open,2021-02-09 18:33:19,,,,2021-02-10 00:04:48,2,status: needs tests,,
804046501,MNT: deprecate epoch2num/num2epoch,"## PR Summary

`epoch2num` and `num2epoch` convert to and from matplotlib times from unix times.  

We do not use these functions anywhere internally, and their functionality is provided by `datetime` or `datetime64` modules.  There is really no reason for users to be converting directly from unix times to Matplotlib times.  

This was deprecated before when we made the epoch change, but that broke pandas who were using this.  They no longer are using this, so I think it is safe to deprecate for 3.5.



## PR Checklist

<!-- Please mark any checkboxes that do not apply to this PR as [N/A]. -->

- [ ] Has pytest style unit tests (and `pytest` passes).
- [ ] Is [Flake 8](https://flake8.pycqa.org/en/latest/) compliant (run `flake8` on changed files to check).
- [ ] New features are documented, with examples if plot related.
- [ ] Documentation is sphinx and numpydoc compliant (the docs should [build](https://matplotlib.org/devel/documenting_mpl.html#building-the-docs) without error).
- [ ] Conforms to Matplotlib style conventions (install `flake8-docstrings` and run `flake8 --docstring-convention=all`).
- [ ] New features have an entry in `doc/users/next_whats_new/` (follow instructions in README.rst there).
- [ ] API changes documented in `doc/api/next_api_changes/` (follow instructions in README.rst there).

<!--
Thank you so much for your PR!  To help us review your contribution, please
consider the following points:

- A development guide is available at https://matplotlib.org/devdocs/devel/index.html.

- Help with git and github is available at
  https://matplotlib.org/devel/gitwash/development_workflow.html.

- Do not create the PR out of master, but out of a separate branch.

- The PR title should summarize the changes, for example ""Raise ValueError on
  non-numeric input to set_xlim"".  Avoid non-descriptive titles such as
  ""Addresses issue #8576"".

- The summary should provide at least 1-2 sentences describing the pull request
  in detail (Why is this change required?  What problem does it solve?) and
  link to any relevant issues.

- If you are contributing fixes to docstrings, please pay attention to
  http://matplotlib.org/devel/documenting_mpl.html#formatting.  In particular,
  note the difference between using single backquotes, double backquotes, and
  asterisks in the markup.

We understand that PRs can sometimes be overwhelming, especially as the
reviews start coming in.  Please let us know if the reviews are unclear or
the recommended next step seems overly demanding, if you would like help in
addressing a reviewer's comments, or if you have been waiting too long to hear
back on your PR.
-->
",jklymak,open,2021-02-08 23:14:01,,,,2021-02-09 00:47:49,1,topic: date handling,v3.5.0,59
803765943,Plugin system for backends,"## PR Summary

This PR adds a plugin system for backends. Now backends need to install a manifest under `$PREFIX/share/matplotlib/backends` containing the name of the backend and the Python module containing this backend:
```json
{
  ""name"": ""MyCustomBackend"",
  ""module"": ""my-python-module-containing-the-backend""
}
```

This will make it easier to create custom backends, by simply installing the right file in the right place for Matplotlib to discover.

I am opening this PR for heads-up and for starting discussions, I might still change the implementation.

**Note 1:** This breaks the inline and the ipympl backend in IPython, because they currently do not install the files.
**Note 2:** This could be the opportunity to take some core backends out of the Matplotlib code base, in their own packages?

## PR Checklist

<!-- Please mark any checkboxes that do not apply to this PR as [N/A]. -->

- [ ] Has pytest style unit tests (and `pytest` passes).
- [ ] Is [Flake 8](https://flake8.pycqa.org/en/latest/) compliant (run `flake8` on changed files to check).
- [ ] New features are documented, with examples if plot related.
- [ ] Documentation is sphinx and numpydoc compliant (the docs should [build](https://matplotlib.org/devel/documenting_mpl.html#building-the-docs) without error).
- [ ] Conforms to Matplotlib style conventions (install `flake8-docstrings` and run `flake8 --docstring-convention=all`).
- [ ] New features have an entry in `doc/users/next_whats_new/` (follow instructions in README.rst there).
- [ ] API changes documented in `doc/api/next_api_changes/` (follow instructions in README.rst there).

<!--
Thank you so much for your PR!  To help us review your contribution, please
consider the following points:

- A development guide is available at https://matplotlib.org/devdocs/devel/index.html.

- Help with git and github is available at
  https://matplotlib.org/devel/gitwash/development_workflow.html.

- Do not create the PR out of master, but out of a separate branch.

- The PR title should summarize the changes, for example ""Raise ValueError on
  non-numeric input to set_xlim"".  Avoid non-descriptive titles such as
  ""Addresses issue #8576"".

- The summary should provide at least 1-2 sentences describing the pull request
  in detail (Why is this change required?  What problem does it solve?) and
  link to any relevant issues.

- If you are contributing fixes to docstrings, please pay attention to
  http://matplotlib.org/devel/documenting_mpl.html#formatting.  In particular,
  note the difference between using single backquotes, double backquotes, and
  asterisks in the markup.

We understand that PRs can sometimes be overwhelming, especially as the
reviews start coming in.  Please let us know if the reviews are unclear or
the recommended next step seems overly demanding, if you would like help in
addressing a reviewer's comments, or if you have been waiting too long to hear
back on your PR.
-->
",martinRenou,open,2021-02-08 17:19:57,,,,2021-02-27 10:21:08,15,status: needs comment/discussion,v3.5.0,59
803633100,Proof of concept images with units,"xref https://github.com/matplotlib/matplotlib/issues/19476

There is likely lots to iron out, and many tests and documentation that would need adding, but I thought I would open this as a proof of concept for images (or more generally mappables) with units. Things that come to mind are:

- Unit converters expect an `axis` argument, I'm not sure what to do about this when we have a mappable and not an axis
- `munits.registry.get_converter` expects a 1D sequence as input, not 2D, there's probably a way to modify this though

This allows things like this image, where the correct formatter is automatically set on the colorbar:

![imshow-dates](https://user-images.githubusercontent.com/6197628/107235153-48ec3400-6a1c-11eb-82ba-d2f675dca0b9.png)

```python
from datetime import datetime, timedelta
import matplotlib.colors as mcolor
import matplotlib.pyplot as plt

data = [[datetime.now(), datetime.now() - timedelta(seconds=1)],
        [datetime.now(), datetime.now()]]

fig, ax = plt.subplots()
im = ax.imshow(data)
fig.colorbar(im)

plt.show()
```
",dstansby,closed,2021-02-08 14:48:34,,2021-02-08 15:46:22,dstansby,2021-02-08 15:46:22,1,,,
803586648,Fix CallbackRegistry memory leak,"## PR Summary

This PR fixes the issue #19474, and probably the issue #19345

- Plus rewrite some code for readability (like full name instead of letter, intricate loop, try-catch potentially caching many things)
- Plus coverage for the method `disconnect`

A much shorter change count be done to only fix the issue, if you like.

## PR Checklist

<!-- Please mark any checkboxes that do not apply to this PR as [N/A]. -->

- [ ] Has pytest style unit tests (and `pytest` passes).
- [ ] Is [Flake 8](https://flake8.pycqa.org/en/latest/) compliant (run `flake8` on changed files to check).
- [ ] New features are documented, with examples if plot related.
- [ ] Documentation is sphinx and numpydoc compliant (the docs should [build](https://matplotlib.org/devel/documenting_mpl.html#building-the-docs) without error).
- [ ] Conforms to Matplotlib style conventions (install `flake8-docstrings` and run `flake8 --docstring-convention=all`).
- [ ] New features have an entry in `doc/users/next_whats_new/` (follow instructions in README.rst there).
- [ ] API changes documented in `doc/api/next_api_changes/` (follow instructions in README.rst there).
",vallsv,closed,2021-02-08 13:53:27,,2021-02-19 01:03:10,QuLogic,2021-02-19 07:52:38,9,Performance,v3.4.0,53
803581339,Support sharing cycler instances across axes,"<!--
Welcome! Thanks for thinking of a way to improve Matplotlib.


Before creating a new feature request please search the issues for relevant feature requests.
-->

### Problem

It would be useful to be able to share a single cycler instance across multiple axes, so that plotting on one axes advances the same instance on all of them.

### Proposed Solution

```
cycler = <some cycler instance>
ax1.set_prop_cycle(cycler)
ax2.set_prop_cycle(cycler)
```
should use the same cycler instance.  Alternatively, if this is deemed unacceptable due to backcompat breakage (even though I believe this can get a proper deprecation warning), one should at least be able to do e.g.
```
cycler = <some cycler instance>
it = iter(cycler)  # or it = cycler.iter(), or whatnot
ax1.set_prop_cycle(it)
ax2.set_prop_cycle(it)
```
which has no backcompat concerns as set_prop_cycle(single_arg) currently requires single_arg to be exactly a Cycler instance.

### Additional context and prior art

<!-- Add any other context or screenshots about the feature request here. You can also include links to examples of other programs that have something similar to your request. For example:

* Another project [...] solved this by [...]
-->",anntzer,open,2021-02-08 13:46:59,,,,2021-02-09 19:33:18,5,New feature,,
803570534,Fix trivial typo in error message.,"## PR Summary

## PR Checklist

<!-- Please mark any checkboxes that do not apply to this PR as [N/A]. -->

- [ ] Has pytest style unit tests (and `pytest` passes).
- [ ] Is [Flake 8](https://flake8.pycqa.org/en/latest/) compliant (run `flake8` on changed files to check).
- [ ] New features are documented, with examples if plot related.
- [ ] Documentation is sphinx and numpydoc compliant (the docs should [build](https://matplotlib.org/devel/documenting_mpl.html#building-the-docs) without error).
- [ ] Conforms to Matplotlib style conventions (install `flake8-docstrings` and run `flake8 --docstring-convention=all`).
- [ ] New features have an entry in `doc/users/next_whats_new/` (follow instructions in README.rst there).
- [ ] API changes documented in `doc/api/next_api_changes/` (follow instructions in README.rst there).

<!--
Thank you so much for your PR!  To help us review your contribution, please
consider the following points:

- A development guide is available at https://matplotlib.org/devdocs/devel/index.html.

- Help with git and github is available at
  https://matplotlib.org/devel/gitwash/development_workflow.html.

- Do not create the PR out of master, but out of a separate branch.

- The PR title should summarize the changes, for example ""Raise ValueError on
  non-numeric input to set_xlim"".  Avoid non-descriptive titles such as
  ""Addresses issue #8576"".

- The summary should provide at least 1-2 sentences describing the pull request
  in detail (Why is this change required?  What problem does it solve?) and
  link to any relevant issues.

- If you are contributing fixes to docstrings, please pay attention to
  http://matplotlib.org/devel/documenting_mpl.html#formatting.  In particular,
  note the difference between using single backquotes, double backquotes, and
  asterisks in the markup.

We understand that PRs can sometimes be overwhelming, especially as the
reviews start coming in.  Please let us know if the reviews are unclear or
the recommended next step seems overly demanding, if you would like help in
addressing a reviewer's comments, or if you have been waiting too long to hear
back on your PR.
-->
",anntzer,closed,2021-02-08 13:33:56,,2021-02-08 15:28:39,jklymak,2021-02-08 23:15:03,0,Documentation,v3.4.0,53
803415752,Fixed sphinxsidebar text overflow,"## PR Summary
closes #19450 
## PR Checklist

<!-- Please mark any checkboxes that do not apply to this PR as [N/A]. -->

- [x] Has pytest style unit tests (and `pytest` passes).
- [x] Is [Flake 8](https://flake8.pycqa.org/en/latest/) compliant (run `flake8` on changed files to check).
- [x] New features are documented, with examples if plot related.
- [x] Documentation is sphinx and numpydoc compliant (the docs should [build](https://matplotlib.org/devel/documenting_mpl.html#building-the-docs) without error).
- [x] Conforms to Matplotlib style conventions (install `flake8-docstrings` and run `flake8 --docstring-convention=all`).
- [x] New features have an entry in `doc/users/next_whats_new/` (follow instructions in README.rst there).
- [x] API changes documented in `doc/api/next_api_changes/` (follow instructions in README.rst there).

<!--
Thank you so much for your PR!  To help us review your contribution, please
consider the following points:

- A development guide is available at https://matplotlib.org/devdocs/devel/index.html.

- Help with git and github is available at
  https://matplotlib.org/devel/gitwash/development_workflow.html.

- Do not create the PR out of master, but out of a separate branch.

- The PR title should summarize the changes, for example ""Raise ValueError on
  non-numeric input to set_xlim"".  Avoid non-descriptive titles such as
  ""Addresses issue #8576"".

- The summary should provide at least 1-2 sentences describing the pull request
  in detail (Why is this change required?  What problem does it solve?) and
  link to any relevant issues.

- If you are contributing fixes to docstrings, please pay attention to
  http://matplotlib.org/devel/documenting_mpl.html#formatting.  In particular,
  note the difference between using single backquotes, double backquotes, and
  asterisks in the markup.

We understand that PRs can sometimes be overwhelming, especially as the
reviews start coming in.  Please let us know if the reviews are unclear or
the recommended next step seems overly demanding, if you would like help in
addressing a reviewer's comments, or if you have been waiting too long to hear
back on your PR.
-->
",rajpratyush,open,2021-02-08 10:20:35,,,,2021-02-10 09:29:09,2,Documentation,,
803381216,Allow use of unitful data in images,"<!--
Welcome! Thanks for thinking of a way to improve Matplotlib.


Before creating a new feature request please search the issues for relevant feature requests.
-->

### Problem
Often the data stored in images can have physical values associated with them. It would therefore be good if there was support for using the unit machinery to allow images to have units.

### Proposed Solution
Here's a short example that should work fine using units, but which currently fails. The use of datetime is a bit contrived, but I chose it to avoid a third party package. For a more realistic real-world example see https://github.com/astropy/astropy/issues/11306.
```python
from datetime import datetime
import matplotlib.colors as mcolor
import matplotlib.pyplot as plt

data = [[datetime.now(), datetime.now()],
        [datetime.now(), datetime.now()]]

fig, ax = plt.subplots()
im = ax.imshow(data, norm=mcolor.LogNorm())
fig.colorbar(im)

plt.show()
```
This fails in
```python
  File ""/Users/dstansby/github/matplotlib/lib/matplotlib/axes/_axes.py"", line 5586, in imshow
    im.set_data(X)
  File ""/Users/dstansby/github/matplotlib/lib/matplotlib/image.py"", line 700, in set_data
    raise TypeError(""Image data of dtype {} cannot be converted to ""
TypeError: Image data of dtype object cannot be converted to float
```",dstansby,open,2021-02-08 09:38:13,,,,2021-02-08 15:40:44,4,"New feature, topic: units",,
803225677,Bump actions/cache from v2 to v2.1.4,"Bumps [actions/cache](https://github.com/actions/cache) from v2 to v2.1.4.
<details>
<summary>Release notes</summary>
<p><em>Sourced from <a href=""https://github.com/actions/cache/releases"">actions/cache's releases</a>.</em></p>
<blockquote>
<h2>v2.1.4</h2>
<ul>
<li>Make caching more verbose <a href=""https://github-redirect.dependabot.com/actions/toolkit/pull/650"">#650</a></li>
<li>Use GNU tar on macOS if available <a href=""https://github-redirect.dependabot.com/actions/toolkit/pull/701"">#701</a></li>
</ul>
</blockquote>
</details>
<details>
<summary>Commits</summary>
<ul>
<li><a href=""https://github.com/actions/cache/commit/26968a09c0ea4f3e233fdddbafd1166051a095f6""><code>26968a0</code></a> Make save/restore logs akin (<a href=""https://github-redirect.dependabot.com/actions/cache/issues/509"">#509</a>)</li>
<li><a href=""https://github.com/actions/cache/commit/aeaf731ae27476fbdef0ec9028b91f8b07b22c5d""><code>aeaf731</code></a> Use @actions/cache version 1.0.6 (<a href=""https://github-redirect.dependabot.com/actions/cache/issues/525"">#525</a>)</li>
<li><a href=""https://github.com/actions/cache/commit/56a8a2f77583e58fcda120d0902eccfbc7b220bf""><code>56a8a2f</code></a> Merge pull request <a href=""https://github-redirect.dependabot.com/actions/cache/issues/514"">#514</a> from eregon/recommend-setup-ruby-bundler-cache</li>
<li><a href=""https://github.com/actions/cache/commit/1bfe3accb30cbecd1eb79cdba246c3a7fc899cdf""><code>1bfe3ac</code></a> Recommend ruby/setup-ruby's bundler-cache: true option</li>
<li><a href=""https://github.com/actions/cache/commit/354332455a7a9ae5492723ca9d4d082484e173bc""><code>3543324</code></a> Merge pull request <a href=""https://github-redirect.dependabot.com/actions/cache/issues/434"">#434</a> from DanielHabenicht/patch-1</li>
<li><a href=""https://github.com/actions/cache/commit/3303695afa44b4dd4776286c04fc1fbffe1ae68c""><code>3303695</code></a> Merge pull request <a href=""https://github-redirect.dependabot.com/actions/cache/issues/507"">#507</a> from odin-delrio/patch-1</li>
<li><a href=""https://github.com/actions/cache/commit/e64ab303d144824d683711d5c78723c915ff952b""><code>e64ab30</code></a> Improved gradle cache key calculation example</li>
<li><a href=""https://github.com/actions/cache/commit/26c48dce83c8127f120594ca7290654e35acfa03""><code>26c48dc</code></a> Merge pull request <a href=""https://github-redirect.dependabot.com/actions/cache/issues/506"">#506</a> from actions/cache-matrix-example</li>
<li><a href=""https://github.com/actions/cache/commit/72f66cfa6dcadd8440e1382d36b556a7a43a52bc""><code>72f66cf</code></a> Added a cache example when using matrix</li>
<li><a href=""https://github.com/actions/cache/commit/9f3a4d3e65eb0e37d28bc055c0d1a91eac6d76fe""><code>9f3a4d3</code></a> Merge pull request <a href=""https://github-redirect.dependabot.com/actions/cache/issues/443"">#443</a> from guilleijo/pipenv-example</li>
<li>Additional commits viewable in <a href=""https://github.com/actions/cache/compare/v2...26968a09c0ea4f3e233fdddbafd1166051a095f6"">compare view</a></li>
</ul>
</details>
<br />


Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.

[//]: # (dependabot-automerge-start)
[//]: # (dependabot-automerge-end)

---

<details>
<summary>Dependabot commands and options</summary>
<br />

You can trigger Dependabot actions by commenting on this PR:
- `@dependabot rebase` will rebase this PR
- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it
- `@dependabot merge` will merge this PR after your CI passes on it
- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it
- `@dependabot cancel merge` will cancel a previously requested merge and block automerging
- `@dependabot reopen` will reopen this PR if it is closed
- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually
- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)
- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)
- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)


</details>",dependabot[bot],closed,2021-02-08 06:06:57,,2021-02-08 23:14:00,QuLogic,2021-02-08 23:14:12,3,dependencies,,
803090629,Memory leak with CallbackRegistry,"Hi,

Here is a report with a possible patch.

### Bug report

We had memory leak issue with our library (see https://github.com/silx-kit/silx/issues/3372).

`CallbackRegistry` can sometimes not clean up stored weakref from released object.

**Bug summary**

`_func_cid_map` is only cleaned up if a callback name if fully empty.

We can think of cases where objects are released in order to never make this callback empty.

As result dead weakrefs are still stored in the structure. 

**Code for reproduction**

```
from matplotlib.cbook import CallbackRegistry

callbacks = CallbackRegistry()

class Foo:
    def callback(x):
        pass

for i in range(100):
    a = Foo()
    callbacks.connect(""units"", a.callback)
    b = Foo()
    callbacks.connect(""units"", b.callback)

    print(""Is that grow up?"", len(callbacks._func_cid_map['units']))
```

**Expected outcome**

We expect `_func_cid_map` to be not bigger than 2.

**Matplotlib version**

- 3.3.4
- git-blame tells it was there 6 years ago 

### Fix

Without thinking much, i did this hotfix.

```python
     def _remove_proxy(self, proxy, *, _is_finalizing=sys.is_finalizing):
         if _is_finalizing():
             # Weakrefs can't be properly torn down at that point anymore.
             return
         for signal, proxies in list(self._func_cid_map.items()):
             try:
                 del self.callbacks[signal][proxies[proxy]]
+                del self._func_cid_map[signal][proxy]
             except KeyError:
                 pass
             if len(self.callbacks[signal]) == 0:
                 del self.callbacks[signal]
                 del self._func_cid_map[signal]
```
",vallsv,closed,2021-02-07 23:40:01,,2021-02-19 01:04:48,QuLogic,2021-02-19 01:05:08,6,Performance,v3.4.0,53
803022614,Animations in Tkinter window advance non-uniformly,"### Bug report

**Bug summary**
When a Tkinter window is created, and multiple Matplotlib animated graphs are inserted into this window, the first animation placed in the window gets updated (gets its animate(i) function) called twice as often as all the others.

**Code for reproduction**

```
import tkinter as tk
import matplotlib
import matplotlib.pyplot as plt
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg
import matplotlib.animation as animation
import numpy as np

class Graph:
    def __init__(self,tk_root,pos_list):
        self.fig = plt.figure(linewidth=2,edgecolor='black')
        self.ax=self.fig.add_subplot(111)
        canvas = FigureCanvasTkAgg(self.fig, master=tk_root)
        plot_widget = canvas.get_tk_widget()
        x,y,w,h = pos_list
        plot_widget.place(x=x,y=y,w=w,h=h)

        self.line, = self.ax.plot([], [])
        self.xvals = []
        self.yvals = []
        plt.xlim(-10,0.2)
        plt.ylim(-1.1,1.1)
    def animate(self,i):
        print(i)
        self.xvals.append(i/10)
        self.yvals.append(np.sin(i/10))
        self.xvals = self.xvals[-101:]
        self.yvals = self.yvals[-101:]
        self.line.set_data([i-self.xvals[-1] for i in self.xvals],self.yvals)
        return self.line,
root = tk.Tk()
matplotlib.use('TkAgg')

graphs_to_draw = 8
for i in range(graphs_to_draw):
    new_graph = Graph(root,[150*i % 600,i*150//600 * 125,150,100])
    new_anim = animation.FuncAnimation(new_graph.fig,new_graph.animate,interval=1,blit=True)
root.mainloop()
```
**Actual outcome**

8 graphs are produced, as requested. However, it is evident that the first runs twice as fast as all others. Furthermore, in the console output (printed on the first line of the animate function), it is clear that the function is being called twice on that entry for every one time the other entries get called. A sample of console output looks like:

```
97
97
97
97
97
97
97
195
196
98
98
98
98
98
98
98
197
198
99
99
99
99
99
99
99
199
200
```
So it is clear that we get `98` printed 7 times (once for all the normal-functioning graphs), and then we get 197 followed by 198. The frame counter is incrementing twice, and is also at a value that has now reached twice the value of all the others. Every frame is happening twice, but only on the first plot. Note that this is also whichever plot is introduced to the tkinter window first - placement seems to make no difference.
**Expected outcome**
All graphs should perform the same. They're just generated in a for loop and there's no reason one should run so much faster than all the others. Ideally, they would all run at the fast speed, but at the very least the speed should be uniform.

**Matplotlib version**
<!--Please specify your platform and versions of the relevant libraries you are using:-->
  * Operating system: `Ubuntu 20.04.2`
  * Matplotlib version: `3.2.1`
  * Matplotlib backend: get_backend() says Qt5Agg, but at the top of my example script I say matplotlib.use('TkAgg'). 
  * Python version: 3.8.4
  * Jupyter version (if applicable): Nope 
  * Other libraries: Only tkinter (built into python). I also import numpy here, but that doesn't seem relevant since I'm just getting a sine.

<!--Please tell us how you installed matplotlib and python e.g., from source, pip, conda-->
I think Python comes with Ubuntu. Matplotlib was installed through pip.

",tj-murphy,closed,2021-02-07 18:38:56,,2021-02-13 18:07:10,anntzer,2021-02-13 18:07:15,8,"GUI/tk, status: needs confirmation, topic: animation",v3.4.0,53
802965735,Fix default label visibility for top-or-left-labeled shared subplots().,"On the following example
```python
from pylab import *
rcParams.update({""xtick.labeltop"": 1, ""xtick.labelbottom"": 0,
                 ""ytick.labelright"": 1, ""ytick.labelleft"": 0})
subplots(3, 3, sharex=True, sharey=True)
```
subplots() now correctly leaves the xlabels on the first row and the
ylabels on the last column, rather than the other way round.

old:
![old1](https://user-images.githubusercontent.com/1322974/107149528-5a203c80-6959-11eb-9bb1-8c724f75295f.png)
new:
![new1](https://user-images.githubusercontent.com/1322974/107149519-542a5b80-6959-11eb-9085-81b661d2321d.png)

On the following example
```python
from pylab import *
rcParams.update({""xtick.labeltop"": 1, ""xtick.labelbottom"": 1,
                 ""ytick.labelright"": 1, ""ytick.labelleft"": 1})
subplots(3, 3, sharex=True, sharey=True)
show()
```
subplots() now correctly leaves the xlabels on the first and last row
and the ylabels on the first and last column.

old:
![old2](https://user-images.githubusercontent.com/1322974/107149535-60aeb400-6959-11eb-9acb-c4c529e8f5ff.png)
new:
![new2](https://user-images.githubusercontent.com/1322974/107149530-5d1b2d00-6959-11eb-9b64-9ffc343b1a30.png)

## PR Summary

## PR Checklist

<!-- Please mark any checkboxes that do not apply to this PR as [N/A]. -->

- [ ] Has pytest style unit tests (and `pytest` passes).
- [ ] Is [Flake 8](https://flake8.pycqa.org/en/latest/) compliant (run `flake8` on changed files to check).
- [ ] New features are documented, with examples if plot related.
- [ ] Documentation is sphinx and numpydoc compliant (the docs should [build](https://matplotlib.org/devel/documenting_mpl.html#building-the-docs) without error).
- [ ] Conforms to Matplotlib style conventions (install `flake8-docstrings` and run `flake8 --docstring-convention=all`).
- [ ] New features have an entry in `doc/users/next_whats_new/` (follow instructions in README.rst there).
- [ ] API changes documented in `doc/api/next_api_changes/` (follow instructions in README.rst there).

<!--
Thank you so much for your PR!  To help us review your contribution, please
consider the following points:

- A development guide is available at https://matplotlib.org/devdocs/devel/index.html.

- Help with git and github is available at
  https://matplotlib.org/devel/gitwash/development_workflow.html.

- Do not create the PR out of master, but out of a separate branch.

- The PR title should summarize the changes, for example ""Raise ValueError on
  non-numeric input to set_xlim"".  Avoid non-descriptive titles such as
  ""Addresses issue #8576"".

- The summary should provide at least 1-2 sentences describing the pull request
  in detail (Why is this change required?  What problem does it solve?) and
  link to any relevant issues.

- If you are contributing fixes to docstrings, please pay attention to
  http://matplotlib.org/devel/documenting_mpl.html#formatting.  In particular,
  note the difference between using single backquotes, double backquotes, and
  asterisks in the markup.

We understand that PRs can sometimes be overwhelming, especially as the
reviews start coming in.  Please let us know if the reviews are unclear or
the recommended next step seems overly demanding, if you would like help in
addressing a reviewer's comments, or if you have been waiting too long to hear
back on your PR.
-->
",anntzer,closed,2021-02-07 14:31:12,,2021-02-18 22:40:10,QuLogic,2021-02-18 22:51:13,3,topic: ticks axis labels,v3.4.0,53
802960357,axis offset texts not moving when tick & labels are displaced using rcParams or Axes.tick_params,"<!--To help us understand and resolve your issue, please fill out the form to the best of your ability.-->
<!--You can feel free to delete the sections that do not apply.-->

### Bug report

**Bug summary**

Moving ticks and labels to the top and right axis using rcParams or Axes.tick_params() doesn't move the offset text as well.

**Code for reproduction**

<!--A minimum code snippet required to reproduce the bug.
Please make sure to minimize the number of dependencies required, and provide
any necessary plotted data.
Avoid using threads, as Matplotlib is (explicitly) not thread-safe.-->

```python
from pylab import *
rcdefaults()

rcParams.update({
    ""xtick.top"": 1, ""xtick.labeltop"": 1, ""xtick.bottom"": 0, ""xtick.labelbottom"": 0,
    ""ytick.right"": 1, ""ytick.labelright"": 1, ""ytick.left"": 0, ""ytick.labelleft"": 0,})
figure().add_subplot().set(xlim=(10001, 10002), ylim=(10001, 10002))
savefig(""/tmp/rc.png"")

rcdefaults()
figure().add_subplot().set(xlim=(10001, 10002), ylim=(10001, 10002))
gca().tick_params(top=True, labeltop=True, bottom=False, labelbottom=False,
                  right=True, labelright=True, left=False, labelleft=False)
savefig(""/tmp/tickparams.png"")

rcdefaults()
figure().add_subplot().set(xlim=(10001, 10002), ylim=(10001, 10002))
gca().xaxis.tick_top()
gca().yaxis.tick_right()
savefig(""/tmp/tick_dir.png"")
```

**Actual outcome**

<!--The output produced by the above code, which may be a screenshot, console output, etc.-->
Positioning via rcParams:
![rc](https://user-images.githubusercontent.com/1322974/107148857-cd27b400-6955-11eb-98db-dfca0111eff7.png)
via Axes.tick_params():
![tickparams](https://user-images.githubusercontent.com/1322974/107148859-d1ec6800-6955-11eb-9fbd-f1d079e32754.png)
via XAxis.tick_top()/YAxis.tick_right():
![tick_dir](https://user-images.githubusercontent.com/1322974/107148876-e16bb100-6955-11eb-90a2-3926be2a539f.png)

Only the latest approach works.  (The offset texts are overlapping, but that's another issue...)

**Expected outcome**

Same as XAxis.tick_top()/YAxis.tick_right()

**Matplotlib version**
<!--Please specify your platform and versions of the relevant libraries you are using:-->
  * Operating system: linux
  * Matplotlib version (`import matplotlib; print(matplotlib.__version__)`): HEAD
  * Matplotlib backend (`print(matplotlib.get_backend())`): agg
  * Python version: 39
  * Jupyter version (if applicable): 
  * Other libraries: 

<!--Please tell us how you installed matplotlib and python e.g., from source, pip, conda-->
<!--If you installed from conda, please specify which channel you used if not the default-->

",anntzer,open,2021-02-07 14:06:24,,,,2021-02-07 14:06:40,0,topic: ticks axis labels,,
802852889,2 Different mappings for same formula,"### Bug report

**Bug summary**

I receive two different mappings (one of them is obviously wrong) for a single piece of math formula in both ""pyplot"" & ""matplotlib.pyplot""! 

**Bug Details**
I've encountered a problem with both ""pylab"" and ""matplotlib.pyplot"".
As documented in attached photos the graph of the function i'm working with are not correct! 
The correct form of the function must follow the lead of scattered points but it's rotated 90° clockwise (Math: -90°)!
This function is one of the famous ones,AS in MATLAB output the line that connects deepest valley point to top of the hill must be ""y=x"" but here is ""y=-x""
the scattered points are correct due to their color code, but not the ""surface imaging"", please see through this problem if the library functions are a little buggy.


**Code for reproduction**

```python *(jupyter notebook)

import numpy as np
from scipy import interpolate
import pylab as py

def func(x,y):
    return (x+y)*np.exp(-(x**2 + y**2))

x = np.random.uniform(-1, 1, size=50)
y = np.random.uniform(-1, 1, size=50)
fvals = func(x,y)
newfunc = interpolate.Rbf(x, y, fvals, function='multiquadric')
xnew, ynew = np.mgrid[-1:1:1000j, -1:1:1000j]
fnew = newfunc(xnew, ynew)

# Create image plot by pylab
py.figure(1)
py.clf()
py.imshow(fnew, extent=[-1,1, -1,1], cmap=py.cm.jet)
py.scatter(x,y,30,fvals,cmap=py.cm.jet)
py.show()

# Create image plot by matplotlib
import matplotlib.pyplot as mp
mp.figure(1)
mp.clf()
mp.imshow(fnew, extent=[-1,1, -1,1], cmap=mp.cm.jet)
mp.scatter(x,y,30,fvals,cmap=mp.cm.jet)
mp.show()
```

**Actual outcome**

Is Attached as: ""Bug.png""
![Bug](https://user-images.githubusercontent.com/76484959/107136282-0db40d00-6917-11eb-9ac0-bd7f807c3995.png)
**Expected outcome**

Is attached as: ""Correct.png""
![Correct](https://user-images.githubusercontent.com/76484959/107136322-2fad8f80-6917-11eb-8c8f-0020dd9aaa4a.png)

**Matplotlib version**

  * Operating system: MS Win-7 x64 (Ultimate)
  * Matplotlib version (`import matplotlib; print(matplotlib.__version__)`): 
  Out [1]: '3.3.2'
  * Matplotlib backend (`print(matplotlib.get_backend())`):  
  Out [2]: module://ipykernel.pylab.backend_inline
  * Python version: 
  Out [3]: '3.8.5'
  * Jupyter version (if applicable):  6.2.0
  * Other libraries: 
   numpy: '1.19.2'
   scipy: '1.5.2'

I'm working with Anaconda: ""Anaconda3 2020.07 x86_64"" from: ""https://www.anaconda.com/"" and it is updated with: ""conda update --all"" command in command prompt.",Eftakhari,closed,2021-02-07 04:09:10,,2021-02-07 04:34:03,jklymak,2021-02-07 05:00:15,1,,,
802725926,[bug] segmentation fault when try to savefig a pdf with Chinese font,"## Environment

- linux 5.4.13
- python 3.9.0b3
- ipython 7.19.0
- matplotlib 3.3.3
- texlive 2019-r1 (maybe useful)
- qt 5.15.0 (maybe useful)
- jupter 1.0.0-r2 (but i use ipython in terminal not jupyter)

## Reproduce Procedures

```ipython
%matplotlib qt
import matplotlib.pyplot as plt
fig,ax=plt.subplots(1,1)
ax.set_xlabel('测试',fontdict={'family': 'WenQuanYi Micro Hei'})
plt.savefig('a.pdf')
```

```shell
[1]    50554 segmentation fault (core dumped)  ipython
```

## Note

WenQuanYi Micro Hei is a open source chinese font and can be installed by
`sudo emerge -av media-fonts/wqy-microhei` in my distribution. replacing it
with any Chinese font will result in the same bug. if replace it with any
non-Chinese font will not output Chinese character and avoid the bug.

if the picture format is png, the bug will not occur, and the file `a.png`
will be normal.
",Freed-Wu,closed,2021-02-06 15:34:25,,2021-02-06 19:44:36,anntzer,2021-02-06 19:44:43,1,"backend/pdf, topic: text/fonts",,
802701914,Include tex output in pdf LatexError.,"This will make it easier to troubleshoot failures on CI.

## PR Summary

## PR Checklist

<!-- Please mark any checkboxes that do not apply to this PR as [N/A]. -->

- [ ] Has pytest style unit tests (and `pytest` passes).
- [ ] Is [Flake 8](https://flake8.pycqa.org/en/latest/) compliant (run `flake8` on changed files to check).
- [ ] New features are documented, with examples if plot related.
- [ ] Documentation is sphinx and numpydoc compliant (the docs should [build](https://matplotlib.org/devel/documenting_mpl.html#building-the-docs) without error).
- [ ] Conforms to Matplotlib style conventions (install `flake8-docstrings` and run `flake8 --docstring-convention=all`).
- [ ] New features have an entry in `doc/users/next_whats_new/` (follow instructions in README.rst there).
- [ ] API changes documented in `doc/api/next_api_changes/` (follow instructions in README.rst there).

<!--
Thank you so much for your PR!  To help us review your contribution, please
consider the following points:

- A development guide is available at https://matplotlib.org/devdocs/devel/index.html.

- Help with git and github is available at
  https://matplotlib.org/devel/gitwash/development_workflow.html.

- Do not create the PR out of master, but out of a separate branch.

- The PR title should summarize the changes, for example ""Raise ValueError on
  non-numeric input to set_xlim"".  Avoid non-descriptive titles such as
  ""Addresses issue #8576"".

- The summary should provide at least 1-2 sentences describing the pull request
  in detail (Why is this change required?  What problem does it solve?) and
  link to any relevant issues.

- If you are contributing fixes to docstrings, please pay attention to
  http://matplotlib.org/devel/documenting_mpl.html#formatting.  In particular,
  note the difference between using single backquotes, double backquotes, and
  asterisks in the markup.

We understand that PRs can sometimes be overwhelming, especially as the
reviews start coming in.  Please let us know if the reviews are unclear or
the recommended next step seems overly demanding, if you would like help in
addressing a reviewer's comments, or if you have been waiting too long to hear
back on your PR.
-->
",anntzer,closed,2021-02-06 13:21:53,,2021-02-08 23:22:58,QuLogic,2021-02-09 00:13:36,0,backend/pgf,v3.4.0,53
802679303,Shorten the implementation of violin().,"Just some standard rewriting.

## PR Summary

## PR Checklist

<!-- Please mark any checkboxes that do not apply to this PR as [N/A]. -->

- [ ] Has pytest style unit tests (and `pytest` passes).
- [ ] Is [Flake 8](https://flake8.pycqa.org/en/latest/) compliant (run `flake8` on changed files to check).
- [ ] New features are documented, with examples if plot related.
- [ ] Documentation is sphinx and numpydoc compliant (the docs should [build](https://matplotlib.org/devel/documenting_mpl.html#building-the-docs) without error).
- [ ] Conforms to Matplotlib style conventions (install `flake8-docstrings` and run `flake8 --docstring-convention=all`).
- [ ] New features have an entry in `doc/users/next_whats_new/` (follow instructions in README.rst there).
- [ ] API changes documented in `doc/api/next_api_changes/` (follow instructions in README.rst there).

<!--
Thank you so much for your PR!  To help us review your contribution, please
consider the following points:

- A development guide is available at https://matplotlib.org/devdocs/devel/index.html.

- Help with git and github is available at
  https://matplotlib.org/devel/gitwash/development_workflow.html.

- Do not create the PR out of master, but out of a separate branch.

- The PR title should summarize the changes, for example ""Raise ValueError on
  non-numeric input to set_xlim"".  Avoid non-descriptive titles such as
  ""Addresses issue #8576"".

- The summary should provide at least 1-2 sentences describing the pull request
  in detail (Why is this change required?  What problem does it solve?) and
  link to any relevant issues.

- If you are contributing fixes to docstrings, please pay attention to
  http://matplotlib.org/devel/documenting_mpl.html#formatting.  In particular,
  note the difference between using single backquotes, double backquotes, and
  asterisks in the markup.

We understand that PRs can sometimes be overwhelming, especially as the
reviews start coming in.  Please let us know if the reviews are unclear or
the recommended next step seems overly demanding, if you would like help in
addressing a reviewer's comments, or if you have been waiting too long to hear
back on your PR.
-->
",anntzer,open,2021-02-06 11:28:24,,,,2021-02-10 09:24:53,0,Maintenance,,
802677048,ci: pytest artifact upload,"Collects `result_images` from failed tests and uploads them as artifacts on GHA. Filtering was necessary because the full set is ~50MB which is not practical for downloading and inspecting anyway.

https://github.com/matplotlib/matplotlib/actions/runs/543223044",andrzejnovak,open,2021-02-06 11:14:38,,,,2021-02-13 22:03:30,3,,,
802373060,Error with datetime axis on fill_between,"I get the following error using fill_between():

`ValueError: view limit minimum -8.824463999922536e+16 is less than 1 and is an invalid Matplotlib date value. This often happens if you pass a non-datetime value to an axis that has datetime units
`
Here's the code that I am using:

```
ax.plot(df1['dt'],df1['fcast'],label='forecast',color='k',ls='--')
ax.fill_between(x=df1['dt'],y1=fcast[2][:,0],y2=fcast[2][:,1],alpha=0.1)
plt.show()
```

But this code runs just fine, which leads me to believe that the issue is with fill_between.

```
ax.plot(df1['dt'],df1['fcast'],label='forecast',color='k',ls='--')
ax.plot(df1['dt'],fcast[2][:,0],color='r')
ax.plot(df1['dt'],fcast[2][:,1],color='r')
plt.show()
```",Rblivingstone,closed,2021-02-05 18:14:31,,2021-02-17 15:08:25,jklymak,2021-02-17 15:08:25,5,status: needs clarification,,
802360101,Quiver docs don't have a return section,"<!--To help us understand and resolve your issue, please fill out the form to the best of your ability.-->
<!--You can feel free to delete the sections that do not apply.-->

### Problem
The doc(string) for `ax.quiver` doesn't include a `Returns` section that shows that it returns a `matplotlib.quiver.Quiver` 
https://matplotlib.org/devdocs/api/_as_gen/matplotlib.pyplot.quiver.html

This makes it tricky to click through from that page to see the methods of this object.

This is because the axes quiver method takes a straight copy of the quiver init docstring.

https://github.com/matplotlib/matplotlib/blob/4da4cf9da681d1ddfd17cb60e78588e2c55a1e23/lib/matplotlib/axes/_axes.py#L5099


<!--
If you are referencing an existing piece of documentation or example please provide a link.

* I found [...] to be unclear because [...]
* [...] made me think that [...] when really it should be [...]
* There is no example showing how to do [...]
-->


### Suggested Improvement
add a `Returns` section.",ianhi,closed,2021-02-05 17:53:16,,2021-03-02 00:27:03,QuLogic,2021-03-02 00:27:14,4,"Documentation, Good first issue",v3.5.0,59
802277265,"Support subplots((m, n), ...) as shorthand for subplots(m, n, squeeze=False, ...)","<!--
Welcome! Thanks for thinking of a way to improve Matplotlib.


Before creating a new feature request please search the issues for relevant feature requests.
-->

### Problem

`subplots()` defaults to auto-squeezing the returned Axes array (returning a single array when one is requested, returning a 1D array when a single row or single column is requested), likely for practicality, but this makes dynamic layouts pretty annoying: if you write `axs = fig.subplots(m, n)` where `m` and `n` are somehow dynamically computed (based on some dataset characteristics) and then later plan to use `axs[i, j]`, you basically have an IndexError waiting to happen unless you can be certain that `m` and `n` are never 1.  Of course one can remember to always write `subplots(..., squeeze=False)`, but that's a bit verbose.

### Proposed Solution

My preferred solution would probably have been to make the default `m` and `n` not 1, but None, so that None means ""1 in that direction, and squeeze that direction"" whereas 1 just means 1 (without squeezing).  This would have fixed most common cases, e.g. if you write `subplots()` you get a single axes, `subplots(3)` or `subplots(nrows=3)` or `subplots(ncols=3)` you get a 1D array, `subplots(m, n)` (where `m` and `n` are dynamically computed variables) you always get a 2D array.  I think in practice the main back-incompatibility of this proposal that occurs in real life is `subplots(1, 3)` (single row, likely not so uncommon), which would typically have to be written `subplots(None, 3)` or `subplots(ncols=3)` or `fig, (axs,) = subplots(3)` (for the additional unpacking).

Assuming that this backcompat breakage is not acceptable (it likely is not), one alternative would be to change the signature of `subplots()` to also support taking a single *2-tuple* as argument (rather than `nrows` and `ncols` separately, and make `subplots((m, n))` never squeeze the input.  (Likely we wouldn't bother supporting `m` or `n` being None, in that case.)  Then it would be OK to retrain my muscle memory to just always add an extra pair of parentheses when calling `subplots`.

### Additional context and prior art

<!-- Add any other context or screenshots about the feature request here. You can also include links to examples of other programs that have something similar to your request. For example:

* Another project [...] solved this by [...]
-->",anntzer,open,2021-02-05 15:55:30,,,,2021-02-08 22:03:05,8,"New feature, status: needs comment/discussion",v3.5.0,59
802165808,Cannot save a very large (pixels) figure,"anaconda:
  - python version: 3.7.4
  - matplotlib version: 3.0.3

Trying to save a pixel-perfect image from an array of 32768x32768 I get a segmentation fault.

Step to reproduce:
```python
# imm is a 32768x32768 numpy array of int32.
n_inch = int(2**6)
fig = figure(frameon=False, figsize=(n_inch, n_inch)) 
ax = fig.add_axes([0, 0, 1, 1])
ax.imshow(imm, origin='lower', cmap='bone_r', interpolation='none')

fig.savefig('./very_large.tiff', dpi=imm.shape[0]//n_inch) # This line gives segmentation fault
```",miguelpenc,closed,2021-02-05 13:29:57,,2021-02-05 16:19:41,miguelpenc,2021-02-05 16:19:42,2,,,
802093116,Move ToolManager warnings to rcParam validator,"## PR Summary

Applies patch from [#15284](https://github.com/matplotlib/matplotlib/issues/15284#issuecomment-687015853)
See also [#19458](https://github.com/matplotlib/matplotlib/pull/19458#issue-568076935)

## PR Checklist

<!-- Please mark any checkboxes that do not apply to this PR as [N/A]. -->

- [x] Has pytest style unit tests (and `pytest` passes).
- [x] Is [Flake 8](https://flake8.pycqa.org/en/latest/) compliant (run `flake8` on changed files to check).
- [ ] New features are documented, with examples if plot related.
- [ ] Documentation is sphinx and numpydoc compliant (the docs should [build](https://matplotlib.org/devel/documenting_mpl.html#building-the-docs) without error).
- [ ] Conforms to Matplotlib style conventions (install `flake8-docstrings` and run `flake8 --docstring-convention=all`).
- [ ] New features have an entry in `doc/users/next_whats_new/` (follow instructions in README.rst there).
- [ ] API changes documented in `doc/api/next_api_changes/` (follow instructions in README.rst there).

<!--
Thank you so much for your PR!  To help us review your contribution, please
consider the following points:

- A development guide is available at https://matplotlib.org/devdocs/devel/index.html.

- Help with git and github is available at
  https://matplotlib.org/devel/gitwash/development_workflow.html.

- Do not create the PR out of master, but out of a separate branch.

- The PR title should summarize the changes, for example ""Raise ValueError on
  non-numeric input to set_xlim"".  Avoid non-descriptive titles such as
  ""Addresses issue #8576"".

- The summary should provide at least 1-2 sentences describing the pull request
  in detail (Why is this change required?  What problem does it solve?) and
  link to any relevant issues.

- If you are contributing fixes to docstrings, please pay attention to
  http://matplotlib.org/devel/documenting_mpl.html#formatting.  In particular,
  note the difference between using single backquotes, double backquotes, and
  asterisks in the markup.

We understand that PRs can sometimes be overwhelming, especially as the
reviews start coming in.  Please let us know if the reviews are unclear or
the recommended next step seems overly demanding, if you would like help in
addressing a reviewer's comments, or if you have been waiting too long to hear
back on your PR.
-->
",EBenkler,closed,2021-02-05 11:35:17,,2021-02-10 23:40:58,QuLogic,2021-02-10 23:41:11,1,,v3.4.0,53
802039484,Implement angles for bracket arrow styles.,"## PR Summary

As an alternate to #19327. Might need a docs feature entry?

## PR Checklist

- [x] Has pytest style unit tests (and `pytest` passes).
- [x] Is [Flake 8](https://flake8.pycqa.org/en/latest/) compliant (run `flake8` on changed files to check).
- [?] New features are documented, with examples if plot related.
- [n/a] Documentation is sphinx and numpydoc compliant (the docs should [build](https://matplotlib.org/devel/documenting_mpl.html#building-the-docs) without error).
- [x] Conforms to Matplotlib style conventions (install `flake8-docstrings` and run `flake8 --docstring-convention=all`).
- [x] New features have an entry in `doc/users/next_whats_new/` (follow instructions in README.rst there).
- [ ] API changes documented in `doc/api/next_api_changes/` (follow instructions in README.rst there).",QuLogic,closed,2021-02-05 10:18:43,,2021-02-17 04:09:28,tacaswell,2021-02-17 04:11:24,1,New feature,v3.4.0,53
802022344,Merge v3.3.4 into master,"## PR Summary

Fixes version-from-tags, and brings the one other fix from #19115 up.

## PR Checklist

- [x] Has pytest style unit tests (and `pytest` passes).
- [x] Is [Flake 8](https://flake8.pycqa.org/en/latest/) compliant (run `flake8` on changed files to check).
- [n/a] New features are documented, with examples if plot related.
- [n/a] Documentation is sphinx and numpydoc compliant (the docs should [build](https://matplotlib.org/devel/documenting_mpl.html#building-the-docs) without error).
- [x] Conforms to Matplotlib style conventions (install `flake8-docstrings` and run `flake8 --docstring-convention=all`).
- [n/a] New features have an entry in `doc/users/next_whats_new/` (follow instructions in README.rst there).
- [n/a] API changes documented in `doc/api/next_api_changes/` (follow instructions in README.rst there).",QuLogic,closed,2021-02-05 09:55:39,,2021-02-05 17:55:54,tacaswell,2021-02-05 22:49:33,1,Maintenance,v3.4.0,53
801831821,"Remove outdated, annoying warning","## PR Summary
Remove the outdated warning related to Toolbar toolmanager (see issue #15284)
## PR Checklist

<!-- Please mark any checkboxes that do not apply to this PR as [N/A]. -->

- [ ] Has pytest style unit tests (and `pytest` passes).
- [ ] Is [Flake 8](https://flake8.pycqa.org/en/latest/) compliant (run `flake8` on changed files to check).
- [ ] New features are documented, with examples if plot related.
- [ ] Documentation is sphinx and numpydoc compliant (the docs should [build](https://matplotlib.org/devel/documenting_mpl.html#building-the-docs) without error).
- [ ] Conforms to Matplotlib style conventions (install `flake8-docstrings` and run `flake8 --docstring-convention=all`).
- [ ] New features have an entry in `doc/users/next_whats_new/` (follow instructions in README.rst there).
- [ ] API changes documented in `doc/api/next_api_changes/` (follow instructions in README.rst there).

<!--
Thank you so much for your PR!  To help us review your contribution, please
consider the following points:

- A development guide is available at https://matplotlib.org/devdocs/devel/index.html.

- Help with git and github is available at
  https://matplotlib.org/devel/gitwash/development_workflow.html.

- Do not create the PR out of master, but out of a separate branch.

- The PR title should summarize the changes, for example ""Raise ValueError on
  non-numeric input to set_xlim"".  Avoid non-descriptive titles such as
  ""Addresses issue #8576"".

- The summary should provide at least 1-2 sentences describing the pull request
  in detail (Why is this change required?  What problem does it solve?) and
  link to any relevant issues.

- If you are contributing fixes to docstrings, please pay attention to
  http://matplotlib.org/devel/documenting_mpl.html#formatting.  In particular,
  note the difference between using single backquotes, double backquotes, and
  asterisks in the markup.

We understand that PRs can sometimes be overwhelming, especially as the
reviews start coming in.  Please let us know if the reviews are unclear or
the recommended next step seems overly demanding, if you would like help in
addressing a reviewer's comments, or if you have been waiting too long to hear
back on your PR.
-->
",EBenkler,closed,2021-02-05 04:26:01,,2021-02-06 20:15:34,jklymak,2021-02-06 20:15:34,3,MEP: MEP22,,
801791901,Use absolute link for discourse,"
## PR Summary
Fix the link to discourse. Otherwise it ends up linking to https://matplotlib.org/devdocs/devel/discourse.matplotlib.org

See: https://matplotlib.org/devdocs/devel/index.html#

Follow up to https://github.com/matplotlib/matplotlib/pull/19344 so attn @timhoffm 
## PR Checklist

<!-- Please mark any checkboxes that do not apply to this PR as [N/A]. -->


- [ ] Is [Flake 8](https://flake8.pycqa.org/en/latest/) compliant (run `flake8` on changed files to check).
- [ ] Documentation is sphinx and numpydoc compliant (the docs should [build](https://matplotlib.org/devel/documenting_mpl.html#building-the-docs) without error).


",ianhi,closed,2021-02-05 02:41:03,,2021-02-05 04:03:47,jklymak,2021-02-09 00:34:16,0,Documentation,v3.4.0,53
801677225,Doc implement reredirects,"## PR Summary

UPDATE:

This is  based off #19440 just because that is a good example where some existing files were deleted.

This now uses a vendored version https://github.com/anntzer/sphinx-redirectfrom @anntzer put together.  In #19440 `doc/api/backend_qt4agg_api.rst` was removed, and the info is now in `doc/api/backend_qt_api.rst` so `doc/api/backend_qt4agg_api.rst` now has a `redirect-from` directive:

```
.. redirect-from:: /api/backend_qt4agg_api
```

When the build is made this makes `build/html/backend_qt4agg_api.html` which has a refresh:

```html
<html>
  <head>
    <meta http-equiv=""refresh"" content=""0; url=backend_qt_api.html"">
    <link rel=""canonical"" href=""backend_qt_api.html"">
  </head>
</html>
```
so the old link still exists.  

(probably not super necessary for this example, but in general should be quite useful).  

I think there are in general some major disadvantages compared with the `reredirect` approach.  Namely that moving whole directories will require each file in the directory getting this directive to its new location.  OTOH, that is pretty easy to script up if someone needs to do a bulk move.  

- [ ] add instructions in documentation guide about how to do this

## PR Checklist

<!-- Please mark any checkboxes that do not apply to this PR as [N/A]. -->

- [ ] Has pytest style unit tests (and `pytest` passes).
- [ ] Is [Flake 8](https://flake8.pycqa.org/en/latest/) compliant (run `flake8` on changed files to check).
- [ ] New features are documented, with examples if plot related.
- [ ] Documentation is sphinx and numpydoc compliant (the docs should [build](https://matplotlib.org/devel/documenting_mpl.html#building-the-docs) without error).
- [ ] Conforms to Matplotlib style conventions (install `flake8-docstrings` and run `flake8 --docstring-convention=all`).
- [ ] New features have an entry in `doc/users/next_whats_new/` (follow instructions in README.rst there).
- [ ] API changes documented in `doc/api/next_api_changes/` (follow instructions in README.rst there).

<!--
Thank you so much for your PR!  To help us review your contribution, please
consider the following points:

- A development guide is available at https://matplotlib.org/devdocs/devel/index.html.

- Help with git and github is available at
  https://matplotlib.org/devel/gitwash/development_workflow.html.

- Do not create the PR out of master, but out of a separate branch.

- The PR title should summarize the changes, for example ""Raise ValueError on
  non-numeric input to set_xlim"".  Avoid non-descriptive titles such as
  ""Addresses issue #8576"".

- The summary should provide at least 1-2 sentences describing the pull request
  in detail (Why is this change required?  What problem does it solve?) and
  link to any relevant issues.

- If you are contributing fixes to docstrings, please pay attention to
  http://matplotlib.org/devel/documenting_mpl.html#formatting.  In particular,
  note the difference between using single backquotes, double backquotes, and
  asterisks in the markup.

We understand that PRs can sometimes be overwhelming, especially as the
reviews start coming in.  Please let us know if the reviews are unclear or
the recommended next step seems overly demanding, if you would like help in
addressing a reviewer's comments, or if you have been waiting too long to hear
back on your PR.
-->
",jklymak,closed,2021-02-04 22:17:03,,2021-02-25 20:06:20,anntzer,2021-02-25 20:06:20,20,Documentation,v3.4.0,53
801650004,Add note that pyplot cannot be used for 3D.,"Closes #19446.

Also:
- remove the table of contents on that page. It's still available in
  the side bar and removing reduces the clutter in the main body.
- slightly reword the note on maturity of 3D plotting (nobody needs to
  know that this was improved for 1.1.0)


",timhoffm,closed,2021-02-04 21:30:45,,2021-02-05 05:02:45,QuLogic,2021-02-05 07:39:33,1,"Documentation, topic: mplot3d",v3.4.0,53
801502626,I cannot import matplotlib.pyplot as plt,"**AttributeError: module 'sip' has no attribute 'setapi'**

Error appears for this one line code ```import matplotlib.pyplot as plt```

**Actual outcome**
```
Traceback (most recent call last):
  File ""e:\GoogleDriveBB\Program\bb_git_repo\test.py"", line 5, in <module>
    import matplotlib.pyplot as plt
  File ""C:\ProgramData\Anaconda3\envs\mne\lib\site-packages\matplotlib\pyplot.py"", line 2336, in <module>
    switch_backend(rcParams[""backend""])
  File ""C:\ProgramData\Anaconda3\envs\mne\lib\site-packages\matplotlib\__init__.py"", line 703, in __getitem__
    plt.switch_backend(rcsetup._auto_backend_sentinel)
  File ""C:\ProgramData\Anaconda3\envs\mne\lib\site-packages\matplotlib\pyplot.py"", line 256, in switch_backend
    switch_backend(candidate)
  File ""C:\ProgramData\Anaconda3\envs\mne\lib\site-packages\matplotlib\pyplot.py"", line 276, in switch_backend
    class backend_mod(matplotlib.backend_bases._Backend):
  File ""C:\ProgramData\Anaconda3\envs\mne\lib\site-packages\matplotlib\pyplot.py"", line 277, in backend_mod
    locals().update(vars(importlib.import_module(backend_name)))
  File ""C:\ProgramData\Anaconda3\envs\mne\lib\importlib\__init__.py"", line 127, in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
  File ""C:\ProgramData\Anaconda3\envs\mne\lib\site-packages\matplotlib\backends\backend_qt5agg.py"", line 11, in <module>
    from .backend_qt5 import (
  File ""C:\ProgramData\Anaconda3\envs\mne\lib\site-packages\matplotlib\backends\backend_qt5.py"", line 16, in <module>
    import matplotlib.backends.qt_editor.figureoptions as figureoptions
  File ""C:\ProgramData\Anaconda3\envs\mne\lib\site-packages\matplotlib\backends\qt_editor\figureoptions.py"", line 11, in <module>
    from matplotlib.backends.qt_compat import QtGui
  File ""C:\ProgramData\Anaconda3\envs\mne\lib\site-packages\matplotlib\backends\qt_compat.py"", line 172, in <module>
    _setup()
  File ""C:\ProgramData\Anaconda3\envs\mne\lib\site-packages\matplotlib\backends\qt_compat.py"", line 132, in _setup_pyqt4
    _setup_pyqt4_internal(api=2)
  File ""C:\ProgramData\Anaconda3\envs\mne\lib\site-packages\matplotlib\backends\qt_compat.py"", line 115, in _setup_pyqt4_internal
    sip.setapi(_sip_api, api)
AttributeError: module 'sip' has no attribute 'setapi'
```

**Matplotlib version**
<!--Please specify your platform and versions of the relevant libraries you are using:-->
  * Operating system: Windows 10
  * Matplotlib version (`import matplotlib; print(matplotlib.__version__)`): 3.3.4
  * Matplotlib backend (`print(matplotlib.get_backend())`): not readable, this also produces the same error as above
  * Python version: 3.8.6
  * Jupyter version (if applicable): 1.0.0
  * Other libraries: 
 ```
# Name                    Version                   Build  Channel
appdirs                   1.4.4              pyh9f0ad1d_0    conda-forge
apptools                  5.1.0              pyh44b312d_0    conda-forge
argon2-cffi               20.1.0           py38h294d835_2    conda-forge
async_generator           1.10                       py_0    conda-forge
attrs                     20.3.0             pyhd3deb0d_0    conda-forge
backcall                  0.2.0              pyh9f0ad1d_0    conda-forge
backports                 1.0                        py_2    conda-forge
backports.functools_lru_cache 1.6.1                      py_0    conda-forge
bleach                    3.3.0              pyh44b312d_0    conda-forge
blosc                     1.21.0               h0e60522_0    conda-forge
brotli                    1.0.9                h0e60522_4    conda-forge
brotlipy                  0.7.0           py38h294d835_1001    conda-forge
bzip2                     1.0.8                h8ffe710_4    conda-forge
ca-certificates           2021.1.19            haa95532_0
cached-property           1.5.1                      py_0    conda-forge
certifi                   2020.12.5        py38haa95532_0
cffi                      1.14.4           py38hd8c33c5_1    conda-forge
cftime                    1.4.1            py38h347fdf6_0    conda-forge
chardet                   4.0.0            py38haa244fe_1    conda-forge
charls                    2.2.0                h39d44d4_0    conda-forge
cloudpickle               1.6.0                      py_0    conda-forge
colorama                  0.4.4              pyh9f0ad1d_0    conda-forge
configobj                 5.0.6                      py_0    conda-forge
cryptography              3.3.1            py38hd8c33c5_1    conda-forge
curl                      7.71.1               h4b64cdc_8    conda-forge
cvxpy                     1.1.7            py38haa244fe_1    conda-forge
cvxpy-base                1.1.7            py38h4c96930_1    conda-forge
cycler                    0.10.0                     py_2    conda-forge
cytoolz                   0.11.0           py38h294d835_3    conda-forge
dask-core                 2021.1.1           pyhd8ed1ab_0    conda-forge
decorator                 4.4.2                      py_0    conda-forge
defusedxml                0.6.0                      py_0    conda-forge
dipy                      1.3.0            py38hbc2243c_1    conda-forge
double-conversion         3.1.5                h6538335_2    conda-forge
ecos                      2.0.7.post1      py38h347fdf6_4    conda-forge
eigen                     3.3.9                h2d74725_1    conda-forge
entrypoints               0.3             pyhd8ed1ab_1003    conda-forge
envisage                  4.9.2              pyh9f0ad1d_1    conda-forge
expat                     2.2.10               h39d44d4_0    conda-forge
ffmpeg                    4.3.1                ha925a31_0    conda-forge
freetype                  2.10.4               h546665d_1    conda-forge
giflib                    5.2.1                h8d14728_2    conda-forge
gl2ps                     1.4.2                h0597ee9_0    conda-forge
glew                      2.1.0                h39d44d4_2    conda-forge
h5py                      3.1.0           nompi_py38h022eade_100    conda-forge
hdf4                      4.2.13            h0e5069d_1004    conda-forge
hdf5                      1.10.6          nompi_h5268f04_1114    conda-forge
icu                       68.1                 h0e60522_0    conda-forge
idna                      2.10               pyh9f0ad1d_0    conda-forge
imagecodecs               2021.1.11        py38h1ceb79b_1    conda-forge
imageio                   2.9.0                      py_0    conda-forge
imageio-ffmpeg            0.4.3              pyhd8ed1ab_0    conda-forge
importlib-metadata        3.4.0            py38haa244fe_0    conda-forge
importlib_metadata        3.4.0                hd8ed1ab_0    conda-forge
intel-openmp              2020.3             h57928b3_311    conda-forge
ipykernel                 5.3.4            py38h5ca1d4c_0
ipython                   7.20.0           py38hc5df569_1    conda-forge
ipython_genutils          0.2.0                      py_1    conda-forge
ipywidgets                7.6.3              pyhd3deb0d_0    conda-forge
jedi                      0.18.0           py38haa244fe_2    conda-forge
jinja2                    2.11.3             pyh44b312d_0    conda-forge
joblib                    1.0.0              pyhd8ed1ab_0    conda-forge
jpeg                      9d                   h8ffe710_0    conda-forge
jsoncpp                   1.9.4                h2d74725_1    conda-forge
jsonschema                3.2.0                      py_2    conda-forge
jupyter                   1.0.0            py38haa244fe_6    conda-forge
jupyter_client            6.1.11             pyhd8ed1ab_1    conda-forge
jupyter_console           6.2.0                      py_0    conda-forge
jupyter_core              4.7.1            py38haa244fe_0    conda-forge
jupyterlab_pygments       0.1.2              pyh9f0ad1d_0    conda-forge
jupyterlab_widgets        1.0.0              pyhd8ed1ab_1    conda-forge
jxrlib                    1.1                  h8ffe710_2    conda-forge
kiwisolver                1.3.1            py38hbd9d945_1    conda-forge
krb5                      1.17.2               hbae68bd_0    conda-forge
lcms2                     2.11                 h6a326e1_1    conda-forge
lerc                      2.2.1                h0e60522_0    conda-forge
libaec                    1.0.4                h39d44d4_1    conda-forge
libblas                   3.9.0                     7_mkl    conda-forge
libcblas                  3.9.0                     7_mkl    conda-forge
libclang                  11.0.1          default_h5c34c98_1    conda-forge
libcurl                   7.71.1               h4b64cdc_8    conda-forge
libdeflate                1.7                  h8ffe710_5    conda-forge
libflang                  5.0.0           h6538335_20180525    conda-forge
libiconv                  1.16                 he774522_0    conda-forge
liblapack                 3.9.0                     7_mkl    conda-forge
libnetcdf                 4.7.4           nompi_h3a9aa94_107    conda-forge
libogg                    1.3.4                h8ffe710_1    conda-forge
libpng                    1.6.37               h1d00b33_2    conda-forge
libsodium                 1.0.18               h8d14728_1    conda-forge
libssh2                   1.9.0                hb06d900_5    conda-forge
libtheora                 1.1.1             h62dcd97_1004    conda-forge
libtiff                   4.2.0                hc10be44_0    conda-forge
libwebp-base              1.2.0                h8ffe710_0    conda-forge
libxml2                   2.9.10               hf5bbc77_3    conda-forge
libzopfli                 1.0.3                h0e60522_0    conda-forge
llvm-meta                 5.0.0                         0    conda-forge
llvmlite                  0.35.0           py38h57a6900_1    conda-forge
loguru                    0.5.3            py38h32f6830_2    conda-forge
lz4-c                     1.9.3                h8ffe710_0    conda-forge
m2w64-gcc-libgfortran     5.3.0                         6    conda-forge
m2w64-gcc-libs            5.3.0                         7    conda-forge
m2w64-gcc-libs-core       5.3.0                         7    conda-forge
m2w64-gmp                 6.1.0                         2    conda-forge
m2w64-libwinpthread-git   5.0.0.4634.697f757               2    conda-forge
markupsafe                1.1.1            py38h294d835_3    conda-forge
matplotlib                3.3.4            py38haa244fe_0    conda-forge
matplotlib-base           3.3.4            py38h34ddff4_0    conda-forge
mayavi                    4.7.2            py38h8d3ad35_4    conda-forge
meshio                    4.3.8              pyhd8ed1ab_0    conda-forge
mffpy                     0.6.0              pyhd8ed1ab_0    conda-forge
mistune                   0.8.4           py38h294d835_1003    conda-forge
mkl                       2020.4             hb70f87d_311    conda-forge
mne                       0.22.0             pyhd8ed1ab_2    conda-forge
mock                      4.0.3            py38haa244fe_1    conda-forge
msys2-conda-epoch         20160418                      1    conda-forge
nbclient                  0.5.1                      py_0    conda-forge
nbconvert                 6.0.7            py38haa244fe_3    conda-forge
nbformat                  5.1.2              pyhd8ed1ab_1    conda-forge
nest-asyncio              1.4.3              pyhd8ed1ab_0    conda-forge
netcdf4                   1.5.5.1         nompi_py38h5338a22_101    conda-forge
networkx                  2.5                        py_0    conda-forge
nibabel                   3.2.1              pyhd8ed1ab_0    conda-forge
nilearn                   0.7.0              pyhd8ed1ab_0    conda-forge
notebook                  6.2.0            py38haa244fe_0    conda-forge
numba                     0.52.0           py38h4c96930_0    conda-forge
numexpr                   2.7.2            py38h4c96930_0    conda-forge
numpy                     1.20.0           py38h0cc643e_0    conda-forge
olefile                   0.46               pyh9f0ad1d_1    conda-forge
openjpeg                  2.4.0                h48faf41_0    conda-forge
openmp                    5.0.0                    vc14_1    conda-forge
openssl                   1.1.1i               h2bbff1b_0
osqp                      0.6.2            py38h4c96930_1    conda-forge
packaging                 20.8               pyhd3deb0d_0    conda-forge
pandas                    1.2.1            py38h4c96930_0    conda-forge
pandoc                    2.11.4               h8ffe710_0    conda-forge
pandocfilters             1.4.2                      py_1    conda-forge
parso                     0.8.1              pyhd8ed1ab_0    conda-forge
patsy                     0.5.1                      py_0    conda-forge
pickleshare               0.7.5                   py_1003    conda-forge
pillow                    8.1.0            py38hf7ce48b_1    conda-forge
pip                       21.0.1             pyhd8ed1ab_0    conda-forge
pooch                     1.3.0              pyhd8ed1ab_0    conda-forge
proj                      7.2.0                h3e70539_1    conda-forge
prometheus_client         0.9.0              pyhd3deb0d_0    conda-forge
prompt-toolkit            3.0.14             pyha770c72_0    conda-forge
prompt_toolkit            3.0.14               hd8ed1ab_0    conda-forge
psutil                    5.8.0            py38h294d835_1    conda-forge
pugixml                   1.11.4               h0e60522_0    conda-forge
pycparser                 2.20               pyh9f0ad1d_2    conda-forge
pydicom                   2.1.2              pyhd3deb0d_0    conda-forge
pyedflib                  0.1.20                   pypi_0    pypi
pyface                    7.1.0              pyh9f0ad1d_0    conda-forge
pygments                  2.7.4              pyhd8ed1ab_0    conda-forge
pyopenssl                 20.0.1             pyhd8ed1ab_0    conda-forge
pyparsing                 2.4.7              pyh9f0ad1d_0    conda-forge
pyqt                      5.12.3           py38haa244fe_7    conda-forge
pyqt-impl                 5.12.3           py38h885f38d_7    conda-forge
pyqt5-sip                 4.19.18          py38h885f38d_7    conda-forge
pyqtchart                 5.12             py38h885f38d_7    conda-forge
pyqtwebengine             5.12.1           py38h885f38d_7    conda-forge
pyreadline                2.1             py38haa244fe_1003    conda-forge
pyrsistent                0.17.3           py38h294d835_2    conda-forge
pysocks                   1.7.1            py38haa244fe_3    conda-forge
pysurfer                  0.11.0                     py_0    conda-forge
pytables                  3.6.1            py38h153c448_3    conda-forge
python                    3.8.6           h7840368_5_cpython    conda-forge
python-dateutil           2.8.1                      py_0    conda-forge
python-picard             0.4                pyh5ca1d4c_1    conda-forge
python_abi                3.8                      1_cp38    conda-forge
pytz                      2021.1             pyhd8ed1ab_0    conda-forge
pyvista                   0.27.4             pyhd8ed1ab_0    conda-forge
pyvistaqt                 0.3.0              pyhd8ed1ab_0    conda-forge
pywavelets                1.1.1            py38h347fdf6_3    conda-forge
pywin32                   300              py38h294d835_0    conda-forge
pywinpty                  0.5.7            py38h32f6830_1    conda-forge
pyyaml                    5.4.1            py38h294d835_0    conda-forge
pyzmq                     22.0.1           py38h7a0e47e_0    conda-forge
qdldl-python              0.1.5            py38h4c96930_0    conda-forge
qt                        5.12.9               h5909a2a_3    conda-forge
qtconsole                 5.0.2              pyhd8ed1ab_0    conda-forge
qtpy                      1.9.0                      py_0    conda-forge
requests                  2.25.1             pyhd3deb0d_0    conda-forge
scikit-image              0.18.1           py38h4c96930_0    conda-forge
scikit-learn              0.24.1           py38ha09990b_0    conda-forge
scipy                     1.5.2                    pypi_0    pypi
scooby                    0.5.6              pyh9f0ad1d_0    conda-forge
scs                       2.1.2            py38h7465cd0_2    conda-forge
send2trash                1.5.0                      py_0    conda-forge
setuptools                49.6.0           py38haa244fe_3    conda-forge
six                       1.15.0             pyh9f0ad1d_0    conda-forge
snappy                    1.1.8                ha925a31_3    conda-forge
spyder-kernels            1.10.1           py38haa244fe_1    conda-forge
sqlite                    3.34.0               h8ffe710_0    conda-forge
statsmodels               0.12.2           py38h347fdf6_0    conda-forge
tbb                       2020.2               h2d74725_3    conda-forge
tbb-devel                 2020.2               h2d74725_3    conda-forge
terminado                 0.9.2            py38haa244fe_0    conda-forge
testpath                  0.4.4                      py_0    conda-forge
threadpoolctl             2.1.0              pyh5ca1d4c_0    conda-forge
tifffile                  2021.2.1           pyhd8ed1ab_0    conda-forge
tk                        8.6.10               h8ffe710_1    conda-forge
toolz                     0.11.1                     py_0    conda-forge
tornado                   6.1              py38h294d835_1    conda-forge
tqdm                      4.56.0             pyhd8ed1ab_0    conda-forge
traitlets                 5.0.5                      py_0    conda-forge
traits                    6.2.0            py38h294d835_0    conda-forge
traitsui                  7.1.0              pyh9f0ad1d_0    conda-forge
urllib3                   1.26.3             pyhd8ed1ab_0    conda-forge
utfcpp                    3.1.2                         0    conda-forge
vc                        14.2                 hb210afc_2    conda-forge
vs2015_runtime            14.28.29325          h5e1d092_0    conda-forge
vtk                       9.0.1           no_osmesa_py38h3499093_104    conda-forge
wcwidth                   0.2.5              pyh9f0ad1d_2    conda-forge
webencodings              0.5.1                      py_1    conda-forge
wheel                     0.36.2             pyhd3deb0d_0    conda-forge
widgetsnbextension        3.5.1            py38haa244fe_4    conda-forge
win32_setctime            1.0.3                      py_0    conda-forge
win_inet_pton             1.1.0            py38haa244fe_2    conda-forge
wincertstore              0.2             py38haa244fe_1006    conda-forge
winpty                    0.4.3                         4    conda-forge
xlrd                      2.0.1              pyhd8ed1ab_3    conda-forge
xz                        5.2.5                h62dcd97_1    conda-forge
yaml                      0.2.5                he774522_0    conda-forge
zeromq                    4.3.3                h0e60522_3    conda-forge
zfp                       0.5.5                h0e60522_4    conda-forge
zipp                      3.4.0                      py_0    conda-forge
zlib                      1.2.11            h62dcd97_1010    conda-forge
zstd                      1.4.8                h4e2f164_1    conda-forge
```

<!--I use Anaconda to manage my environments, so I installed them via conda. -->

",datalw,closed,2021-02-04 17:44:33,,2021-02-04 18:36:53,jklymak,2021-02-04 20:15:18,6,,,
801402155,Restrict input dataset by limit values,"<!--To help us understand and resolve your issue, please fill out the form to the best of your ability.-->
<!--You can feel free to delete the sections that do not apply.-->

### Bug report

**Bug summary**
I ran into an unusual problem when using the vector output of matplotlib (here PDFs) and upload it to a journal website (or import them in Mathematica, which I found out luckily in order to reproduce the problem locally). A problem, which primarily can be located in the importing programs, probably reveals another in matplotlib .

The whole input data is used when plotting, although limitations like `xlim` or `ylim` are set. Programs, that import figures not correctly, tend to degroup all elements in PDFs and suddenly the whole data set is in front of the figures facecolor.

My expectation would be that the figure limitations also result in limitation of the input data set for various reasons (e.g. optimizations, only drawing presented data points)

**Code for reproduction**
```python
from matplotlib import pyplot as plt
import numpy as np

fig = plt.figure(num=1, figsize=(10,8))
ax  = plt.subplot(111, polar=True)

r   = np.linspace(0, 3,       num=1000)
phi = np.linspace(0, 2*np.pi, num=1000)

rlim = 1

z = np.zeros((1000,1000))
for i in range(1000):
    for j in range(1000):
        z[i, j] = np.exp(-r[i]**2)

# Fix
# z = z[r <= rlim,:]
# r = r[r <= rlim]

ax.contourf(phi, r, z, cmap=plt.get_cmap(""coolwarm""))

ax.set_xlim([0, 2*np.pi])
ax.set_ylim([0, rlim])

fig.savefig('output.pdf', quality=100, dpi=600)
```

And in Mathematica (for reproduction)
```mathematica
Import[""output.pdf""]
```

**Actual outcome**
Please see the generated output in the list below. Files with cart are made with `polar=False`, files with mathematica in it are the results respectively imported in Mathematica.

- [output.pdf](https://github.com/matplotlib/matplotlib/files/5926699/output.pdf)
- [output-cart.pdf](https://github.com/matplotlib/matplotlib/files/5926700/output-cart.pdf)
- [output-cart-mathematica.pdf](https://github.com/matplotlib/matplotlib/files/5926701/output-cart-mathematica.pdf)
- [output-mathematica.pdf](https://github.com/matplotlib/matplotlib/files/5926702/output-mathematica.pdf)

<!--The output produced by the above code, which may be a screenshot, console output, etc.-->

**Expected outcome**
The files with mathematica in the filename should be the same as files without it.

**Matplotlib version**
<!--Please specify your platform and versions of the relevant libraries you are using:-->
  * Operating system: Windows 10 64-bit 1909
  * Matplotlib version (`import matplotlib; print(matplotlib.__version__)`): 3.3.3
  * Matplotlib backend (`print(matplotlib.get_backend())`): Qt5Agg
  * Python version: 3.7.9
  * Jupyter version (if applicable): -
  * Other libraries: numpy (1.19.3)

<!--Please tell us how you installed matplotlib and python e.g., from source, pip, conda-->
<!--If you installed from conda, please specify which channel you used if not the default-->
I installed matplotlib via the Windows Setup File of Spyder. Mathematica is in the version 12.0.0 (64-bit).",fwillo,open,2021-02-04 15:43:06,,,,2021-02-04 17:26:19,5,"backend/pdf, status: downstream fix required",,
801315111,Fix the docstring of draw_markers to match the actual behavior.,"Dropping curve control points is also consistent with the behavior of
the SVG marker-mid property.

Closes https://github.com/matplotlib/matplotlib/issues/8790 (based on the SVG spec, I decided to keep the actual behavior).

## PR Summary

## PR Checklist

<!-- Please mark any checkboxes that do not apply to this PR as [N/A]. -->

- [ ] Has pytest style unit tests (and `pytest` passes).
- [ ] Is [Flake 8](https://flake8.pycqa.org/en/latest/) compliant (run `flake8` on changed files to check).
- [ ] New features are documented, with examples if plot related.
- [ ] Documentation is sphinx and numpydoc compliant (the docs should [build](https://matplotlib.org/devel/documenting_mpl.html#building-the-docs) without error).
- [ ] Conforms to Matplotlib style conventions (install `flake8-docstrings` and run `flake8 --docstring-convention=all`).
- [ ] New features have an entry in `doc/users/next_whats_new/` (follow instructions in README.rst there).
- [ ] API changes documented in `doc/api/next_api_changes/` (follow instructions in README.rst there).

<!--
Thank you so much for your PR!  To help us review your contribution, please
consider the following points:

- A development guide is available at https://matplotlib.org/devdocs/devel/index.html.

- Help with git and github is available at
  https://matplotlib.org/devel/gitwash/development_workflow.html.

- Do not create the PR out of master, but out of a separate branch.

- The PR title should summarize the changes, for example ""Raise ValueError on
  non-numeric input to set_xlim"".  Avoid non-descriptive titles such as
  ""Addresses issue #8576"".

- The summary should provide at least 1-2 sentences describing the pull request
  in detail (Why is this change required?  What problem does it solve?) and
  link to any relevant issues.

- If you are contributing fixes to docstrings, please pay attention to
  http://matplotlib.org/devel/documenting_mpl.html#formatting.  In particular,
  note the difference between using single backquotes, double backquotes, and
  asterisks in the markup.

We understand that PRs can sometimes be overwhelming, especially as the
reviews start coming in.  Please let us know if the reviews are unclear or
the recommended next step seems overly demanding, if you would like help in
addressing a reviewer's comments, or if you have been waiting too long to hear
back on your PR.
-->
",anntzer,closed,2021-02-04 14:07:06,,2021-02-04 21:45:34,timhoffm,2021-02-04 21:55:39,0,Documentation,v3.4.0,53
801306125,Epoch issue with version 3.3.4,"<!--To help us understand and resolve your issue, please fill out the form to the best of your ability.-->
<!--You can feel free to delete the sections that do not apply.-->

### Bug report


**Bug summary**

<!--A short 1-2 sentences that succinctly describes the bug-->

Using `plot_date` on the axis the year/epoch labels gets screwed up. I see there has been similar issues in the past and also with Pandas, but the below code is confined to matplotlib.

Same code works in older version, see below.


**Code for reproduction**

```
import matplotlib.pyplot as plt
from datetime import datetime, timedelta

dtobj = datetime(2020, 7, 1)
endtime = datetime(2020, 12, 31)
delta_t = timedelta(days=1)

dtl = []
while dtobj < endtime:
    dtl.append(dtobj.toordinal())
    dtobj = dtobj + delta_t

fig = plt.figure(figsize=(9, 7))
ax = fig.add_subplot(111)
ax.plot_date(dtl, range(len(dtl)), '-')
ax.autoscale_view()
fig.autofmt_xdate()
plt.show()
```


<!--A minimum code snippet required to reproduce the bug.
Please make sure to minimize the number of dependencies required, and provide
any necessary plotted data.
Avoid using threads, as Matplotlib is (explicitly) not thread-safe.-->


**Actual outcome**

![mpl_epoch_issue_v334](https://user-images.githubusercontent.com/169069/106901874-82f5c700-66f8-11eb-9b21-65d1b3586b19.png)

<!--The output produced by the above code, which may be a screenshot, console output, etc.-->

```
# If applicable, paste the console output here
#
#
```

**Expected outcome**

Here the corresponding output with matplotlib version 3.2.2:

![mpl_epoch_issue_v322](https://user-images.githubusercontent.com/169069/106902622-53938a00-66f9-11eb-8bcf-ea52d886ba50.png)


<!--A description of the expected outcome from the code snippet-->
<!--If this used to work in an earlier version of Matplotlib, please note the version it used to work on-->

**Matplotlib version**

Conda environment:
3.3.4-py38h578d9bd_0 (Python 3.8)


<!--Please specify your platform and versions of the relevant libraries you are using:-->
  * Operating system: Linux RHEL 8
  * Matplotlib version (`import matplotlib; print(matplotlib.__version__)`):  3.3.4
  * Matplotlib backend (`print(matplotlib.get_backend())`): Qt5Agg
  * Python version: 3.8
  * Jupyter version (if applicable): 
  * Other libraries: 

<!--Please tell us how you installed matplotlib and python e.g., from source, pip, conda-->
<!--If you installed from conda, please specify which channel you used if not the default-->

",adybbroe,closed,2021-02-04 13:56:42,,2021-02-04 15:13:46,jklymak,2021-02-05 16:26:18,4,"Community support, topic: date handling",,
801203624,sphinxsidebar text overflow,"### Describe the issue

**Summary**
The `sphinxsidebar` in some pages lets the text overflow, ref:
https://matplotlib.org/3.1.1/api/_as_gen/matplotlib.pyplot.tight_layout.html
![image](https://user-images.githubusercontent.com/43996118/106022875-4ae4f780-60ec-11eb-9a81-51e06535bede.png)

### Proposed fix
> @brunobeltran: adding overflow_wrap to the appropriate element in the custom mpl css (https://developer.mozilla.org/en-US/docs/Web/CSS/overflow-wrap)
if we increase sidebar width, I assume it would have to be responsive, and that's a pretty big rabbit-hole to go down. on the other hand specifying overflow-wrap would probably be an immediate improvement (and we would probably want it to be set regardless of if we eventually increase the width)

/cc @timhoffm 

(issue moved from https://github.com/matplotlib/matplotlib.github.com/issues/52 to here)

",aitikgupta,open,2021-02-04 11:40:00,,,,2021-02-06 10:09:22,5,Maintenance,,
801146597,"Switch array-like (M, N) to (M, N) array-like.","Also use ""array"" instead of ""array-like"" for return types if
appropriate.  Some instances were left unchanged as they may need more
editing anyways.

See discussion at https://github.com/matplotlib/matplotlib/issues/16161#issuecomment-772922194.

## PR Summary

## PR Checklist

<!-- Please mark any checkboxes that do not apply to this PR as [N/A]. -->

- [ ] Has pytest style unit tests (and `pytest` passes).
- [ ] Is [Flake 8](https://flake8.pycqa.org/en/latest/) compliant (run `flake8` on changed files to check).
- [ ] New features are documented, with examples if plot related.
- [ ] Documentation is sphinx and numpydoc compliant (the docs should [build](https://matplotlib.org/devel/documenting_mpl.html#building-the-docs) without error).
- [ ] Conforms to Matplotlib style conventions (install `flake8-docstrings` and run `flake8 --docstring-convention=all`).
- [ ] New features have an entry in `doc/users/next_whats_new/` (follow instructions in README.rst there).
- [ ] API changes documented in `doc/api/next_api_changes/` (follow instructions in README.rst there).

<!--
Thank you so much for your PR!  To help us review your contribution, please
consider the following points:

- A development guide is available at https://matplotlib.org/devdocs/devel/index.html.

- Help with git and github is available at
  https://matplotlib.org/devel/gitwash/development_workflow.html.

- Do not create the PR out of master, but out of a separate branch.

- The PR title should summarize the changes, for example ""Raise ValueError on
  non-numeric input to set_xlim"".  Avoid non-descriptive titles such as
  ""Addresses issue #8576"".

- The summary should provide at least 1-2 sentences describing the pull request
  in detail (Why is this change required?  What problem does it solve?) and
  link to any relevant issues.

- If you are contributing fixes to docstrings, please pay attention to
  http://matplotlib.org/devel/documenting_mpl.html#formatting.  In particular,
  note the difference between using single backquotes, double backquotes, and
  asterisks in the markup.

We understand that PRs can sometimes be overwhelming, especially as the
reviews start coming in.  Please let us know if the reviews are unclear or
the recommended next step seems overly demanding, if you would like help in
addressing a reviewer's comments, or if you have been waiting too long to hear
back on your PR.
-->
",anntzer,closed,2021-02-04 10:27:56,,2021-02-06 13:59:19,timhoffm,2021-02-06 14:00:52,0,Documentation,v3.4.0,53
801028595,Remove unnecessary facecolor cache in Patch3D.,"## PR Summary

It simply copies the value from the 2D version to `self._facecolor3d`, and then later to `self._facecolor2d`, but never does anything to require these additional copies.

Fixes #18815.

## PR Checklist

- [x] Has pytest style unit tests (and `pytest` passes).
- [x] Is [Flake 8](https://flake8.pycqa.org/en/latest/) compliant (run `flake8` on changed files to check).
- [n/a] New features are documented, with examples if plot related.
- [n/a] Documentation is sphinx and numpydoc compliant (the docs should [build](https://matplotlib.org/devel/documenting_mpl.html#building-the-docs) without error).
- [x] Conforms to Matplotlib style conventions (install `flake8-docstrings` and run `flake8 --docstring-convention=all`).
- [n/a] New features have an entry in `doc/users/next_whats_new/` (follow instructions in README.rst there).
- [n/a] API changes documented in `doc/api/next_api_changes/` (follow instructions in README.rst there).",QuLogic,closed,2021-02-04 07:54:32,,2021-02-04 21:42:03,timhoffm,2021-02-04 21:46:31,0,topic: mplot3d,v3.4.0,53
800577428,"nbagg backend ""Stop Interaction"" Feature not working if inside ipywidgets.Output()","### Bug report

**Bug summary**

Using the nbagg backend with matplotlib in a jupyter notebook and plotting the figure inside a `ipywidgets.Output()` widget breaks the functionality of the ""Stop Interaction"" button. If pressed, nothing happens.

**Code for reproduction**

Use inside a jupyter notebook.

```python
import ipywidgets as widgets
import matplotlib.pyplot as plt

%matplotlib notebook
# or %matplotlib nbagg

o = widgets.Output()
display(o)
with o:
    plt.plot(range(10), range(10))
    plt.show()
```

**Actual outcome**
Red circle added on the button for emphasis.
![Untitled](https://user-images.githubusercontent.com/59456929/106790033-4b810f00-6653-11eb-9f24-09be76ea250b.png)


**Expected outcome**

![image](https://user-images.githubusercontent.com/59456929/106790116-63589300-6653-11eb-97b1-e81bce1958d6.png)


**Matplotlib version**

  * Operating system:  Linux 5.10.11-arch1-1
  * Matplotlib version: 3.3.4 
  * Matplotlib backend: nbagg
  * Python version: 3.9.1
  * Jupyter version: 
    - jupyter core     : 4.6.3
    - jupyter-notebook : 6.2.0
    - qtconsole        : not installed
    - ipython          : 7.19.0
    - ipykernel        : 5.4.2
    - jupyter client   : 6.1.7
    - jupyter lab      : not installed
    - nbconvert        : 6.0.7
    - ipywidgets       : 7.6.2
    - nbformat         : 5.0.8
    - traitlets        : 5.0.5

All Python related packages installed via pip.
",yumasheta,closed,2021-02-03 18:15:55,,2021-02-04 00:03:31,QuLogic,2021-02-04 01:31:05,2,"GUI/nbagg, status: duplicate, third-party integration: jupyter",,
800514346,Better document and error handle third dimension in pyplot.text() positional argument,"<!--To help us understand and resolve your issue, please fill out the form to the best of your ability.-->
<!--You can feel free to delete the sections that do not apply.-->

### Problem

<!--
If you are referencing an existing piece of documentation or example please provide a link.

* I found [...] to be unclear because [...]
* [...] made me think that [...] when really it should be [...]
* There is no example showing how to do [...]
-->

The [documentation ](https://matplotlib.org/3.1.1/api/_as_gen/matplotlib.pyplot.text.html) for pyplot.text() does not specifically mention how to use in 3d projection plots (it only says two positional arguments are accepted). 

``matplotlib.pyplot.text(x, y, s, fontdict=None, withdash=<deprecated parameter>, **kwargs)``

Additionally, the error thrown if a third dimension is not included is incorrect. For example:

```python
import matplotlib.pyplot as plt

fig = plt.figure(constrained_layout=True, figsize = [11, 8])
gs = fig.add_gridspec(2, 2)
ax = fig.add_subplot(gs[0, 1], projection='3d')
ax.text(0.0,20,""test"", size=12)
```

gives the error: 
`` TypeError: text() missing 1 required positional argument: 's' `` 

when, in fact, the error is the missing ``z`` position argument.

### Suggested Improvement

<!--
If you have an idea to improve the documentation please suggest it here

* This line should be be changed to say [...]
* Include a paragraph explaining [...]
* Add a figure showing [...]
-->

The documentation could be improved to show that ``z`` can (and should) be used in 3d projections. Additionally, the error should be updated to reflect the actual issue (a missing third positional argument).

**Matplotlib version**
<!--Please specify the version of matplotlib and the version of the documentation that you are using:-->
  * Operating system: Windows 10
  * Matplotlib version: 3.3.2
  * Matplotlib documentation version: 3.1.2",Caseyb87,closed,2021-02-03 16:55:33,,2021-02-05 05:02:45,QuLogic,2021-02-05 05:03:13,6,"Documentation, topic: mplot3d",v3.4.0,53
800506710,axline transform support broke axline in loglog scale,"<!--To help us understand and resolve your issue, please fill out the form to the best of your ability.-->
<!--You can feel free to delete the sections that do not apply.-->

### Bug report

**Bug summary**

https://github.com/matplotlib/matplotlib/pull/18647 broke loglog scale axlines.

**Code for reproduction**

<!--A minimum code snippet required to reproduce the bug.
Please make sure to minimize the number of dependencies required, and provide
any necessary plotted data.
Avoid using threads, as Matplotlib is (explicitly) not thread-safe.-->

```python
loglog([.3, .6], [.3, .6], "".-""); axline((1, 1e-3), (10, 1e-2), c=""k"")
```

**Actual outcome**

![new](https://user-images.githubusercontent.com/1322974/106779717-8f6e1700-6647-11eb-9234-caddf2f69a13.png)
one can zoom out a bit and get
![zoomedout](https://user-images.githubusercontent.com/1322974/106779737-95fc8e80-6647-11eb-98d6-5c13916a6b41.png)

**Expected outcome**

What we had before #18647:
![old](https://user-images.githubusercontent.com/1322974/106779792-a0b72380-6647-11eb-9791-02c68dac9e1c.png)

**Matplotlib version**
<!--Please specify your platform and versions of the relevant libraries you are using:-->
  * Operating system: linux
  * Matplotlib version (`import matplotlib; print(matplotlib.__version__)`): head
  * Matplotlib backend (`print(matplotlib.get_backend())`): mplcairo
  * Python version: 39

Release critical, as it's a regression in 3.4 against 3.3.

",anntzer,closed,2021-02-03 16:46:32,,2021-02-10 09:17:38,QuLogic,2021-02-10 09:17:38,2,Release critical,v3.4.0,53
800295412,"fill_between,  step='post' and NaN","Off-by-one error if using `fill_between`, `step='post'`

<!--A minimum code snippet required to reproduce the bug.
Please make sure to minimize the number of dependencies required, and provide
any necessary plotted data.
Avoid using threads, as Matplotlib is (explicitly) not thread-safe.-->

```python
import matplotlib.pyplot as plt
import pandas as pd

fig = plt.figure(1)
ax = fig.add_subplot(111)

df = pd.DataFrame(index=pd.date_range(start='2000-01-01', periods=10, freq='1D'))
df['data'] = [1,2,3,-4,-5,-6,7,8,9,-10]

df.plot(ax=ax, drawstyle='steps-post')
ax.fill_between(df[df > 0].index, df[df > 0].values.flatten(), step='post')
```

**Actual outcome**

![image](https://user-images.githubusercontent.com/145117/106748570-46cc4480-65da-11eb-8e38-83e2d4e02fc2.png)


**Expected outcome**

Some of the `df[df > 0]` columns are not filled.

**Matplotlib version**
<!--Please specify your platform and versions of the relevant libraries you are using:-->
  * Operating system:  Linux Kubuntu 20.04
  * Matplotlib version (`import matplotlib; print(matplotlib.__version__)`): 3.3.1
  * Matplotlib backend (`print(matplotlib.get_backend())`): Qt5Agg
  * Python version: 3.8.5
  * Jupyter version (if applicable): IPython 7.17.0
",mankoff,open,2021-02-03 12:45:13,,,,2021-02-08 12:44:18,4,,,
799916941,Bug in Rendering Navigation Toolbar in tkinter on MacOS [MPL 3.3.4],"<!--To help us understand and resolve your issue, please fill out the form to the best of your ability.-->
<!--You can feel free to delete the sections that do not apply.-->

### Bug report

Rendering of the navigation toolbar within a tkinter gui exhibits considerable flickering. This is especially pronounced when the x/y coordinates are tracked.

<!--A short 1-2 sentences that succinctly describes the bug-->

**Code for reproduction**

<!--A minimum code snippet required to reproduce the bug.
Please make sure to minimize the number of dependencies required, and provide
any necessary plotted data.
Avoid using threads, as Matplotlib is (explicitly) not thread-safe.-->

```python
#! /usr/bin/env python3
# -*- coding: utf-8 -*-

import matplotlib
matplotlib.use('TkAgg')
from matplotlib.backends.backend_tkagg import (FigureCanvasTkAgg, NavigationToolbar2Tk)
from matplotlib.figure import Figure
import tkinter as tk
from tkinter import ttk


class Application(tk.Frame):

    def __init__(self, master=None):

        tk.Frame.__init__(self, master)
        self.data_set = []
        self.init_ui()
        self.widget = None

    def init_ui(self):
        self.grid(row=0, column=0)

        # Draw a blank plot as a part of setting up the UI.
        plt = Figure(figsize=(6, 4), dpi=100)
        ax = plt.add_subplot(111)
        ax.plot(0, 0)

        # Add plot to window
        canvas = FigureCanvasTkAgg(plt, master=self)
        self.widget = canvas.get_tk_widget()
        self.widget.grid(row=1, column=0, columnspan=3)

        # Add toolbar to window
        toolbar_frame = tk.Frame(master=root)
        toolbar_frame.grid(row=1, column=0)
        toolbar = NavigationToolbar2Tk(canvas, toolbar_frame)
        toolbar.pack(side=tk.TOP, fill=tk.BOTH, expand=1)

# =====================================================================
root = tk.Tk()

app = Application(master=root)
app.mainloop()
```

**Matplotlib version**
<!--Please specify your platform and versions of the relevant libraries you are using:-->
  * Operating system: Mac OS 10.15.7
  * Matplotlib version: 3.3.4
  * Matplotlib backend: tkagg, tkcairo, macosx all display the issue.
  * Python version: 3.8.6
  * Other libraries: tkinter

<!--Please tell us how you installed matplotlib and python e.g., from source, pip, conda-->
<!--If you installed from conda, please specify which channel you used if not the default-->

* Matplotlib was installed within a virtual environment using pip.
* Note that when the code is adjusted to run under Matplotlib 1.3.1 under Python 2.7, the toolbar renders perfectly.
* When the toolbar is rendered with a `.show()` call, it does not flicker.
* Calling `init_ui()` from within or outside the Application class doesn't make a difference.
* Packing or gridding the toolbar doesn't seem to make a difference.",DaveL17,open,2021-02-03 02:55:55,,,,2021-02-03 02:55:55,0,,,
799910167,.whl import libpng = 1.6.21,"matplotlib == 3.2.0 ,libpng = 1.6.21

libpng has some unclear pointer arithmetic problems.

- CVE-2018-13785
- CVE-2018-14550
- CVE-2016-10087
- CVE-2017-12652
- CVE-2019-7317",lh-yw,closed,2021-02-03 02:38:11,,2021-02-03 08:57:30,QuLogic,2021-02-03 08:57:30,3,"Community support, status: needs clarification",,
799759310,Make backend_gtk3foo importable on headless environments.,"This should ultimately make it easier to generate apidocs on CI.

The change in value of `cursord` only happens on headless envs, where
the module was not importable at all before, so that's not an API break.

## PR Summary

## PR Checklist

<!-- Please mark any checkboxes that do not apply to this PR as [N/A]. -->

- [ ] Has pytest style unit tests (and `pytest` passes).
- [ ] Is [Flake 8](https://flake8.pycqa.org/en/latest/) compliant (run `flake8` on changed files to check).
- [ ] New features are documented, with examples if plot related.
- [ ] Documentation is sphinx and numpydoc compliant (the docs should [build](https://matplotlib.org/devel/documenting_mpl.html#building-the-docs) without error).
- [ ] Conforms to Matplotlib style conventions (install `flake8-docstrings` and run `flake8 --docstring-convention=all`).
- [ ] New features have an entry in `doc/users/next_whats_new/` (follow instructions in README.rst there).
- [ ] API changes documented in `doc/api/next_api_changes/` (follow instructions in README.rst there).

<!--
Thank you so much for your PR!  To help us review your contribution, please
consider the following points:

- A development guide is available at https://matplotlib.org/devdocs/devel/index.html.

- Help with git and github is available at
  https://matplotlib.org/devel/gitwash/development_workflow.html.

- Do not create the PR out of master, but out of a separate branch.

- The PR title should summarize the changes, for example ""Raise ValueError on
  non-numeric input to set_xlim"".  Avoid non-descriptive titles such as
  ""Addresses issue #8576"".

- The summary should provide at least 1-2 sentences describing the pull request
  in detail (Why is this change required?  What problem does it solve?) and
  link to any relevant issues.

- If you are contributing fixes to docstrings, please pay attention to
  http://matplotlib.org/devel/documenting_mpl.html#formatting.  In particular,
  note the difference between using single backquotes, double backquotes, and
  asterisks in the markup.

We understand that PRs can sometimes be overwhelming, especially as the
reviews start coming in.  Please let us know if the reviews are unclear or
the recommended next step seems overly demanding, if you would like help in
addressing a reviewer's comments, or if you have been waiting too long to hear
back on your PR.
-->
",anntzer,open,2021-02-02 22:22:40,,,,2021-02-03 00:15:39,0,GUI/gtk,v3.5.0,59
799730192,Slightly reorganize api docs.,"- Move _enums to _enums_api, consistently with other modules, and
  move it to the end (together with the other private module, _api).

- Group the various GUI backends together based on the GUI toolkit.
  (It seems a bit silly to have so many pages which all refer to
  backends with no generated docs anyways, and even if we could easily
  generate docs for them on CI we would not want to document all 4
  mostly indentical copies of qt{4,5}{agg,cairo} on 4 different pages.)

## PR Summary

## PR Checklist

<!-- Please mark any checkboxes that do not apply to this PR as [N/A]. -->

- [ ] Has pytest style unit tests (and `pytest` passes).
- [ ] Is [Flake 8](https://flake8.pycqa.org/en/latest/) compliant (run `flake8` on changed files to check).
- [ ] New features are documented, with examples if plot related.
- [ ] Documentation is sphinx and numpydoc compliant (the docs should [build](https://matplotlib.org/devel/documenting_mpl.html#building-the-docs) without error).
- [ ] Conforms to Matplotlib style conventions (install `flake8-docstrings` and run `flake8 --docstring-convention=all`).
- [ ] New features have an entry in `doc/users/next_whats_new/` (follow instructions in README.rst there).
- [ ] API changes documented in `doc/api/next_api_changes/` (follow instructions in README.rst there).

<!--
Thank you so much for your PR!  To help us review your contribution, please
consider the following points:

- A development guide is available at https://matplotlib.org/devdocs/devel/index.html.

- Help with git and github is available at
  https://matplotlib.org/devel/gitwash/development_workflow.html.

- Do not create the PR out of master, but out of a separate branch.

- The PR title should summarize the changes, for example ""Raise ValueError on
  non-numeric input to set_xlim"".  Avoid non-descriptive titles such as
  ""Addresses issue #8576"".

- The summary should provide at least 1-2 sentences describing the pull request
  in detail (Why is this change required?  What problem does it solve?) and
  link to any relevant issues.

- If you are contributing fixes to docstrings, please pay attention to
  http://matplotlib.org/devel/documenting_mpl.html#formatting.  In particular,
  note the difference between using single backquotes, double backquotes, and
  asterisks in the markup.

We understand that PRs can sometimes be overwhelming, especially as the
reviews start coming in.  Please let us know if the reviews are unclear or
the recommended next step seems overly demanding, if you would like help in
addressing a reviewer's comments, or if you have been waiting too long to hear
back on your PR.
-->
",anntzer,closed,2021-02-02 21:53:55,,2021-02-05 03:51:41,jklymak,2021-02-07 16:39:50,4,Documentation,v3.4.0,53
799672248,Move cheatsheet focus to the cheatsheets away,"## PR Summary
Change the cheatsheet link from https://github.com/matplotlib/cheatsheets to https://github.com/matplotlib/cheatsheets#cheatsheets

This makes this a much friendlier link to click, as your screen is immediately filled with what you want, rather than the code that was used to make the cheatsheets.

## PR Checklist

<!-- Please mark any checkboxes that do not apply to this PR as [N/A]. -->

- [ ] Documentation is sphinx and numpydoc compliant (the docs should [build](https://matplotlib.org/devel/documenting_mpl.html#building-the-docs) without error).

<!--
Thank you so much for your PR!  To help us review your contribution, please
consider the following points:

- A development guide is available at https://matplotlib.org/devdocs/devel/index.html.

- Help with git and github is available at
  https://matplotlib.org/devel/gitwash/development_workflow.html.

- Do not create the PR out of master, but out of a separate branch.

- The PR title should summarize the changes, for example ""Raise ValueError on
  non-numeric input to set_xlim"".  Avoid non-descriptive titles such as
  ""Addresses issue #8576"".

- The summary should provide at least 1-2 sentences describing the pull request
  in detail (Why is this change required?  What problem does it solve?) and
  link to any relevant issues.

- If you are contributing fixes to docstrings, please pay attention to
  http://matplotlib.org/devel/documenting_mpl.html#formatting.  In particular,
  note the difference between using single backquotes, double backquotes, and
  asterisks in the markup.

We understand that PRs can sometimes be overwhelming, especially as the
reviews start coming in.  Please let us know if the reviews are unclear or
the recommended next step seems overly demanding, if you would like help in
addressing a reviewer's comments, or if you have been waiting too long to hear
back on your PR.
-->
",ianhi,closed,2021-02-02 20:46:40,,2021-02-02 21:06:08,story645,2021-02-02 22:24:04,0,Documentation,v3.4.0,53
799547912,FIX: restore creating new axes via plt.subplot with different kwargs,"This adds a small amount of additional state to the Axes created via
Figure.add_axes and Figure.add_subplot (which the other Axes creation
methods eventually funnel through) to track the kwargs passed
through.

We then use that state in `pyplot.subplot` to determine if we should
re-use an Axes found at a given position or create a new one (and
implicitly destroy the existing one).

closes #19432
closes #10700

## PR Summary

## PR Checklist

<!-- Please mark any checkboxes that do not apply to this PR as [N/A]. -->

- [x] Has pytest style unit tests (and `pytest` passes).
- [x] Is [Flake 8](https://flake8.pycqa.org/en/latest/) compliant (run `flake8` on changed files to check).
- [ ] New features are documented, with examples if plot related.
- [x] Documentation is sphinx and numpydoc compliant (the docs should [build](https://matplotlib.org/devel/documenting_mpl.html#building-the-docs) without error).
- [x] Conforms to Matplotlib style conventions (install `flake8-docstrings` and run `flake8 --docstring-convention=all`).
- [x] New features have an entry in `doc/users/next_whats_new/` (follow instructions in README.rst there).
- [ ] API changes documented in `doc/api/next_api_changes/` (follow instructions in README.rst there).
",tacaswell,closed,2021-02-02 18:20:30,,2021-02-19 00:59:06,QuLogic,2021-02-19 01:43:08,16,Release critical,v3.4.0,53
799512444,tool manager functionality is not well documented,"I'm looking at the page at https://matplotlib.org/3.1.0/gallery/user_interfaces/toolmanager_sgskip.html

The example is nice, but would be much more helpful if it came with some explanations.  I'm unclear about several things.  In particular: (1) When do the various methods in `GroupHideTool` get invoked?  (2) What does the augmented toolbar look like?  (3) What are the capabilities and limitations of the tool manager?",Phillip-M-Feldman,open,2021-02-02 17:41:41,,,,2021-02-02 22:37:22,0,"Documentation, MEP: MEP22",,
799435456,Add warning when subplot kwargs are ignored,I think this was missed as part of https://github.com/matplotlib/matplotlib/pull/19153 - see https://github.com/matplotlib/matplotlib/pull/18978#issuecomment-733240967,dstansby,closed,2021-02-02 16:25:06,,2021-02-04 11:10:08,dstansby,2021-03-16 22:14:06,1,Release critical,,
799350241,Replace gtk3 deprecated APIs that have simple replacements.,"- set_double_buffered (deprecated since gtk3.14) is unnecessary, gtk
  (even gtk2) defaults to being double-buffered (this line of code comes
  from the old gtk2 backend which used to disable double buffering).
  https://developer.gnome.org/gtk3/stable/GtkWidget.html#gtk-widget-set-double-buffered

- gtk_window_get_pointer is deprecated since gtk3.0.
  https://developer.gnome.org/gdk3/stable/gdk3-Windows.html#gdk-window-get-pointer

- get_window_size_request is deprecated since gtk3.0.  Also inline
  add_widget, which is used exactly once.
  https://developer.gnome.org/gtk3/stable/GtkWidget.html#gtk-widget-size-request

## PR Summary

## PR Checklist

<!-- Please mark any checkboxes that do not apply to this PR as [N/A]. -->

- [ ] Has pytest style unit tests (and `pytest` passes).
- [ ] Is [Flake 8](https://flake8.pycqa.org/en/latest/) compliant (run `flake8` on changed files to check).
- [ ] New features are documented, with examples if plot related.
- [ ] Documentation is sphinx and numpydoc compliant (the docs should [build](https://matplotlib.org/devel/documenting_mpl.html#building-the-docs) without error).
- [ ] Conforms to Matplotlib style conventions (install `flake8-docstrings` and run `flake8 --docstring-convention=all`).
- [ ] New features have an entry in `doc/users/next_whats_new/` (follow instructions in README.rst there).
- [ ] API changes documented in `doc/api/next_api_changes/` (follow instructions in README.rst there).

<!--
Thank you so much for your PR!  To help us review your contribution, please
consider the following points:

- A development guide is available at https://matplotlib.org/devdocs/devel/index.html.

- Help with git and github is available at
  https://matplotlib.org/devel/gitwash/development_workflow.html.

- Do not create the PR out of master, but out of a separate branch.

- The PR title should summarize the changes, for example ""Raise ValueError on
  non-numeric input to set_xlim"".  Avoid non-descriptive titles such as
  ""Addresses issue #8576"".

- The summary should provide at least 1-2 sentences describing the pull request
  in detail (Why is this change required?  What problem does it solve?) and
  link to any relevant issues.

- If you are contributing fixes to docstrings, please pay attention to
  http://matplotlib.org/devel/documenting_mpl.html#formatting.  In particular,
  note the difference between using single backquotes, double backquotes, and
  asterisks in the markup.

We understand that PRs can sometimes be overwhelming, especially as the
reviews start coming in.  Please let us know if the reviews are unclear or
the recommended next step seems overly demanding, if you would like help in
addressing a reviewer's comments, or if you have been waiting too long to hear
back on your PR.
-->
",anntzer,closed,2021-02-02 14:50:17,,2021-02-04 22:13:36,timhoffm,2021-02-04 22:41:40,0,"GUI/gtk, Maintenance",v3.4.0,53
799324345,Always create a new subplot in plt.subplot(),"Fixes https://github.com/matplotlib/matplotlib/issues/19432.

The behaviour before this patch was to return an existing `Axes` if it had the same subplot-spec, regardless of `**kwargs`. This changes that to always create a new `Axes`, which is what is documented and expected from the deprecation.",dstansby,closed,2021-02-02 14:20:14,,2021-02-02 14:29:01,dstansby,2021-03-16 22:14:18,4,,,
799307412,DOC: fix an overlooked docs change from #19153,"## PR Summary

Fix an overlooked docs change from #19153, noted by @dstansby in #19432.

## PR Checklist

<!-- Please mark any checkboxes that do not apply to this PR as [N/A]. -->

- [x] Has pytest style unit tests (and `pytest` passes).
- [x] Is [Flake 8](https://flake8.pycqa.org/en/latest/) compliant (run `flake8` on changed files to check).
- [x] New features are documented, with examples if plot related.
- [x] Documentation is sphinx and numpydoc compliant (the docs should [build](https://matplotlib.org/devel/documenting_mpl.html#building-the-docs) without error).
- [x] Conforms to Matplotlib style conventions (install `flake8-docstrings` and run `flake8 --docstring-convention=all`).
- [x] New features have an entry in `doc/users/next_whats_new/` (follow instructions in README.rst there).
- [x] API changes documented in `doc/api/next_api_changes/` (follow instructions in README.rst there).",lpsinger,closed,2021-02-02 14:00:17,,2021-02-17 21:25:10,lpsinger,2021-03-16 22:14:30,3,"Documentation, Release critical",,
799264210,Unexpected change in behavior in plt.subplot,"<!--To help us understand and resolve your issue, please fill out the form to the best of your ability.-->
<!--You can feel free to delete the sections that do not apply.-->

### Bug report

**Bug summary**

#19153 introduced some changes that had (I think) unintended consequences when passing custom kwargs to projections

**Code for reproduction**

Prior to #19153, the following code returned ``False``, that is, two different axes were created:

```python
from astropy.wcs import WCS
import matplotlib.pyplot as plt

wcs1 = WCS(naxis=3)
wcs1.wcs.ctype = ['x', 'y', 'z']

ax1 = plt.subplot(1, 1, 1, projection=wcs1, slices=('x', 'y', 1))

wcs2 = WCS(naxis=3)
wcs2.wcs.ctype = ['a', 'b', 'c']

ax2 = plt.subplot(1, 1, 1, projection=wcs2, slices=('x', 2, 'y'))

print(ax1 is ax2)
```

No deprecation warning or future warning was raised in this case.

Following #19153, this silently ignores the projection and slices in the second call and the print statement returns ``True``.

I don't think #19153 was intended to start making ``plt.subplot`` return the same axes in some cases, rather I thought the goal of that PR was to remove re-use of axes in certain circumstances, so I think this is a regression/bug

**Actual outcome**

``ax1`` and ``ax2`` are the same

**Expected outcome**

``ax1`` and ``ax2`` should be different",astrofrog,closed,2021-02-02 13:06:13,,2021-02-19 00:59:06,QuLogic,2021-02-19 00:59:06,27,Release critical,v3.4.0,53
799243051,Tricontour documentation and examples should be updated in line with contour,"Some contour/contourf keyword arguments (hatches, linewidths, linestyles) also work with tricontour/tricontourf but they are not documented and there are no examples of their use.",ianthomas23,open,2021-02-02 12:37:04,,,,2021-02-15 19:21:49,6,"Documentation, Good first issue",,
799193213,Inconsistent colore range with contour,"### Bug report

**Bug summary**

As of matplotlib 3.3.4, `contourf`'s `vmin` and `vmax` arguments produce inconsistent colorbars as compared with `imshow`.

This is possibly related to https://github.com/matplotlib/matplotlib/issues/8935 but I think it's a different issue.

**Code for reproduction**
This example is taken from the following stack overflow thread
https://stackoverflow.com/questions/17989917/imshow-subplots-with-the-same-colorbar

```python
fig, axes = plt.subplots(nrows=1, ncols=2)

# generate randomly populated arrays
data1 = np.random.rand(10,10)*10 
data2 = np.random.rand(10,10)*10 -7.5

# find minimum of minima & maximum of maxima
minmin = np.min([np.min(data1), np.min(data2)])
maxmax = np.max([np.max(data1), np.max(data2)])

im1 = axes[0].imshow(data1, vmin=minmin, vmax=maxmax,
                     extent=(-5,5,-5,5), aspect='auto', cmap='viridis')
im2 = axes[1].imshow(data2, vmin=minmin, vmax=maxmax,
                     extent=(-5,5,-5,5), aspect='auto', cmap='viridis')

# add space for colour bar
fig.subplots_adjust(right=0.85)
cbar_ax = fig.add_axes([0.88, 0.15, 0.04, 0.7])
fig.colorbar(im2, cax=cbar_ax)
```

**Actual outcome**
The actual images don't matter here (non reproducible random noise), only the colorbar range.

![imshow_cmap](https://user-images.githubusercontent.com/14075922/106594237-2062c680-6552-11eb-9032-5632a4c22509.png)


Then, replacing `plt.imshow` with `plt.contourf` above gives

![contourf_cmap](https://user-images.githubusercontent.com/14075922/106594264-26f13e00-6552-11eb-8931-0286511a4c3f.png)

One can see that the final colorbar only spans the value range in the second image, despite the color/value mapping being correct.

**Expected outcome**
(this result is obtained by adding a hidden image to the plot from an array with extremal values representative of the complete range and creating the colorer from this image) 
![contourf_cmap_expected](https://user-images.githubusercontent.com/14075922/106594281-2ce71f00-6552-11eb-9f7e-489295faa82d.png)


**Matplotlib version**
  * Operating system: MacOS (Big Sur)
  * Matplotlib version (`import matplotlib; print(matplotlib.__version__)`): 3.3.4
  * Matplotlib backend (`print(matplotlib.get_backend())`): module://ipykernel.pylab.backend_inline
  * Python version: 3.8.5

I installed matplotlib via `pip`

edit: reopload of images without my particular style-sheet",neutrinoceros,closed,2021-02-02 11:25:35,,2021-02-02 16:03:15,jklymak,2021-02-02 18:16:08,4,,,
799186252,bar_label clipping,"<!--To help us understand and resolve your issue, please fill out the form to the best of your ability.-->
<!--You can feel free to delete the sections that do not apply.-->

### Bug report

**Bug summary**

bar_label currently uses the default annotation() clipping behavior, which is to draw the text unclipped as long as the annotated point is within the axes.  I'm not sure this is the best behavior for this use case?

**Code for reproduction**

<!--A minimum code snippet required to reproduce the bug.
Please make sure to minimize the number of dependencies required, and provide
any necessary plotted data.
Avoid using threads, as Matplotlib is (explicitly) not thread-safe.-->

```python
from pylab import *

ax = gca()
rs = ax.bar(np.arange(50), np.arange(50))
ax.bar_label(rs)
ax.set(ylim=(0, 40))
show()
```

**Actual outcome**

![test](https://user-images.githubusercontent.com/1322974/106592644-1344d800-6550-11eb-8825-828e34b718ea.png)

Note how the 39 and 40 labels are still drawn (effectively, because the bar tops are within axes limits), but not the subsequent ones.

**Expected outcome**

I'm not sure what the best behavior would be, but it should likely be one of the following:
- perform ""normal"" clipping (so 39 is half-clipped, 40 is fully clipped out)
- don't draw any labels that would be clipped (39 is hidden)
- don't clip at all (all labels are visible)

bar_label is new in 3.4 so it *may* be worth deciding on this before the 3.4 release.

**Matplotlib version**
<!--Please specify your platform and versions of the relevant libraries you are using:-->
  * Operating system: linux
  * Matplotlib version (`import matplotlib; print(matplotlib.__version__)`): head
  * Matplotlib backend (`print(matplotlib.get_backend())`): agg
  * Python version: 39
  * Jupyter version (if applicable): 
  * Other libraries: 

<!--Please tell us how you installed matplotlib and python e.g., from source, pip, conda-->
<!--If you installed from conda, please specify which channel you used if not the default-->

(inspired by https://github.com/matplotlib/matplotlib/issues/19428, but that bug report is using a pre-bar_label labeling approach.)

",anntzer,open,2021-02-02 11:16:38,,,,2021-03-29 23:56:04,5,topic: text,v3.4.2,63
799150053,Ylim with Bar Chart,"I think the bar chart's ylim does not behave as expected. 
Based on the demo presented [here ](https://matplotlib.org/2.0.2/examples/api/barchart_demo.html), I have added plt.ylim(top=30) and bars extended outside. 

Expected behaviour is that bars will be cut-off at the top of the figure.

![image](https://user-images.githubusercontent.com/40423004/106587425-a8e56500-655a-11eb-98b1-c505bddcc5d6.png)
![image](https://user-images.githubusercontent.com/40423004/106587443-adaa1900-655a-11eb-9120-263b3bb1d88d.png)

`import numpy as np
import matplotlib.pyplot as plt

N = 5
men_means = (20, 35, 30, 35, 27)
men_std = (2, 3, 4, 1, 2)

ind = np.arange(N)  # the x locations for the groups
width = 0.35       # the width of the bars

fig, ax = plt.subplots()
rects1 = ax.bar(ind, men_means, width, color='r', yerr=men_std)

women_means = (25, 32, 34, 20, 25)
women_std = (3, 5, 2, 3, 3)
rects2 = ax.bar(ind + width, women_means, width, color='y', yerr=women_std)

ax.set_ylabel('Scores')
ax.set_title('Scores by group and gender')
ax.set_xticks(ind + width / 2)
ax.set_xticklabels(('G1', 'G2', 'G3', 'G4', 'G5'))

plt.ylim(top=30) # THIS IS THE PART I HAVE ADDED

ax.legend((rects1[0], rects2[0]), ('Men', 'Women'))


def autolabel(rects):
    for rect in rects:
        height = rect.get_height()
        ax.text(rect.get_x() + rect.get_width()/2., 1.05*height,
                '%d' % int(height),
                ha='center', va='bottom')

autolabel(rects1)
autolabel(rects2)

plt.show()`",berkdemir,open,2021-02-02 10:29:49,,,,2021-02-03 11:18:26,2,,,
799146639,Fix mistake in documentation,"It looks like that [here](https://github.com/matplotlib/matplotlib/blob/a5ea869114fd67ee4db17b22e77a1e495f45336f/examples/statistics/boxplot.py#L63), specifying `linestyle='none'` has no effect. If the goal was to remove the marker edges, it should be substituted with `markeredgecolor='none'`.",alessandro-giusti,closed,2021-02-02 10:25:30,,2021-03-03 00:54:17,QuLogic,2021-03-03 00:54:27,1,Documentation,v3.4.0,53
799052451,Support empty stairs.,"## PR Summary

Closes https://github.com/matplotlib/matplotlib/issues/18934 (although @timhoffm has argued against supporting this case).

## PR Checklist

<!-- Please mark any checkboxes that do not apply to this PR as [N/A]. -->

- [ ] Has pytest style unit tests (and `pytest` passes).
- [ ] Is [Flake 8](https://flake8.pycqa.org/en/latest/) compliant (run `flake8` on changed files to check).
- [ ] New features are documented, with examples if plot related.
- [ ] Documentation is sphinx and numpydoc compliant (the docs should [build](https://matplotlib.org/devel/documenting_mpl.html#building-the-docs) without error).
- [ ] Conforms to Matplotlib style conventions (install `flake8-docstrings` and run `flake8 --docstring-convention=all`).
- [ ] New features have an entry in `doc/users/next_whats_new/` (follow instructions in README.rst there).
- [ ] API changes documented in `doc/api/next_api_changes/` (follow instructions in README.rst there).

<!--
Thank you so much for your PR!  To help us review your contribution, please
consider the following points:

- A development guide is available at https://matplotlib.org/devdocs/devel/index.html.

- Help with git and github is available at
  https://matplotlib.org/devel/gitwash/development_workflow.html.

- Do not create the PR out of master, but out of a separate branch.

- The PR title should summarize the changes, for example ""Raise ValueError on
  non-numeric input to set_xlim"".  Avoid non-descriptive titles such as
  ""Addresses issue #8576"".

- The summary should provide at least 1-2 sentences describing the pull request
  in detail (Why is this change required?  What problem does it solve?) and
  link to any relevant issues.

- If you are contributing fixes to docstrings, please pay attention to
  http://matplotlib.org/devel/documenting_mpl.html#formatting.  In particular,
  note the difference between using single backquotes, double backquotes, and
  asterisks in the markup.

We understand that PRs can sometimes be overwhelming, especially as the
reviews start coming in.  Please let us know if the reviews are unclear or
the recommended next step seems overly demanding, if you would like help in
addressing a reviewer's comments, or if you have been waiting too long to hear
back on your PR.
-->
",anntzer,closed,2021-02-02 08:26:29,,2021-02-03 21:42:17,tacaswell,2021-02-03 22:16:02,2,Release critical,v3.4.0,53
799013677,Add units to bar_label padding documentation.,"## PR Summary

## PR Checklist

- [n/a] Has pytest style unit tests (and `pytest` passes).
- [x] Is [Flake 8](https://flake8.pycqa.org/en/latest/) compliant (run `flake8` on changed files to check).
- [n/a] New features are documented, with examples if plot related.
- [x] Documentation is sphinx and numpydoc compliant (the docs should [build](https://matplotlib.org/devel/documenting_mpl.html#building-the-docs) without error).
- [x] Conforms to Matplotlib style conventions (install `flake8-docstrings` and run `flake8 --docstring-convention=all`).
- [n/a] New features have an entry in `doc/users/next_whats_new/` (follow instructions in README.rst there).
- [b/a] API changes documented in `doc/api/next_api_changes/` (follow instructions in README.rst there).",QuLogic,closed,2021-02-02 07:25:06,,2021-02-02 13:23:36,dstansby,2021-02-02 22:12:49,0,Documentation,v3.4.0,53
798785912,Use a standard white background for GTK backends.,"## PR Summary

See explanation in #19410, but using non-deprecated API.

## PR Checklist

- [x] Has pytest style unit tests (and `pytest` passes).
- [x] Is [Flake 8](https://flake8.pycqa.org/en/latest/) compliant (run `flake8` on changed files to check).
- [n/a] New features are documented, with examples if plot related.
- [n/a] Documentation is sphinx and numpydoc compliant (the docs should [build](https://matplotlib.org/devel/documenting_mpl.html#building-the-docs) without error).
- [x] Conforms to Matplotlib style conventions (install `flake8-docstrings` and run `flake8 --docstring-convention=all`).
- [n/a] New features have an entry in `doc/users/next_whats_new/` (follow instructions in README.rst there).
- [n/a] API changes documented in `doc/api/next_api_changes/` (follow instructions in README.rst there).",QuLogic,closed,2021-02-01 23:15:28,,2021-02-10 23:44:35,QuLogic,2021-02-10 23:44:39,5,GUI/gtk,,
798752070,Switch to pydata-sphinx-theme,"### Current status:

- We vendor our own sphinx theme that is based on an ancient verson of the alabaster theme. which has been heavily modified over time. The theme is a bit hard to maintain, and things can fall apart if sphinx does some changes (indeed we recently had a broken search #19279).
- The current layout is not responsive.
- Parts of the current layout look dated (which is subjective of course).

### Proposal:
Reuse https://github.com/pydata/pydata-sphinx-theme, which has been adopted by some major numfocus projects.

I anticipate less maintainance effort on our side, because the theme is shared between multiple major projects.

I like the idea that major numfocus projects have similar but still distinct designs. One should recognize that numpy and matplotlib are related, but I still want to immediately see if I'm on numpy, pandas or matplotlib docs.
This needs som customization in terms of fonts, color, etc., Ideally make these things configurable options upstream in pydata-sphinx-theme so that we can just set it in `conf.py` and the theme does the rest.

This will also need some disentangling of the current `mpl.css` for keeping parts we still need in a same or similar form (e.g. gallery layout, version box, ...).",timhoffm,open,2021-02-01 22:15:31,,,,2021-03-18 05:39:10,12,Documentation,v3.5.0,59
798747900,Style fixes to triintepolate docs.,"## PR Summary

## PR Checklist

<!-- Please mark any checkboxes that do not apply to this PR as [N/A]. -->

- [ ] Has pytest style unit tests (and `pytest` passes).
- [ ] Is [Flake 8](https://flake8.pycqa.org/en/latest/) compliant (run `flake8` on changed files to check).
- [ ] New features are documented, with examples if plot related.
- [ ] Documentation is sphinx and numpydoc compliant (the docs should [build](https://matplotlib.org/devel/documenting_mpl.html#building-the-docs) without error).
- [ ] Conforms to Matplotlib style conventions (install `flake8-docstrings` and run `flake8 --docstring-convention=all`).
- [ ] New features have an entry in `doc/users/next_whats_new/` (follow instructions in README.rst there).
- [ ] API changes documented in `doc/api/next_api_changes/` (follow instructions in README.rst there).

<!--
Thank you so much for your PR!  To help us review your contribution, please
consider the following points:

- A development guide is available at https://matplotlib.org/devdocs/devel/index.html.

- Help with git and github is available at
  https://matplotlib.org/devel/gitwash/development_workflow.html.

- Do not create the PR out of master, but out of a separate branch.

- The PR title should summarize the changes, for example ""Raise ValueError on
  non-numeric input to set_xlim"".  Avoid non-descriptive titles such as
  ""Addresses issue #8576"".

- The summary should provide at least 1-2 sentences describing the pull request
  in detail (Why is this change required?  What problem does it solve?) and
  link to any relevant issues.

- If you are contributing fixes to docstrings, please pay attention to
  http://matplotlib.org/devel/documenting_mpl.html#formatting.  In particular,
  note the difference between using single backquotes, double backquotes, and
  asterisks in the markup.

We understand that PRs can sometimes be overwhelming, especially as the
reviews start coming in.  Please let us know if the reviews are unclear or
the recommended next step seems overly demanding, if you would like help in
addressing a reviewer's comments, or if you have been waiting too long to hear
back on your PR.
-->
",anntzer,closed,2021-02-01 22:09:20,,2021-02-02 01:02:04,jklymak,2021-02-02 07:56:37,2,Documentation,v3.4.0,53
798742991,Switch to documenting generic collections in lowercase.,"The uppercase generics (List, etc.) are deprecated by PEP 585 in favor
of the lowercase ones (which also look nicer IMO).

## PR Summary

## PR Checklist

<!-- Please mark any checkboxes that do not apply to this PR as [N/A]. -->

- [ ] Has pytest style unit tests (and `pytest` passes).
- [ ] Is [Flake 8](https://flake8.pycqa.org/en/latest/) compliant (run `flake8` on changed files to check).
- [ ] New features are documented, with examples if plot related.
- [ ] Documentation is sphinx and numpydoc compliant (the docs should [build](https://matplotlib.org/devel/documenting_mpl.html#building-the-docs) without error).
- [ ] Conforms to Matplotlib style conventions (install `flake8-docstrings` and run `flake8 --docstring-convention=all`).
- [ ] New features have an entry in `doc/users/next_whats_new/` (follow instructions in README.rst there).
- [ ] API changes documented in `doc/api/next_api_changes/` (follow instructions in README.rst there).

<!--
Thank you so much for your PR!  To help us review your contribution, please
consider the following points:

- A development guide is available at https://matplotlib.org/devdocs/devel/index.html.

- Help with git and github is available at
  https://matplotlib.org/devel/gitwash/development_workflow.html.

- Do not create the PR out of master, but out of a separate branch.

- The PR title should summarize the changes, for example ""Raise ValueError on
  non-numeric input to set_xlim"".  Avoid non-descriptive titles such as
  ""Addresses issue #8576"".

- The summary should provide at least 1-2 sentences describing the pull request
  in detail (Why is this change required?  What problem does it solve?) and
  link to any relevant issues.

- If you are contributing fixes to docstrings, please pay attention to
  http://matplotlib.org/devel/documenting_mpl.html#formatting.  In particular,
  note the difference between using single backquotes, double backquotes, and
  asterisks in the markup.

We understand that PRs can sometimes be overwhelming, especially as the
reviews start coming in.  Please let us know if the reviews are unclear or
the recommended next step seems overly demanding, if you would like help in
addressing a reviewer's comments, or if you have been waiting too long to hear
back on your PR.
-->
",anntzer,closed,2021-02-01 22:00:50,,2021-02-01 23:57:21,QuLogic,2021-02-01 23:59:47,0,Documentation,v3.4.0,53
798684602,ConciseDateFormatter is not timezone aware,"### Bug report

**Bug summary**

I was working with `datetime` objects and wanted to plot them and was very excited about finding the `ConciseDateFormatter` as it seems to produce exactly what I wanted. My data spans multiple days and upon closer inspection I realized that the ticks seemed to not coincide with the start of the days in my data. I started to look into this and found out that the problem was, that my `datetime` objects had timezone information attached to them, however the formatter put the ticks at utc start of day. This can be very confusing.

The `ConciseDateFormatter` already has a timezone keyword, but in my example I am not sure what it is doing. I am not sure what the best way to resolve this would be but maybe an additional keyword, that allows to define a timezone the ticks will be related to might help, or simply use the timezone of the actual data (for example the first element).

**Code for reproduction**

```python
import matplotlib.pyplot as plt
from matplotlib.colors import LogNorm
import numpy as np
import datetime, pytz
import matplotlib.dates as mdates

import matplotlib
print(matplotlib.__version__, matplotlib.get_backend())

dt = datetime.timedelta(hours=1)
t_utc = [datetime.datetime(2021, 1, 1, 0, 0, 0)]
t_pac = [datetime.datetime(2021, 1, 1, 0, 0, 0, tzinfo=pytz.timezone(""US/Pacific""))]
for i in range(24*3):
    t_utc.append(t_utc[-1] + dt)
    t_pac.append(t_pac[-1] + dt)

data = np.repeat(np.arange(0, 3), 24)

date_locator = mdates.AutoDateLocator(minticks=3, maxticks=4)
date_formatter = mdates.ConciseDateFormatter(date_locator, tz=pytz.timezone(""US/Pacific""))
plt.figure()
plt.gca().xaxis.set_major_locator(date_locator)
plt.gca().xaxis.set_major_formatter(date_formatter)
plt.plot(t_utc[:-1], data, ""."", label='utc')
plt.plot(t_pac[:-1], data + 0.5, ""."", label=""pacific"")
plt.grid()
plt.legend()
plt.savefig(""utc_vs_pac.png"")
```

**Actual outcome**

![utc_vs_pac](https://user-images.githubusercontent.com/7439971/106514142-bf22f080-6488-11eb-9657-f69db2adf2f1.png)

**Expected outcome**

I would assume that the ticks should coincide with the timezone, i.e. they are placed at the start of day in that timezone, not utc.

**Matplotlib version**
  * Operating system: Fedora 31
  * Matplotlib version : 3.3.4 
  * Matplotlib backend:  Qt5Agg
  * Python version: Python 3.7.9",cosama,closed,2021-02-01 20:29:39,,2021-02-01 20:51:32,jklymak,2021-02-01 23:58:44,4,"Community support, topic: date handling",,
798578070,Dev version hard to check,"Hello. `astropy` tests against the dev version of matplotlib by installing `git+https://github.com/matplotlib/matplotlib.git#egg=matplotlib` (see https://github.com/astropy/astropy/blob/13c4faa2ef41624f0f454f16ded57043c2b1c4ec/tox.ini#L84). Unfortunately, this gives a dev version that is hard to check.

Example log using latest stable: https://github.com/astropy/astropy/runs/1807399647?check_suite_focus=true (`Matplotlib: 3.3.4`)

Example log using dev: https://github.com/astropy/astropy/runs/1807399544?check_suite_focus=true (`Matplotlib: 3.3.2+2259.g30546931d`)

As a result, I am not sure how to check if a given Matplotlib version is dev or not:

```python
>>> from packaging.version import Version
>>> stable = Version('3.3.4')
>>> dev = Version('3.3.2+2259.g30546931d')
>>> dev > stable  # Expected: True
False
>>> dev.is_devrelease  # Expected: True
False
```

Any advise would be really appreciated. Thanks!

xref astropy/astropy#11267",pllim,open,2021-02-01 17:53:28,,,,2021-02-01 20:03:26,2,Community support,,
798510931,BF: DOCS: fix slash for windows in conf.py,"## PR Summary

Single line fix to remove a hard-coded slash that was preventing the docs from building on windows in Anaconda.

## PR Checklist

<!-- Please mark any checkboxes that do not apply to this PR as [N/A]. -->

- [N/A] Has pytest style unit tests (and `pytest` passes).
- [ ] Is [Flake 8](https://flake8.pycqa.org/en/latest/) compliant (run `flake8` on changed files to check).
- [N/A] New features are documented, with examples if plot related.
- [N/A] Documentation is sphinx and numpydoc compliant (the docs should [build](https://matplotlib.org/devel/documenting_mpl.html#building-the-docs) without error).
- [ ] Conforms to Matplotlib style conventions (install `flake8-docstrings` and run `flake8 --docstring-convention=all`).
- [N/A] New features have an entry in `doc/users/next_whats_new/` (follow instructions in README.rst there).
- [N/A] API changes documented in `doc/api/next_api_changes/` (follow instructions in README.rst there).

<!--
Thank you so much for your PR!  To help us review your contribution, please
consider the following points:

- A development guide is available at https://matplotlib.org/devdocs/devel/index.html.

- Help with git and github is available at
  https://matplotlib.org/devel/gitwash/development_workflow.html.

- Do not create the PR out of master, but out of a separate branch.

- The PR title should summarize the changes, for example ""Raise ValueError on
  non-numeric input to set_xlim"".  Avoid non-descriptive titles such as
  ""Addresses issue #8576"".

- The summary should provide at least 1-2 sentences describing the pull request
  in detail (Why is this change required?  What problem does it solve?) and
  link to any relevant issues.

- If you are contributing fixes to docstrings, please pay attention to
  http://matplotlib.org/devel/documenting_mpl.html#formatting.  In particular,
  note the difference between using single backquotes, double backquotes, and
  asterisks in the markup.

We understand that PRs can sometimes be overwhelming, especially as the
reviews start coming in.  Please let us know if the reviews are unclear or
the recommended next step seems overly demanding, if you would like help in
addressing a reviewer's comments, or if you have been waiting too long to hear
back on your PR.
-->
",brunobeltran,closed,2021-02-01 16:29:14,,2021-02-01 20:19:39,jklymak,2021-04-01 19:41:56,2,"Build, Documentation",v3.4.0,53
798466182,CI failing on numpy...,"Circle is failing due to:

`/home/circleci/project/examples/units/ellipse_with_units.py` and `/home/circleci/project/examples/units/radian_demo.py`

Looks like something in numpy changed:

```
FutureWarning: The input object of type 'TaggedValue' is an array-like implementing one of the 
corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a 
sequence (or 0-D). In the future, this object will be coerced as if it was first converted using 
`np.array(obj)`. To retain the old behaviour, you have to either modify the type 'TaggedValue', 
or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
```

",jklymak,closed,2021-02-01 15:37:08,,2021-02-01 16:14:04,jklymak,2021-02-01 22:46:58,3,Maintenance,v3.4.0,53
798408837,fixes TypeError constructor returned NULL in wayland session,"## PR Summary
fixes #19405. updated GTK3 method for cursor control for GTK3 backend. fixes the TypeError constructor returned NULL error that prevents pyplot to run under Wayland.

## PR Checklist

<!-- Please mark any checkboxes that do not apply to this PR as [N/A]. -->

- [N/A] Has pytest style unit tests (and `pytest` passes).
- [N/A] Is [Flake 8](https://flake8.pycqa.org/en/latest/) compliant (run `flake8` on changed files to check).
- [N/A] New features are documented, with examples if plot related.
- [N/A] Documentation is sphinx and numpydoc compliant (the docs should [build](https://matplotlib.org/devel/documenting_mpl.html#building-the-docs) without error).
- [N/A] Conforms to Matplotlib style conventions (install `flake8-docstrings` and run `flake8 --docstring-convention=all`).
- [N/A] New features have an entry in `doc/users/next_whats_new/` (follow instructions in README.rst there).
- [N/A] API changes documented in `doc/api/next_api_changes/` (follow instructions in README.rst there).

<!--
Thank you so much for your PR!  To help us review your contribution, please
consider the following points:

- A development guide is available at https://matplotlib.org/devdocs/devel/index.html.

- Help with git and github is available at
  https://matplotlib.org/devel/gitwash/development_workflow.html.

- Do not create the PR out of master, but out of a separate branch.

- The PR title should summarize the changes, for example ""Raise ValueError on
  non-numeric input to set_xlim"".  Avoid non-descriptive titles such as
  ""Addresses issue #8576"".

- The summary should provide at least 1-2 sentences describing the pull request
  in detail (Why is this change required?  What problem does it solve?) and
  link to any relevant issues.

- If you are contributing fixes to docstrings, please pay attention to
  http://matplotlib.org/devel/documenting_mpl.html#formatting.  In particular,
  note the difference between using single backquotes, double backquotes, and
  asterisks in the markup.

We understand that PRs can sometimes be overwhelming, especially as the
reviews start coming in.  Please let us know if the reviews are unclear or
the recommended next step seems overly demanding, if you would like help in
addressing a reviewer's comments, or if you have been waiting too long to hear
back on your PR.
-->
",liuyun88,closed,2021-02-01 14:34:39,,2021-02-02 21:59:28,anntzer,2021-02-02 21:59:28,3,GUI/gtk,v3.4.0,53
798312554,Make TaggedValue in basic_units a sequence,"This is needed to avoid a deprecation warning with numpy 1.20, and fixes the doc build.

See https://numpy.org/doc/stable/release/1.20.0-notes.html#arraylike-objects-which-do-not-define-len-and-getitem for more information. Essentially, `__len__` and `__getitem__` needed to be implemented for numpy to recognise the class as a sequence.",dstansby,closed,2021-02-01 12:39:40,,2021-02-01 17:01:01,tacaswell,2021-02-12 03:09:14,1,topic: units,v3.4.0,53
798271260,ModuleNotFoundError: No module named 'matplotlib.artist',"<!--To help us understand and resolve your issue, please fill out the form to the best of your ability.-->
<!--You can feel free to delete the sections that do not apply.-->

### Bug report

**Bug summary**

<!--A short 1-2 sentences that succinctly describes the bug-->

**Code for reproduction**

<!--A minimum code snippet required to reproduce the bug.
Please make sure to minimize the number of dependencies required, and provide
any necessary plotted data.
Avoid using threads, as Matplotlib is (explicitly) not thread-safe.-->

```python
# Paste your code here
#import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
%matplotlib inline
import warnings
warnings.filterwarnings(""ignore"")
#
```

**Actual outcome**

<!--The output produced by the above code, which may be a screenshot, console output, etc.-->

```
# If applicable, paste the console output here
#
#
```

**Expected outcome**

<!--A description of the expected outcome from the code snippet-->
<!--If this used to work in an earlier version of Matplotlib, please note the version it used to work on-->

**Matplotlib version**
<!--Please specify your platform and versions of the relevant libraries you are using:-->
  * Operating system: 
  * Matplotlib version (`import matplotlib; print(matplotlib.__version__)`): 
  * Matplotlib backend (`print(matplotlib.get_backend())`): 
  * Python version: 
  * Jupyter version (if applicable): 
  * Other libraries: 

<!--Please tell us how you installed matplotlib and python e.g., from source, pip, conda-->
<!--If you installed from conda, please specify which channel you used if not the default-->

",kapilbhise,closed,2021-02-01 11:44:46,,2021-02-01 15:47:07,jklymak,2021-02-02 22:32:07,3,Community support,,
798021611,FIX: allow add option for Axes3D(fig),"## PR Summary

Closes #18939

We changed the logic to deal with `Axes3d(fig)`  to not add the new axes to `fig` in #18564, but of course that broke some people who were working off older examples.  

This PR pops up a DeprecationWarning if folks use the old call, however, if they do the somewhat awkward:

```
ax = Axes3d(fig)
fig.add_axes(ax)
```

they will *also* get a Deprecation Warning, which they can suppress with 

```
ax = Axes3d(fig, add=False)
fig.add_axes(ax)
```

However, the deprecation warning just suggests that they add the subplot the idiomatic way:

```
ax = fig.add_subplot(projection='3d')
```

I'm not a super fan of this proposal - it pops up a warning for a valid if rare use case, but its better than mysteriously not adding the Axes3d object.   and we can rip it all out in a cycle or two.  






## PR Checklist

<!-- Please mark any checkboxes that do not apply to this PR as [N/A]. -->

- [ ] Has pytest style unit tests (and `pytest` passes).
- [ ] Is [Flake 8](https://flake8.pycqa.org/en/latest/) compliant (run `flake8` on changed files to check).
- [ ] New features are documented, with examples if plot related.
- [ ] Documentation is sphinx and numpydoc compliant (the docs should [build](https://matplotlib.org/devel/documenting_mpl.html#building-the-docs) without error).
- [ ] Conforms to Matplotlib style conventions (install `flake8-docstrings` and run `flake8 --docstring-convention=all`).
- [ ] New features have an entry in `doc/users/next_whats_new/` (follow instructions in README.rst there).
- [ ] API changes documented in `doc/api/next_api_changes/` (follow instructions in README.rst there).

<!--
Thank you so much for your PR!  To help us review your contribution, please
consider the following points:

- A development guide is available at https://matplotlib.org/devdocs/devel/index.html.

- Help with git and github is available at
  https://matplotlib.org/devel/gitwash/development_workflow.html.

- Do not create the PR out of master, but out of a separate branch.

- The PR title should summarize the changes, for example ""Raise ValueError on
  non-numeric input to set_xlim"".  Avoid non-descriptive titles such as
  ""Addresses issue #8576"".

- The summary should provide at least 1-2 sentences describing the pull request
  in detail (Why is this change required?  What problem does it solve?) and
  link to any relevant issues.

- If you are contributing fixes to docstrings, please pay attention to
  http://matplotlib.org/devel/documenting_mpl.html#formatting.  In particular,
  note the difference between using single backquotes, double backquotes, and
  asterisks in the markup.

We understand that PRs can sometimes be overwhelming, especially as the
reviews start coming in.  Please let us know if the reviews are unclear or
the recommended next step seems overly demanding, if you would like help in
addressing a reviewer's comments, or if you have been waiting too long to hear
back on your PR.
-->
",jklymak,closed,2021-02-01 06:40:36,,2021-02-17 21:35:14,jklymak,2021-03-16 22:12:31,8,"Release critical, status: duplicate, status: waiting for other PR, topic: mplot3d",v3.4.0,53
797970233,DOC: correct off by one indentation.,"the off by one made it look like to rst/numpydoc that the parameters
h_pad, w_pad ... etc are part of the indented block of the `rendered`
parameter.

This is not rendered on the matplotlib doc AFAICT, but no reason to have
it wrong...
",Carreau,closed,2021-02-01 05:26:55,,2021-02-01 12:41:24,dstansby,2021-02-01 12:41:51,2,Documentation,v3.4.0,53
797959953,DOC: fix incorrect parameter names,"Also uniformise indent of one section to match the rest of the file
",Carreau,closed,2021-02-01 05:12:23,,2021-02-01 22:52:24,timhoffm,2021-02-01 22:52:24,1,Documentation,v3.4.0,53
797771046,Set the GTK background color to white.,"This is consistent with the other backends (although this seems to be
broken on wx too), which allows semi-transparent figures to be rendered
against a consistent background (this can be checked e.g. with
`figure(facecolor=(0, 0, 0, 0))` or `figure(facecolor=(1, 1, 1, .5))`),
which would previously be rendered differently on gtk3 when using a dark
theme.

~~While override_background_color is marked as deprecated on gtk3, the
alternative seems to involve a bunch of CSS, and it seems unlikely to
ever be removed now that gtk development has switched to gtk4...~~

xref https://github.com/matplotlib/matplotlib/pull/9698.

## PR Summary

## PR Checklist

<!-- Please mark any checkboxes that do not apply to this PR as [N/A]. -->

- [ ] Has pytest style unit tests (and `pytest` passes).
- [ ] Is [Flake 8](https://flake8.pycqa.org/en/latest/) compliant (run `flake8` on changed files to check).
- [ ] New features are documented, with examples if plot related.
- [ ] Documentation is sphinx and numpydoc compliant (the docs should [build](https://matplotlib.org/devel/documenting_mpl.html#building-the-docs) without error).
- [ ] Conforms to Matplotlib style conventions (install `flake8-docstrings` and run `flake8 --docstring-convention=all`).
- [ ] New features have an entry in `doc/users/next_whats_new/` (follow instructions in README.rst there).
- [ ] API changes documented in `doc/api/next_api_changes/` (follow instructions in README.rst there).

<!--
Thank you so much for your PR!  To help us review your contribution, please
consider the following points:

- A development guide is available at https://matplotlib.org/devdocs/devel/index.html.

- Help with git and github is available at
  https://matplotlib.org/devel/gitwash/development_workflow.html.

- Do not create the PR out of master, but out of a separate branch.

- The PR title should summarize the changes, for example ""Raise ValueError on
  non-numeric input to set_xlim"".  Avoid non-descriptive titles such as
  ""Addresses issue #8576"".

- The summary should provide at least 1-2 sentences describing the pull request
  in detail (Why is this change required?  What problem does it solve?) and
  link to any relevant issues.

- If you are contributing fixes to docstrings, please pay attention to
  http://matplotlib.org/devel/documenting_mpl.html#formatting.  In particular,
  note the difference between using single backquotes, double backquotes, and
  asterisks in the markup.

We understand that PRs can sometimes be overwhelming, especially as the
reviews start coming in.  Please let us know if the reviews are unclear or
the recommended next step seems overly demanding, if you would like help in
addressing a reviewer's comments, or if you have been waiting too long to hear
back on your PR.
-->
",anntzer,closed,2021-01-31 17:59:10,,2021-02-11 21:42:26,timhoffm,2021-02-11 21:45:22,3,GUI/gtk,v3.4.0,53
797730017,Boxplot: Median line too long after changing linewidth,"When changing the `linewidth` property of the median line in boxplots, the line will extend beyond the box width.

For example,
```python
import matplotlib.pyplot as plt

data = [[1, 2, 3, 4, 5]]
fig, ax = plt.subplots()
ax.boxplot(data,
           medianprops={""linewidth"": 8})
```
gives (on Matplotlib 3.2.2):
[<img src=""https://user-images.githubusercontent.com/26203394/106387844-8a089680-63d3-11eb-944b-e22ead07b4ea.jpg"" width=450>](https://user-images.githubusercontent.com/26203394/106387844-8a089680-63d3-11eb-944b-e22ead07b4ea.jpg)


By simply chaning the `solid_capstyle` propery to `""butt""` in
```python
ax.boxplot(data,
           medianprops={""linewidth"": 8,
                        ""solid_capstyle"": ""butt""})
```
I was able to improve this a bit (I stole that trick from [here](https://stackoverflow.com/a/10297860)):
[<img src=""https://user-images.githubusercontent.com/26203394/106387859-a0aeed80-63d3-11eb-8948-5ffac5306052.jpg"" width=450>](https://user-images.githubusercontent.com/26203394/106387859-a0aeed80-63d3-11eb-8948-5ffac5306052.jpg)

Ideally, one could now reduce the median line length such that it no longer overlaps with the black bounding line of the box.
Since the box line width is only accessible in ""points"" units, it would need to be transformed to data units.
I was unable to get this to work, though.

Would it be possible/desirable to change the default setting for `solid_capstyle`?
Could this be handled in a different way?",Kadabash,open,2021-01-31 14:55:16,,,,2021-01-31 19:39:59,4,,,
797722824,Transforms and datetime axis,"<!--To help us understand and resolve your issue, please fill out the form to the best of your ability.-->
<!--You can feel free to delete the sections that do not apply.-->

### Bug report
I posted this on the discourse a few days ago and didn't receive any response. Hoping it gets some attention here.

**Transforms don't play well with datetime axes - or am I doing something wrong?**

I am trying to help a user with adjustText to use it together with a time series plot: https://stackoverflow.com/questions/65835978/timeline-of-events-setting-annotation-location/65856798#65856798

Recently adjust_text got some improvements to work with arbitrary transforms, which helps it work with, I thought, any kind of matplotlib axes, and it definitely helped with maps and projections, for example.
However it seems to be broken when working with datetime axes. Older versions, I think, would give some random chaotic results, unless the plot was actually created using `plot_date`, while currently it just breaks. Unfortunately, I personally have zero experience working with this time series data, and it’s quite confusing. Here is a simple example that produces the same error as what I get when using adjust_text:

**Code for reproduction**

<!--A minimum code snippet required to reproduce the bug.
Please make sure to minimize the number of dependencies required, and provide
any necessary plotted data.
Avoid using threads, as Matplotlib is (explicitly) not thread-safe.-->

```python
import matplotlib.pyplot as plt
import numpy as np
import matplotlib.dates as mdates
from datetime import datetime
names = ['v2.2.4', 'v3.0.3', 'v3.0.2', 'v3.0.1', 'v3.0.0', 'v2.2.3',
        'v2.2.2', 'v2.2.1', 'v2.2.0', 'v2.1.2', 'v2.1.1', 'v2.1.0',
        'v2.0.2', 'v2.0.1', 'v2.0.0', 'v1.5.3', 'v1.5.2', 'v1.5.1',
        'v1.5.0', 'v1.4.3', 'v1.4.2', 'v1.4.1', 'v1.4.0']

dates = ['2019-02-26', '2019-02-26', '2018-11-10', '2018-11-10',
            '2018-09-18', '2018-08-10', '2018-03-17', '2018-03-16',
            '2018-03-06', '2018-01-18', '2017-12-10', '2017-10-07',
            '2017-05-10', '2017-05-02', '2017-01-17', '2016-09-09',
            '2016-07-03', '2016-01-10', '2015-10-29', '2015-02-16',
            '2014-10-26', '2014-10-18', '2014-08-26']
dates = [datetime.strptime(d, ""%Y-%m-%d"") for d in dates]
levels = np.tile([-5, 5, -3, 3, -1, 1],
                 int(np.ceil(len(dates)/6)))[:len(dates)]

f, ax = plt.subplots()
ax.scatter(dates, levels)
texts = []
for x, y, l in zip(dates, levels, names):
    texts.append(ax.text(x, y, l))
texts[0].get_transform().transform(texts[0].get_position())
```

**Actual outcome**

Which produces the plot as expected, but the last line gives an error that I don’t understand:

```
TypeError                                 Traceback (most recent call last)
<ipython-input-10-36886e03c6a3> in <module>
      4 for x, y, l in zip(dates, levels, names):
      5     texts.append(ax.text(x, y, l))
----> 6 texts[0].get_transform().transform(texts[0].get_position())

~/miniconda/envs/adjustText/lib/python3.7/site-packages/matplotlib/transforms.py in transform(self, values)
   1403 
   1404         # Transform the values
-> 1405         res = self.transform_affine(self.transform_non_affine(values))
   1406 
   1407         # Convert the result back to the shape of the input values.

~/miniconda/envs/adjustText/lib/python3.7/site-packages/matplotlib/transforms.py in transform_affine(self, points)
   2363     def transform_affine(self, points):
   2364         # docstring inherited
-> 2365         return self.get_affine().transform(points)
   2366 
   2367     def transform_non_affine(self, points):

~/miniconda/envs/adjustText/lib/python3.7/site-packages/matplotlib/transforms.py in transform(self, values)
   1714     def transform(self, values):
   1715         # docstring inherited
-> 1716         return self.transform_affine(values)
   1717 
   1718     def transform_affine(self, values):

~/miniconda/envs/adjustText/lib/python3.7/site-packages/matplotlib/transforms.py in transform_affine(self, points)
   1796             tpoints = affine_transform(points.data, mtx)
   1797             return np.ma.MaskedArray(tpoints, mask=np.ma.getmask(points))
-> 1798         return affine_transform(points, mtx)
   1799 
   1800     if DEBUG:

TypeError: Cannot cast array data from dtype('O') to dtype('float64') according to the rule 'safe'

```

**Expected outcome**
Transformed coordinate of the text object.

Is this a wrong way to use datetimes when plotting? Or is there a different way to use transforms when there are datetimes in play? Or is it a bug? Thanks!

**Matplotlib version**
<!--Please specify your platform and versions of the relevant libraries you are using:-->
  * Operating system: Ubuntu 20.04
  * Matplotlib version (`import matplotlib; print(matplotlib.__version__)`): 3.2.2
  * Matplotlib backend (`print(matplotlib.get_backend())`): 'module://ipykernel.pylab.backend_inline'
  * Python version: 3.7
  * Jupyter version (if applicable): Jupyter Lab 2.1.4
  * Other libraries: 

<!--Please tell us how you installed matplotlib and python e.g., from source, pip, conda-->
<!--If you installed from conda, please specify which channel you used if not the default-->

",Phlya,open,2021-01-31 14:23:06,,,,2021-01-31 18:50:28,13,Documentation,,
797528722,Improve doc of default labelpad.,"## PR Summary

## PR Checklist

<!-- Please mark any checkboxes that do not apply to this PR as [N/A]. -->

- [ ] Has pytest style unit tests (and `pytest` passes).
- [ ] Is [Flake 8](https://flake8.pycqa.org/en/latest/) compliant (run `flake8` on changed files to check).
- [ ] New features are documented, with examples if plot related.
- [ ] Documentation is sphinx and numpydoc compliant (the docs should [build](https://matplotlib.org/devel/documenting_mpl.html#building-the-docs) without error).
- [ ] Conforms to Matplotlib style conventions (install `flake8-docstrings` and run `flake8 --docstring-convention=all`).
- [ ] New features have an entry in `doc/users/next_whats_new/` (follow instructions in README.rst there).
- [ ] API changes documented in `doc/api/next_api_changes/` (follow instructions in README.rst there).

<!--
Thank you so much for your PR!  To help us review your contribution, please
consider the following points:

- A development guide is available at https://matplotlib.org/devdocs/devel/index.html.

- Help with git and github is available at
  https://matplotlib.org/devel/gitwash/development_workflow.html.

- Do not create the PR out of master, but out of a separate branch.

- The PR title should summarize the changes, for example ""Raise ValueError on
  non-numeric input to set_xlim"".  Avoid non-descriptive titles such as
  ""Addresses issue #8576"".

- The summary should provide at least 1-2 sentences describing the pull request
  in detail (Why is this change required?  What problem does it solve?) and
  link to any relevant issues.

- If you are contributing fixes to docstrings, please pay attention to
  http://matplotlib.org/devel/documenting_mpl.html#formatting.  In particular,
  note the difference between using single backquotes, double backquotes, and
  asterisks in the markup.

We understand that PRs can sometimes be overwhelming, especially as the
reviews start coming in.  Please let us know if the reviews are unclear or
the recommended next step seems overly demanding, if you would like help in
addressing a reviewer's comments, or if you have been waiting too long to hear
back on your PR.
-->
",anntzer,closed,2021-01-30 20:47:15,,2021-01-31 09:46:02,dstansby,2021-01-31 10:16:30,1,Documentation,v3.4.0,53
797517453,Support for inline labels for 2D lines,"<!--
Welcome! Thanks for thinking of a way to improve Matplotlib.


Before creating a new feature request please search the issues for relevant feature requests.
-->

### Problem

I would like to be able to use inline labels for plots instead of having the legend in a box.


<!--
Provide a clear and concise description of the problem this feature will solve. 

For example:
* I'm always frustrated when [...] because [...]
* I would like it if [...] happened when I [...] because [...]
* Here is a sample image of what I am asking for [...]
-->

### Proposed Solution
A workaround was found [here](https://stackoverflow.com/questions/16992038/inline-labels-in-matplotlib) but it's still not ideal.

![image](https://user-images.githubusercontent.com/40028739/106366558-f4222c80-633c-11eb-8ed7-bea17d301180.png)


Contour plots can handle inline labels by removing the underlying contour where the label is located. Could the same thing be done for ""normal"" plots ?

<!-- Provide a clear and concise description of a way to accomplish what you want. For example:

* Add an option so that when [...]  [...] will happen
 -->

### Additional context and prior art

<!-- Add any other context or screenshots about the feature request here. You can also include links to examples of other programs that have something similar to your request. For example:

* Another project [...] solved this by [...]
-->",RemDelaporteMathurin,open,2021-01-30 19:51:48,,,,2021-02-02 07:34:28,16,New feature,,
797470441,TypeError constructor returned NULL in wayland session,"<!--To help us understand and resolve your issue, please fill out the form to the best of your ability.-->
<!--You can feel free to delete the sections that do not apply.-->

### Bug report

**Bug summary**

When trying to run matplotlib pyplot, and setting the backend to gtk3agg or gtk3cairo, the following error is encountered in wayland session. The same code works fine in Xorg, or using Qt backend.

```
Gdk-Message: 12:41:05.918: Unable to load fleur from the cursor theme
Traceback (most recent call last):
  File ""/usr/lib/python3.9/site-packages/matplotlib/backends/backend_gtk3.py"", line 40, in <module>
    cursors.MOVE:          Gdk.Cursor.new(Gdk.CursorType.FLEUR),
TypeError: constructor returned NULL
```

**Code for reproduction**



```python
import matplotlib.pyplot as plt
fig, ax0 = plt.subplots()
ax0.plot(1,1)
plt.show()
```

**Actual outcome**

<!--The output produced by the above code, which may be a screenshot, console output, etc.-->

```
Traceback (most recent call last):
  File ""/usr/lib/python3.9/site-packages/matplotlib/backends/backend_gtk3.py"", line 40, in <module>
    cursors.MOVE:          Gdk.Cursor.new(Gdk.CursorType.FLEUR),
TypeError: constructor returned NULL

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File ""/home/yl398/test.py"", line 1, in <module>
    import matplotlib.pyplot as plt
  File ""/usr/lib/python3.9/site-packages/matplotlib/pyplot.py"", line 2336, in <module>
    switch_backend(rcParams[""backend""])
  File ""/usr/lib/python3.9/site-packages/matplotlib/pyplot.py"", line 276, in switch_backend
    class backend_mod(matplotlib.backend_bases._Backend):
  File ""/usr/lib/python3.9/site-packages/matplotlib/pyplot.py"", line 277, in backend_mod
    locals().update(vars(importlib.import_module(backend_name)))
  File ""/usr/lib/python3.9/importlib/__init__.py"", line 127, in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
  File ""/usr/lib/python3.9/site-packages/matplotlib/backends/backend_gtk3agg.py"", line 8, in <module>
    from . import backend_agg, backend_gtk3
  File ""/usr/lib/python3.9/site-packages/matplotlib/backends/backend_gtk3.py"", line 49, in <module>
    raise ImportError(exc) from exc
ImportError: constructor returned NULL
```

**Expected outcome**

No error should be encountered and the figure should show on the screen

**Matplotlib version**
<!--Please specify your platform and versions of the relevant libraries you are using:-->
  * Operating system: Manjaro Linux 20.2.1
  * Matplotlib version (`import matplotlib; print(matplotlib.__version__)`): 3.3.3
  * Matplotlib backend (`print(matplotlib.get_backend())`): GTK3AGG or GTK3Cairo
  * Python version: 3.9.1
  * Jupyter version (if applicable): 
  * Other libraries: 

<!--Please tell us how you installed matplotlib and python e.g., from source, pip, conda-->
<!--If you installed from conda, please specify which channel you used if not the default-->

Installed matplotlib from default manjaro/arch linux repository.",liuyun88,closed,2021-01-30 16:23:38,,2021-02-02 21:59:27,anntzer,2021-02-02 22:23:44,4,"GUI/gtk, status: confirmed bug, status: has patch",v3.4.0,53
797408826,Add figureoptions to the Tk backend,"### Problem
It would be great if there was a dialog in the Tk backend similar to the figureoptions module of the Qt backend.
This would make it really easy to configure plots when embedding in Tk GUIs.

### Proposed Solution
In `backend/qt_editor/figureoptions.py` most of the work is already done.
One would have to ""only"" implement a class equivalent to FormDialog in `backend/qt_editor/_formlayout.py` and the needed widgets.
Is anything in this direction planned?
I am willing to contribute to this feature.",BenediktO,open,2021-01-30 12:36:07,,,,2021-02-02 10:35:02,2,"GUI/tk, New feature",,
797400976,matplotlib.dates file problem,"<!--To help us understand and resolve your issue, please fill out the form to the best of your ability.-->
<!--You can feel free to delete the sections that do not apply.-->

### Bug report
when i run django,it reported
**Bug summary**
D:\software\Anaconda\envs\pytorch_gpu\python.exe E:/python-project/web/Web(2)111/manage.py runserver 127.0.0.1:8000
Performing system checks...

Watching for file changes with StatReloader
Exception in thread django-main-thread:
Traceback (most recent call last):
  File ""D:\software\Anaconda\envs\pytorch_gpu\lib\threading.py"", line 917, in _bootstrap_inner
    self.run()
  File ""D:\software\Anaconda\envs\pytorch_gpu\lib\threading.py"", line 865, in run
    self._target(*self._args, **self._kwargs)
  File ""D:\software\Anaconda\envs\pytorch_gpu\lib\site-packages\django\utils\autoreload.py"", line 53, in wrapper
    fn(*args, **kwargs)
  File ""D:\software\Anaconda\envs\pytorch_gpu\lib\site-packages\django\core\management\commands\runserver.py"", line 117, in inner_run
    self.check(display_num_errors=True)
  File ""D:\software\Anaconda\envs\pytorch_gpu\lib\site-packages\django\core\management\base.py"", line 395, in check
    include_deployment_checks=include_deployment_checks,
  File ""D:\software\Anaconda\envs\pytorch_gpu\lib\site-packages\django\core\management\base.py"", line 382, in _run_checks
    return checks.run_checks(**kwargs)
  File ""D:\software\Anaconda\envs\pytorch_gpu\lib\site-packages\django\core\checks\registry.py"", line 72, in run_checks
    new_errors = check(app_configs=app_configs)
  File ""D:\software\Anaconda\envs\pytorch_gpu\lib\site-packages\django\core\checks\urls.py"", line 13, in check_url_config
    return check_resolver(resolver)
  File ""D:\software\Anaconda\envs\pytorch_gpu\lib\site-packages\django\core\checks\urls.py"", line 23, in check_resolver
    return check_method()
  File ""D:\software\Anaconda\envs\pytorch_gpu\lib\site-packages\django\urls\resolvers.py"", line 407, in check
    for pattern in self.url_patterns:
  File ""D:\software\Anaconda\envs\pytorch_gpu\lib\site-packages\django\utils\functional.py"", line 48, in __get__
    res = instance.__dict__[self.name] = self.func(instance)
  File ""D:\software\Anaconda\envs\pytorch_gpu\lib\site-packages\django\urls\resolvers.py"", line 588, in url_patterns
    patterns = getattr(self.urlconf_module, ""urlpatterns"", self.urlconf_module)
  File ""D:\software\Anaconda\envs\pytorch_gpu\lib\site-packages\django\utils\functional.py"", line 48, in __get__
    res = instance.__dict__[self.name] = self.func(instance)
  File ""D:\software\Anaconda\envs\pytorch_gpu\lib\site-packages\django\urls\resolvers.py"", line 581, in urlconf_module
    return import_module(self.urlconf_name)
  File ""D:\software\Anaconda\envs\pytorch_gpu\lib\importlib\__init__.py"", line 127, in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
  File ""<frozen importlib._bootstrap>"", line 1006, in _gcd_import
  File ""<frozen importlib._bootstrap>"", line 983, in _find_and_load
  File ""<frozen importlib._bootstrap>"", line 967, in _find_and_load_unlocked
  File ""<frozen importlib._bootstrap>"", line 677, in _load_unlocked
  File ""<frozen importlib._bootstrap_external>"", line 728, in exec_module
  File ""<frozen importlib._bootstrap>"", line 219, in _call_with_frames_removed
  File ""E:\python-project\web\Web(2)111\Web\urls.py"", line 34, in <module>
    url(r""^houtai/"", include(""apps.houtai.urls"")),
  File ""D:\software\Anaconda\envs\pytorch_gpu\lib\site-packages\django\urls\conf.py"", line 34, in include
    urlconf_module = import_module(urlconf_module)
  File ""D:\software\Anaconda\envs\pytorch_gpu\lib\importlib\__init__.py"", line 127, in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
  File ""<frozen importlib._bootstrap>"", line 1006, in _gcd_import
  File ""<frozen importlib._bootstrap>"", line 983, in _find_and_load
  File ""<frozen importlib._bootstrap>"", line 967, in _find_and_load_unlocked
  File ""<frozen importlib._bootstrap>"", line 677, in _load_unlocked
  File ""<frozen importlib._bootstrap_external>"", line 728, in exec_module
  File ""<frozen importlib._bootstrap>"", line 219, in _call_with_frames_removed
  File ""E:\python-project\web\Web(2)111\apps\houtai\urls.py"", line 16, in <module>
    from apps.houtai.views import *
  File ""E:\python-project\web\Web(2)111\apps\houtai\views.py"", line 7, in <module>
    from cells_cut.image_cut import *
  File ""E:\python-project\web\Web(2)111\cells_cut\image_cut.py"", line 2, in <module>
    from pylab import *
  File ""C:\Users\ASUS\AppData\Roaming\Python\Python37\site-packages\pylab.py"", line 1, in <module>
    from matplotlib.pylab import *
  File ""C:\Users\ASUS\AppData\Roaming\Python\Python37\site-packages\matplotlib\pylab.py"", line 218, in <module>
    from matplotlib.dates import (
ImportError: cannot import name 'strpdate2num' from 'matplotlib.dates' (C:\Users\ASUS\AppData\Roaming\Python\Python37\site-packages\matplotlib\dates.py)


<!--A short 1-2 sentences that succinctly describes the bug-->

**Code for reproduction**

perhaps it because environment

<!--A minimum code snippet required to reproduce the bug.
Please make sure to minimize the number of dependencies required, and provide
any necessary plotted data.
Avoid using threads, as Matplotlib is (explicitly) not thread-safe.-->

```python
# Paste your code here
#
#
```

**Actual outcome**

<!--The output produced by the above code, which may be a screenshot, console output, etc.-->

```
# If applicable, paste the console output here
#
#
```

**Expected outcome**

<!--A description of the expected outcome from the code snippet-->
<!--If this used to work in an earlier version of Matplotlib, please note the version it used to work on-->

**Matplotlib version**
<!--Please specify your platform and versions of the relevant libraries you are using:-->
  * Operating system: 
  * Matplotlib version (`import matplotlib; print(matplotlib.__version__)`): 
  * Matplotlib backend (`print(matplotlib.get_backend())`): 
  * Python version: 
  * Jupyter version (if applicable): 
  * Other libraries: 

<!--Please tell us how you installed matplotlib and python e.g., from source, pip, conda-->
<!--If you installed from conda, please specify which channel you used if not the default-->

",yueqianhaobo,closed,2021-01-30 11:53:19,,2021-01-30 16:06:58,jklymak,2021-01-30 16:07:07,1,Community support,,
797222964,Build aarch64 wheels,"From v1.8.0, cibuildwheel allows to build non-native architectures using CIBW_ARCH_LINUX. See https://cibuildwheel.readthedocs.io/en/stable/options/#archs for more details.

Also, use numpy v1.19. aarch64 wheels are available for it. Cuts down on time spent building aarch64 numpy wheels under emulation.

## PR Summary
Use cibuildwheel option to build aarch64 wheels.

## PR Checklist

<!-- Please mark any checkboxes that do not apply to this PR as [N/A]. -->

- [ ] Has pytest style unit tests (and `pytest` passes).
- [ ] Is [Flake 8](https://flake8.pycqa.org/en/latest/) compliant (run `flake8` on changed files to check).
- [ ] New features are documented, with examples if plot related.
- [ ] Documentation is sphinx and numpydoc compliant (the docs should [build](https://matplotlib.org/devel/documenting_mpl.html#building-the-docs) without error).
- [ ] Conforms to Matplotlib style conventions (install `flake8-docstrings` and run `flake8 --docstring-convention=all`).
- [ ] New features have an entry in `doc/users/next_whats_new/` (follow instructions in README.rst there).
- [ ] API changes documented in `doc/api/next_api_changes/` (follow instructions in README.rst there).

<!--
Thank you so much for your PR!  To help us review your contribution, please
consider the following points:

- A development guide is available at https://matplotlib.org/devdocs/devel/index.html.

- Help with git and github is available at
  https://matplotlib.org/devel/gitwash/development_workflow.html.

- Do not create the PR out of master, but out of a separate branch.

- The PR title should summarize the changes, for example ""Raise ValueError on
  non-numeric input to set_xlim"".  Avoid non-descriptive titles such as
  ""Addresses issue #8576"".

- The summary should provide at least 1-2 sentences describing the pull request
  in detail (Why is this change required?  What problem does it solve?) and
  link to any relevant issues.

- If you are contributing fixes to docstrings, please pay attention to
  http://matplotlib.org/devel/documenting_mpl.html#formatting.  In particular,
  note the difference between using single backquotes, double backquotes, and
  asterisks in the markup.

We understand that PRs can sometimes be overwhelming, especially as the
reviews start coming in.  Please let us know if the reviews are unclear or
the recommended next step seems overly demanding, if you would like help in
addressing a reviewer's comments, or if you have been waiting too long to hear
back on your PR.
-->
",janaknat,closed,2021-01-29 21:37:36,,2021-03-10 01:27:12,tacaswell,2021-03-11 03:00:08,34,"Build, Release critical",v3.4.0,53
797202737,Simplify axisartist line clipping.,"axisartist.clip_path is currently used to clip the paths for curvilinear
grid lines and compute the angles at which the ticks are drawn.

We don't actually need to clip the lines (because we can just set a
clipbox on the gridline instead); actually we just need to find the
crossings positions and angles, which is much simpler, and now
encapsulated in the `_find_line_box_crossings` function.  Therefore,
deprecate the whole clip_path module.

The baseline images change slightly, mostly because we don't clip the
path ourselves anymore, but let the renderer do that; also because
floating point slop changes for ticks exactly at the edges.

## PR Summary

## PR Checklist

<!-- Please mark any checkboxes that do not apply to this PR as [N/A]. -->

- [ ] Has pytest style unit tests (and `pytest` passes).
- [ ] Is [Flake 8](https://flake8.pycqa.org/en/latest/) compliant (run `flake8` on changed files to check).
- [ ] New features are documented, with examples if plot related.
- [ ] Documentation is sphinx and numpydoc compliant (the docs should [build](https://matplotlib.org/devel/documenting_mpl.html#building-the-docs) without error).
- [ ] Conforms to Matplotlib style conventions (install `flake8-docstrings` and run `flake8 --docstring-convention=all`).
- [ ] New features have an entry in `doc/users/next_whats_new/` (follow instructions in README.rst there).
- [ ] API changes documented in `doc/api/next_api_changes/` (follow instructions in README.rst there).

<!--
Thank you so much for your PR!  To help us review your contribution, please
consider the following points:

- A development guide is available at https://matplotlib.org/devdocs/devel/index.html.

- Help with git and github is available at
  https://matplotlib.org/devel/gitwash/development_workflow.html.

- Do not create the PR out of master, but out of a separate branch.

- The PR title should summarize the changes, for example ""Raise ValueError on
  non-numeric input to set_xlim"".  Avoid non-descriptive titles such as
  ""Addresses issue #8576"".

- The summary should provide at least 1-2 sentences describing the pull request
  in detail (Why is this change required?  What problem does it solve?) and
  link to any relevant issues.

- If you are contributing fixes to docstrings, please pay attention to
  http://matplotlib.org/devel/documenting_mpl.html#formatting.  In particular,
  note the difference between using single backquotes, double backquotes, and
  asterisks in the markup.

We understand that PRs can sometimes be overwhelming, especially as the
reviews start coming in.  Please let us know if the reviews are unclear or
the recommended next step seems overly demanding, if you would like help in
addressing a reviewer's comments, or if you have been waiting too long to hear
back on your PR.
-->
",anntzer,open,2021-01-29 20:59:24,,,,2021-01-30 16:04:41,0,"Maintenance, topic: mpl_toolkit",v3.5.0,59
796761234,Fix tk event coordinates in the presence of scrollbars.,"## PR Summary

Closes https://github.com/matplotlib/matplotlib/issues/17584 (well, perhaps not https://github.com/matplotlib/matplotlib/issues/17584#issuecomment-640607651 but that seems to be a separate point which I didn't fully get...)

## PR Checklist

<!-- Please mark any checkboxes that do not apply to this PR as [N/A]. -->

- [ ] Has pytest style unit tests (and `pytest` passes).
- [ ] Is [Flake 8](https://flake8.pycqa.org/en/latest/) compliant (run `flake8` on changed files to check).
- [ ] New features are documented, with examples if plot related.
- [ ] Documentation is sphinx and numpydoc compliant (the docs should [build](https://matplotlib.org/devel/documenting_mpl.html#building-the-docs) without error).
- [ ] Conforms to Matplotlib style conventions (install `flake8-docstrings` and run `flake8 --docstring-convention=all`).
- [ ] New features have an entry in `doc/users/next_whats_new/` (follow instructions in README.rst there).
- [ ] API changes documented in `doc/api/next_api_changes/` (follow instructions in README.rst there).

<!--
Thank you so much for your PR!  To help us review your contribution, please
consider the following points:

- A development guide is available at https://matplotlib.org/devdocs/devel/index.html.

- Help with git and github is available at
  https://matplotlib.org/devel/gitwash/development_workflow.html.

- Do not create the PR out of master, but out of a separate branch.

- The PR title should summarize the changes, for example ""Raise ValueError on
  non-numeric input to set_xlim"".  Avoid non-descriptive titles such as
  ""Addresses issue #8576"".

- The summary should provide at least 1-2 sentences describing the pull request
  in detail (Why is this change required?  What problem does it solve?) and
  link to any relevant issues.

- If you are contributing fixes to docstrings, please pay attention to
  http://matplotlib.org/devel/documenting_mpl.html#formatting.  In particular,
  note the difference between using single backquotes, double backquotes, and
  asterisks in the markup.

We understand that PRs can sometimes be overwhelming, especially as the
reviews start coming in.  Please let us know if the reviews are unclear or
the recommended next step seems overly demanding, if you would like help in
addressing a reviewer's comments, or if you have been waiting too long to hear
back on your PR.
-->
",anntzer,closed,2021-01-29 10:22:47,,2021-04-01 04:04:49,QuLogic,2021-04-01 06:03:57,0,GUI/tk,v3.5.0,59
796644758,Fix empty Poly3DCollections,"## PR Summary

This came from testing #19363; it was broken for 3.3.0, but we aren't planning new releases there.

## PR Checklist

- [x] Has pytest style unit tests (and `pytest` passes).
- [x] Is [Flake 8](https://flake8.pycqa.org/en/latest/) compliant (run `flake8` on changed files to check).
- [n/a] New features are documented, with examples if plot related.
- [n/a] Documentation is sphinx and numpydoc compliant (the docs should [build](https://matplotlib.org/devel/documenting_mpl.html#building-the-docs) without error).
- [x] Conforms to Matplotlib style conventions (install `flake8-docstrings` and run `flake8 --docstring-convention=all`).
- [n/a] New features have an entry in `doc/users/next_whats_new/` (follow instructions in README.rst there).
- [n/a] API changes documented in `doc/api/next_api_changes/` (follow instructions in README.rst there).",QuLogic,closed,2021-01-29 07:15:36,,2021-02-03 20:26:43,tacaswell,2021-02-03 20:27:17,0,topic: mplot3d,v3.4.0,53
796597808,Fix set_3d_properties shape error.,"File ""xxxxxxxxxx/site-packages/mpl_toolkits/mplot3d/art3d.py"", line 143, in set_3d_properties
zs = np.broadcast_to(zs, xs.shape)
AttributeError: 'list' object has no attribute 'shape'

## PR Summary

Fix the error in set_3d_properties where XS is of type list, while list has no parameter of shape. After this patch, 3D animation can be created and used normally.

## PR Checklist

<!-- Please mark any checkboxes that do not apply to this PR as [N/A]. -->

- [ ] Has pytest style unit tests (and `pytest` passes).
- [ ] Is [Flake 8](https://flake8.pycqa.org/en/latest/) compliant (run `flake8` on changed files to check).
- [ ] New features are documented, with examples if plot related.
- [ ] Documentation is sphinx and numpydoc compliant (the docs should [build](https://matplotlib.org/devel/documenting_mpl.html#building-the-docs) without error).
- [ ] Conforms to Matplotlib style conventions (install `flake8-docstrings` and run `flake8 --docstring-convention=all`).
- [ ] New features have an entry in `doc/users/next_whats_new/` (follow instructions in README.rst there).
- [ ] API changes documented in `doc/api/next_api_changes/` (follow instructions in README.rst there).

<!--
Thank you so much for your PR!  To help us review your contribution, please
consider the following points:

- A development guide is available at https://matplotlib.org/devdocs/devel/index.html.

- Help with git and github is available at
  https://matplotlib.org/devel/gitwash/development_workflow.html.

- Do not create the PR out of master, but out of a separate branch.

- The PR title should summarize the changes, for example ""Raise ValueError on
  non-numeric input to set_xlim"".  Avoid non-descriptive titles such as
  ""Addresses issue #8576"".

- The summary should provide at least 1-2 sentences describing the pull request
  in detail (Why is this change required?  What problem does it solve?) and
  link to any relevant issues.

- If you are contributing fixes to docstrings, please pay attention to
  http://matplotlib.org/devel/documenting_mpl.html#formatting.  In particular,
  note the difference between using single backquotes, double backquotes, and
  asterisks in the markup.

We understand that PRs can sometimes be overwhelming, especially as the
reviews start coming in.  Please let us know if the reviews are unclear or
the recommended next step seems overly demanding, if you would like help in
addressing a reviewer's comments, or if you have been waiting too long to hear
back on your PR.
-->
",GuaiYiHu,closed,2021-01-29 05:44:32,,2021-01-29 15:50:57,GuaiYiHu,2021-01-29 15:50:57,6,"status: needs clarification, topic: mplot3d",,
796514070,ellipse size in a legend,"I have to plot diffusivity (or tidal) ellipses using different scales and add a proper legend to show their scales like this figure:
![image](https://user-images.githubusercontent.com/9312831/106221417-8bda2a80-6218-11eb-8437-135794386014.png)
I have struggled quite a time to do this and found that the scales of the plot and legend are not the same.  For vector, there is a [`ax.quiverkey` function](https://matplotlib.org/3.3.3/gallery/images_contours_and_fields/quiver_demo.html#sphx-glr-gallery-images-contours-and-fields-quiver-demo-py).  I just want to know if there is a ellipse equivalent to that so I can do this in a easy and clean way.  Thanks.",miniufo,open,2021-01-29 02:02:19,,,miniufo,2021-01-29 14:57:35,3,"Community support, New feature",,
796480590,CI: remove win prerelease azure + add py39,"## PR Summary

Tweaks what jobs we run on azure.",tacaswell,closed,2021-01-29 00:33:07,,2021-02-04 10:38:05,dstansby,2021-02-04 10:38:05,2,topic: testing,v3.4.0,53
796472989,wx: Use integers in more places,"## PR Summary

Alas, my fix in #19052 was incomplete, or something changed in the meantime. There are a few more places that wx does not accept floats (see commit messages for details). This only appears to happen with Python 3.10, but looking at the C++ wx side, there are no floating point overloads, so I'm not sure why it ever worked.

## PR Checklist

- [x] Has pytest style unit tests (and `pytest` passes).
- [x] Is [Flake 8](https://flake8.pycqa.org/en/latest/) compliant (run `flake8` on changed files to check).
- [n/a] New features are documented, with examples if plot related.
- [n/a] Documentation is sphinx and numpydoc compliant (the docs should [build](https://matplotlib.org/devel/documenting_mpl.html#building-the-docs) without error).
- [x] Conforms to Matplotlib style conventions (install `flake8-docstrings` and run `flake8 --docstring-convention=all`).
- [n/a] New features have an entry in `doc/users/next_whats_new/` (follow instructions in README.rst there).
- [n/a] API changes documented in `doc/api/next_api_changes/` (follow instructions in README.rst there).",QuLogic,closed,2021-01-29 00:13:58,,2021-01-29 12:55:53,anntzer,2021-01-31 10:09:29,0,"GUI/wx, Release critical",v3.4.0,53
796405481,Don't allow pyzmq 22.0.0 on AppVeyor.,"## PR Summary

This version is broken on Windows:
https://github.com/zeromq/pyzmq/issues/1496.

## PR Checklist

- [n/a] Has pytest style unit tests (and `pytest` passes).
- [n/a] Is [Flake 8](https://flake8.pycqa.org/en/latest/) compliant (run `flake8` on changed files to check).
- [n/a] New features are documented, with examples if plot related.
- [n/a] Documentation is sphinx and numpydoc compliant (the docs should [build](https://matplotlib.org/devel/documenting_mpl.html#building-the-docs) without error).
- [x] Conforms to Matplotlib style conventions (install `flake8-docstrings` and run `flake8 --docstring-convention=all`).
- [n/a] New features have an entry in `doc/users/next_whats_new/` (follow instructions in README.rst there).
- [n/a] API changes documented in `doc/api/next_api_changes/` (follow instructions in README.rst there).",QuLogic,closed,2021-01-28 21:49:57,,2021-01-29 00:28:21,tacaswell,2021-01-29 00:38:25,0,"OS/Microsoft, topic: testing",v3.4.0,53
796233786,\bf\it in mathtext,"<!--
Welcome! Thanks for thinking of a way to improve Matplotlib.


Before creating a new feature request please search the issues for relevant feature requests.
-->

### Problem
`\bf` and `\it` are both supported in mathtext but if used together, only the inner style is applied.
<!--
Provide a clear and concise description of the problem this feature will solve. 

For example:
* I'm always frustrated when [...] because [...]
* I would like it if [...] happened when I [...] because [...]
* Here is a sample image of what I am asking for [...]
-->

### Proposed Solution

Apply both styles if both `\bf` and `\it` are used together. Alternatively, a new `\bfit` command could be introduced which enables text to be set in bold and italic.
<!-- Provide a clear and concise description of a way to accomplish what you want. For example:

* Add an option so that when [...]  [...] will happen
 -->

### Additional context and prior art

This would be very useful when setting the experiment label in figures for the ATLAS experiment, which requires the name of the experiment in bold-italic followed by text describing the status of that figure in ordinary text. Additional text below this label communicates various experimental conditions that are often useful in interpreting the figure. In the absence of rich text functionality, mathtext (or `usetex`) is the only way to do this.

I currently handle this in [beojan/atlas-mpl](github.com/beojan/atlas-mpl) by using `usetex`. However, this requires the user to have a full LaTeX installation available, along with the TeX Gyre fonts in that installation in order to meet the font family requirements of the experiment. 

@andrzejnovak handles the same issue in [scikit-hep/mplhep](github.com/scikit-hep/mplhep) by setting the various parts of the label separately, heuristically calculating the offsets needed. This is suboptimal compared to using the text layout algorithms built into the Matplotlib text engine.

<!-- Add any other context or screenshots about the feature request here. You can also include links to examples of other programs that have something similar to your request. For example:

* Another project [...] solved this by [...]
-->",beojan,open,2021-01-28 18:07:44,,,,2021-01-28 18:36:56,1,"New feature, topic: text/mathtext",,
796196591,New event examples showing z-value at cursor position.,"New examples using `motion_notify_event` to show the z-value at the mouse cursor position.  Two examples, one of quadrilateral grids using `contourf` and the other of triangle grids using `tricontourf`.

The intention is to demonstrate how to solve problems like issue #14804 without adding such functionality for all contour/tricontour/pcolor like functions, which will detrimentally affect performance for many users.",ianthomas23,open,2021-01-28 17:14:29,,,,2021-02-09 10:52:46,2,,,
796068986,Packrat caching in _mathtext.py is enabled globally for pyparsing,"### Bug report

**Bug summary**

Enabling packrat caching for the mathtext pyparsing parser ([here](https://github.com/matplotlib/matplotlib/blob/dd249744270f6abe3f540f81b7a77c0cb728ddbb/lib/matplotlib/_mathtext.py#L29)) does so globally, for any other pyparsing parser. In my application packrat caching slows parsing down by a factor of 2, and so does importing `matplotlib`.

**Code for reproduction**

```python
import pyparsing as pp
import timeit

parser = pp.OneOrMore(pp.Word(pp.printables))

text = '''Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do
eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim
veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo
consequat.'''

print('before importing matplotlib: {}'
      .format(timeit.timeit(lambda: parser.parseString(text), number=1000)))

import matplotlib.pyplot

print('after importing matplotlib: {}'
      .format(timeit.timeit(lambda: parser.parseString(text), number=1000)))
```

**Actual outcome**

```shell
$ python3 pp.py
before importing matplotlib: 0.2993983749765903
after importing matplotlib: 0.5376854920759797
```

**Expected outcome**

The timing should be comparable between the two code versions. I would appreciate if matplotlib provided a configuration option to turn on/off packrat caching for the mathtext parser.

**Matplotlib version**

  * Operating system: CentOS 7 and Ubuntu 16
  * Matplotlib version: 3.3.4
  * Matplotlib backend: agg
  * Python version: 3.6.8
  * Other libraries: obviously `pyparsing`

I installed matplotlib using `pip install matplotlib`.",arekfu,open,2021-01-28 14:42:38,,,,2021-01-29 01:14:40,1,"third-party integration, topic: text/mathtext",,
795694403,Doc: Minor formatting,"Single colon make the full block to be seen as a comment for sphinx.

And make proper underline length.

",Carreau,closed,2021-01-28 05:53:12,,2021-01-28 09:17:04,anntzer,2021-01-28 09:17:04,0,Documentation,v3.4.0,53
795657608,Temporarily switch intersphinx to latest pytest.,"## PR Summary

The incorrect reference is fixed in pytest git, but won't be in a released version for some time.
https://github.com/pytest-dev/pytest/pull/8280#issuecomment-768745131

Closes  #19366.

## PR Checklist

- [x] Has pytest style unit tests (and `pytest` passes).
- [x] Is [Flake 8](https://flake8.pycqa.org/en/latest/) compliant (run `flake8` on changed files to check).
- [n/a] New features are documented, with examples if plot related.
- [x] Documentation is sphinx and numpydoc compliant (the docs should [build](https://matplotlib.org/devel/documenting_mpl.html#building-the-docs) without error).
- [x] Conforms to Matplotlib style conventions (install `flake8-docstrings` and run `flake8 --docstring-convention=all`).
- [n/a] New features have an entry in `doc/users/next_whats_new/` (follow instructions in README.rst there).
- [n/a] API changes documented in `doc/api/next_api_changes/` (follow instructions in README.rst there).",QuLogic,closed,2021-01-28 04:30:02,,2021-01-28 17:59:13,anntzer,2021-01-28 20:55:33,0,Documentation,v3.4.0,53
795653683,roadmap docs landing page,"<!--To help us understand and resolve your issue, please fill out the form to the best of your ability.-->
<!--You can feel free to delete the sections that do not apply.-->

### Problem
The landing page for the matplotlib documentation link https://matplotlib.org/devdocs/contents.html is simply a table of contents, which can be hard to navigate for someone unfamiliar with matplotlib. 
![image](https://user-images.githubusercontent.com/1300499/106089175-6bfe1600-60f5-11eb-853f-ce08ba1d92e0.png)


### Suggested Improvement
Rework this page so there's some roadmapping/guidance on what the different parts of the documentation are. For example, the Pandas docs (https://pandas.pydata.org/docs/):
![image](https://user-images.githubusercontent.com/1300499/106089349-cb5c2600-60f5-11eb-8759-59e2b6b8f05f.png)
Or the numpy docs which require less HTML/CSS/work but still has more guidance (https://numpy.org/doc/stable/):
![image](https://user-images.githubusercontent.com/1300499/106089546-20983780-60f6-11eb-9ba9-60d144c9b6a8.png)
",story645,open,2021-01-28 04:20:08,,,,2021-02-21 00:41:43,38,Documentation,,
795652226,Fix CSS table header layout,"## PR Summary
Removed the width parameter in mpl.css files and added some CSS to prevent the legend loc table header wrap.
Closes #18962 

## PR Checklist

<!-- Please mark any checkboxes that do not apply to this PR as [N/A]. -->

- [x] Has pytest style unit tests (and `pytest` passes).
- [x] Is [Flake 8](https://flake8.pycqa.org/en/latest/) compliant (run `flake8` on changed files to check).
- [x] New features are documented, with examples if plot related.
- [x] Documentation is sphinx and numpydoc compliant (the docs should [build](https://matplotlib.org/devel/documenting_mpl.html#building-the-docs) without error).
- [x] Conforms to Matplotlib style conventions (install `flake8-docstrings` and run `flake8 --docstring-convention=all`).
- [x] New features have an entry in `doc/users/next_whats_new/` (follow instructions in README.rst there).
- [x] API changes documented in `doc/api/next_api_changes/` (follow instructions in README.rst there).

<!--
Thank you so much for your PR!  To help us review your contribution, please
consider the following points:

- A development guide is available at https://matplotlib.org/devdocs/devel/index.html.

- Help with git and github is available at
  https://matplotlib.org/devel/gitwash/development_workflow.html.

- Do not create the PR out of master, but out of a separate branch.

- The PR title should summarize the changes, for example ""Raise ValueError on
  non-numeric input to set_xlim"".  Avoid non-descriptive titles such as
  ""Addresses issue #8576"".

- The summary should provide at least 1-2 sentences describing the pull request
  in detail (Why is this change required?  What problem does it solve?) and
  link to any relevant issues.

- If you are contributing fixes to docstrings, please pay attention to
  http://matplotlib.org/devel/documenting_mpl.html#formatting.  In particular,
  note the difference between using single backquotes, double backquotes, and
  asterisks in the markup.

We understand that PRs can sometimes be overwhelming, especially as the
reviews start coming in.  Please let us know if the reviews are unclear or
the recommended next step seems overly demanding, if you would like help in
addressing a reviewer's comments, or if you have been waiting too long to hear
back on your PR.
-->
",rajpratyush,closed,2021-01-28 04:16:31,,2021-02-01 22:46:12,timhoffm,2021-02-02 02:53:12,4,Documentation,v3.4.0,53
795600385,Backport PR #19238 on branch v3.3.x (Fix build with LTO disabled in environment),Backport PR #19238: Fix build with LTO disabled in environment,meeseeksmachine,closed,2021-01-28 02:01:57,,2021-01-28 04:34:27,QuLogic,2021-01-28 04:34:36,0,Build,v3.3.4,60
795592397,Inconsistent default color cycle behavior in ax.bar and ax.fill_between ,"<!--To help us understand and resolve your issue, please fill out the form to the best of your ability.-->
<!--You can feel free to delete the sections that do not apply.-->

### Bug report

**Bug summary**

`ax.bar` and `ax.fill_between` are inconsistent in terms of whether they advance the color cycle if `facecolor` but not `color` are specified.

This is a pretty minor bug but it drove me nuts tracking it down so I figured I'd report it.

**Code for reproduction**

<!--A minimum code snippet required to reproduce the bug.
Please make sure to minimize the number of dependencies required, and provide
any necessary plotted data.
Avoid using threads, as Matplotlib is (explicitly) not thread-safe.-->

```python
import matplotlib.pyplot as plt

x1, y1 = [0, 1], [1, 2]
x2, y2 = [2, 3], [1, 2]

ax1 = plt.figure().subplots()
ax1.bar(x1, y1, facecolor="".5"")
ax1.bar(x2, y2)

ax2 = plt.figure().subplots()
ax2.fill_between(x1, y1, facecolor="".5"")
ax2.fill_between(x2, y2)
```

**Actual outcome**

![image](https://user-images.githubusercontent.com/315810/106077452-8e853480-60df-11eb-924b-e9665a7ab389.png)
![image](https://user-images.githubusercontent.com/315810/106077505-abba0300-60df-11eb-9955-ac3620669e81.png)

**Expected outcome**

I'd expect the second artist(s) to have the same color in the two plots. I'm not sure which is ""correct"". Actually ... `scatter` looks like `fill_between` so I guess `bar` is the odd-one-out here.

**Matplotlib version**
<!--Please specify your platform and versions of the relevant libraries you are using:-->
  * Operating system: macos
  * Matplotlib version (`import matplotlib; print(matplotlib.__version__)`):  3.3.2
  * Matplotlib backend (`print(matplotlib.get_backend())`): pylab inline
  * Python version:  3.8",mwaskom,open,2021-01-28 01:40:39,,,,2021-01-28 14:10:59,6,,v3.5.0,59
795512679,Some really basic curve fitting,"<!--
Welcome! Thanks for thinking of a way to improve Matplotlib.


Before creating a new feature request please search the issues for relevant feature requests.
-->

### Problem

<!--
Provide a clear and concise description of the problem this feature will solve. 

For example:
* I'm always frustrated when [...] because [...]
* I would like it if [...] happened when I [...] because [...]
* Here is a sample image of what I am asking for [...]
-->
I would like it if I were able to set some really basic curve fitting for a plot without having to rely on other packages and complex solutions to smooth out curve data. Its not the most useful feature data analysis wise, but its much more pleasant to look at to see a general smooth trend rather than always just having the straight lines between points.

### Proposed Solution

<!-- Provide a clear and concise description of a way to accomplish what you want. For example:

* Add an option so that when [...]  [...] will happen
 -->

Add an option to plotting to customize the amount of smoothness of the curve. 0 smoothness being what plot already does by just connecting the dots, and increasing values of smoothness increase the amount of smoothing done to the curve.

### Additional context and prior art

<!-- Add any other context or screenshots about the feature request here. You can also include links to examples of other programs that have something similar to your request. For example:

* Another project [...] solved this by [...]
-->

There are some close solutions but nothing is perfect. The closest I've gotten is
```
x_np = np.array(x)
y_np = np.array(y)
y_smooth = np.linspace(x_np.min(), x_np.max(), 200)
spl = make_interp_spline(x_np, y_np, k = 3)
y_smooth = spl(x_smooth)
plot(x_smooth, y_smooth)
```
where  x and y are some lists of data. This solution comes close in some cases, but it is very finicky and doesn't always work. Any proposed solution I have found, usually works about the same and isn't a perfect fix.

I know that curve fitting is a very complex problem, and I'm not looking for a perfect interpolation of data, I just want to be able to smooth out the jaggedness of a curve to show a general trend in the data for visuals sake.",K4LCIFER,closed,2021-01-27 23:04:24,,2021-01-28 00:43:48,timhoffm,2021-01-28 05:24:32,2,New feature,,
795504744,Always include sample_data in installs.,"The whole sample data folder is ~500K now, which is much less than many
compiled extension modules (backend_agg, ft2font, _image, _path, _qhull
shared objects all weight ~2-3M).  Always installing sample_data is a
step towards making Matplotlib installs more homogeneous (i.e., fewer
variants).

## PR Summary

## PR Checklist

<!-- Please mark any checkboxes that do not apply to this PR as [N/A]. -->

- [ ] Has pytest style unit tests (and `pytest` passes).
- [ ] Is [Flake 8](https://flake8.pycqa.org/en/latest/) compliant (run `flake8` on changed files to check).
- [ ] New features are documented, with examples if plot related.
- [ ] Documentation is sphinx and numpydoc compliant (the docs should [build](https://matplotlib.org/devel/documenting_mpl.html#building-the-docs) without error).
- [ ] Conforms to Matplotlib style conventions (install `flake8-docstrings` and run `flake8 --docstring-convention=all`).
- [ ] New features have an entry in `doc/users/next_whats_new/` (follow instructions in README.rst there).
- [ ] API changes documented in `doc/api/next_api_changes/` (follow instructions in README.rst there).

<!--
Thank you so much for your PR!  To help us review your contribution, please
consider the following points:

- A development guide is available at https://matplotlib.org/devdocs/devel/index.html.

- Help with git and github is available at
  https://matplotlib.org/devel/gitwash/development_workflow.html.

- Do not create the PR out of master, but out of a separate branch.

- The PR title should summarize the changes, for example ""Raise ValueError on
  non-numeric input to set_xlim"".  Avoid non-descriptive titles such as
  ""Addresses issue #8576"".

- The summary should provide at least 1-2 sentences describing the pull request
  in detail (Why is this change required?  What problem does it solve?) and
  link to any relevant issues.

- If you are contributing fixes to docstrings, please pay attention to
  http://matplotlib.org/devel/documenting_mpl.html#formatting.  In particular,
  note the difference between using single backquotes, double backquotes, and
  asterisks in the markup.

We understand that PRs can sometimes be overwhelming, especially as the
reviews start coming in.  Please let us know if the reviews are unclear or
the recommended next step seems overly demanding, if you would like help in
addressing a reviewer's comments, or if you have been waiting too long to hear
back on your PR.
-->
",anntzer,closed,2021-01-27 22:48:13,,2021-01-28 06:13:58,QuLogic,2021-01-28 08:19:11,1,Build,v3.4.0,53
795492118,Backport PR #19052 on branch v3.3.x (Always pass integers to wx.Size.),Backport PR #19052: Always pass integers to wx.Size.,meeseeksmachine,closed,2021-01-27 22:23:48,,2021-01-27 23:19:43,tacaswell,2021-01-27 23:19:43,0,,v3.3.4,60
795483767,imshow colormap axis labels not being returned if plt.show() not called inside of a function,"<!--To help us understand and resolve your issue, please fill out the form to the best of your ability.-->
<!--You can feel free to delete the sections that do not apply.-->

### Bug report

**Bug summary**

<!--A short 1-2 sentences that succinctly describes the bug-->

Say `ax` is an axis which contains an `imshow` plot and `colorbar`, which has been returned from a function. Labels for the colorbar axis are incorrect when using `ax.collections[0].colorbar.ax.get_yticklabels()` when `plt.show()` is not called from within that function. The labels are blank or in some cases just string versions of their tick value (e.g. `['0.0', '0.2', '0.5']`, even when there are words set for the labels (e.g. `['A', 'B', 'C']`).

**Code for reproduction**

<!--A minimum code snippet required to reproduce the bug.
Please make sure to minimize the number of dependencies required, and provide
any necessary plotted data.
Avoid using threads, as Matplotlib is (explicitly) not thread-safe.-->

```python
import numpy as np
import matplotlib.pyplot as plt


def cbar(show):
    fig, ax = plt.subplots(figsize=(6, 1))
    mesh = ax.pcolormesh(np.arange(100).reshape((10, 10)))
    cbar = fig.colorbar(mesh, ax=ax)
    cbar.set_ticks([0, 20, 80])
    cbar.set_ticklabels(['A', 'B', 'C'])

    if show:
        plt.show()
    plt.close()

    return ax


ax_show = cbar(True)
ax_noshow = cbar(False)
labels_show = [
    tick.get_text() for tick in
    ax_show.collections[0].colorbar.ax.get_yticklabels()
        ]
labels_noshow = [
    tick.get_text() for tick in
    ax_noshow.collections[0].colorbar.ax.get_yticklabels()
        ]

print(labels_show)
print(labels_noshow)
```

**Actual outcome**

<!--The output produced by the above code, which may be a screenshot, console output, etc.-->

![image](https://user-images.githubusercontent.com/3269734/106059665-f12ffd80-60ea-11eb-9499-3ccf5a4f89e4.png)
```python
['A', 'B', 'C']
['', '', '']
```

**Expected outcome**

<!--A description of the expected outcome from the code snippet-->
<!--If this used to work in an earlier version of Matplotlib, please note the version it used to work on-->

Both `labels_show` and `labels_noshow` should both be `['A', 'B', 'C']`

**Matplotlib version**
<!--Please specify your platform and versions of the relevant libraries you are using:-->
  * Operating system: **OSX 11.1**
  * Matplotlib version (`import matplotlib; print(matplotlib.__version__)`): **3.3.3**
  * Matplotlib backend (`print(matplotlib.get_backend())`):  `module://ipykernel.pylab.backend_inline`
  * Python version: **3.8.5 64-bit**
  * Jupyter version (if applicable): **N/A**
  * Other libraries: **numpy 1.19.4**

<!--Please tell us how you installed matplotlib and python e.g., from source, pip, conda-->
<!--If you installed from conda, please specify which channel you used if not the default-->

installed from default conda channel
",lkev,open,2021-01-27 22:09:12,,,,2021-01-31 09:50:50,7,backend/ipympl,,
795476086,v3.3.0 breaks sca(ax),"Hi,

I encountered an error calling sca(ax) together with usage of FigureCanvasTkAgg().  Following would be a simple sequence illustrating the problem.
```
 // Note that plt.gca().figure == figure
... = FigureCanvasTkAgg(figure, ...)
plt.sca(plt.gca())
```
The problem is because FigureCanvasTkAgg(...) will call FigureCanvasBase.__init__(...) which resets the manager field needed in sca().  Below are the listing showing the problem:
```
class FigureCanvasBase:
    def __init__(self, figure):
        ...
        figure.set_canvas(self)
        self.figure = figure
        **# Here it is setting canvas.manager to None!!**
        self.manager = None
        ...

def sca(ax):
    """"""
    Set the current Axes to *ax* and the current Figure to the parent of *ax*.
    """"""
    if not hasattr(ax.figure.canvas, ""manager""):
        raise ValueError(""Axes parent figure is not managed by pyplot"")
      **# !!! ax.figure.canvas.manager is None!**
    _pylab_helpers.Gcf.set_active(ax.figure.canvas.manager)
    ax.figure.sca(ax)
```

For workaround, I checked out old version of sca(ax) from 3.2.2 and it seems to be working.  On the other hand, I am not sure whether the old version is robust in v3.3.0 despite of this working situation.
```
def sca(ax):
    """"""
    Set the current Axes instance to *ax*.

    The current Figure is updated to the parent of *ax*.
    """"""
    managers = _pylab_helpers.Gcf.get_all_fig_managers()
    for m in managers:
        if ax in m.canvas.figure.axes:
            _pylab_helpers.Gcf.set_active(m)
            m.canvas.figure.sca(ax)
            return
    raise ValueError(""Axes instance argument was not found in a figure"")
```
Please check and see whether bring back of old version of sca(ax) is a correct fix of this issue.
",david-c-wong,open,2021-01-27 21:55:38,,,,2021-02-25 00:58:00,5,status: needs clarification,,
795223392,Consider using reredirects for moved pages,"<!--To help us understand and resolve your issue, please fill out the form to the best of your ability.-->
<!--You can feel free to delete the sections that do not apply.-->

### Problem

If we move a page it would be nice to set up a redirect to the current version of the page.  This Sphinx extension allows that via a simple list of redirects that get added as HTML refreshes after the rest of the build: 

https://gitlab.com/documatt/sphinx-reredirects

Note this doesn't help old versions of the docs, but does fix the problem going forward.   Would need a change to the developer guide  to describe how to add the redirect to conf.py.  

<!--
If you are referencing an existing piece of documentation or example please provide a link.

* I found [...] to be unclear because [...]
* [...] made me think that [...] when really it should be [...]
* There is no example showing how to do [...]
-->


### Suggested Improvement

<!--
If you have an idea to improve the documentation please suggest it here

* This line should be be changed to say [...]
* Include a paragraph explaining [...]
* Add a figure showing [...]
-->

**Matplotlib version**
<!--Please specify the version of matplotlib and the version of the documentation that you are using:-->
  * Operating system:
  * Matplotlib version: (`import matplotlib; print(matplotlib.__version__)`)
  * Matplotlib documentation version: (is listed under the logo)",jklymak,open,2021-01-27 15:53:42,,,,2021-01-27 15:53:42,0,Documentation,,
795175100,Modify indicate_inset default label value,"## PR Summary
This PR closes #19372 by changing the default label of inset axes to '_indicate_inset' from 'indicate_inset', which will prevent a legend entry to be inserted.

## PR Checklist

<!-- Please mark any checkboxes that do not apply to this PR as [N/A]. -->

- [x] Has pytest style unit tests (and `pytest` passes).
- [x] Is [Flake 8](https://flake8.pycqa.org/en/latest/) compliant (run `flake8` on changed files to check).
- [N/A] New features are documented, with examples if plot related.
- [N/A] Documentation is sphinx and numpydoc compliant (the docs should [build](https://matplotlib.org/devel/documenting_mpl.html#building-the-docs) without error).
- [x] Conforms to Matplotlib style conventions (install `flake8-docstrings` and run `flake8 --docstring-convention=all`).
- [N/A] New features have an entry in `doc/users/next_whats_new/` (follow instructions in README.rst there).
- [N/A] API changes documented in `doc/api/next_api_changes/` (follow instructions in README.rst there).

<!--
Thank you so much for your PR!  To help us review your contribution, please
consider the following points:

- A development guide is available at https://matplotlib.org/devdocs/devel/index.html.

- Help with git and github is available at
  https://matplotlib.org/devel/gitwash/development_workflow.html.

- Do not create the PR out of master, but out of a separate branch.

- The PR title should summarize the changes, for example ""Raise ValueError on
  non-numeric input to set_xlim"".  Avoid non-descriptive titles such as
  ""Addresses issue #8576"".

- The summary should provide at least 1-2 sentences describing the pull request
  in detail (Why is this change required?  What problem does it solve?) and
  link to any relevant issues.

- If you are contributing fixes to docstrings, please pay attention to
  http://matplotlib.org/devel/documenting_mpl.html#formatting.  In particular,
  note the difference between using single backquotes, double backquotes, and
  asterisks in the markup.

We understand that PRs can sometimes be overwhelming, especially as the
reviews start coming in.  Please let us know if the reviews are unclear or
the recommended next step seems overly demanding, if you would like help in
addressing a reviewer's comments, or if you have been waiting too long to hear
back on your PR.
-->
",smartlixx,closed,2021-01-27 14:58:19,,2021-01-28 04:41:47,QuLogic,2021-01-28 05:12:26,0,,v3.4.0,53
795157709,Backport PR #19371 on branch v3.3.x (Fix specgram test on NumPy 1.20.),Backport PR #19371: Fix specgram test on NumPy 1.20.,meeseeksmachine,closed,2021-01-27 14:38:09,,2021-01-27 16:27:59,jklymak,2021-01-27 22:23:56,0,topic: testing,v3.3.4,60
795119251,eventplot: allow a list of alpha channels as in the case with colors,"I'm not sure if it's a bug or a feature. It's both.

```python
>>> plt.eventplot([[0, 1, 2], [0.5, 2.3]], color=['r', 'g'])
```
works while
```python
>>> plt.eventplot([[0, 1, 2], [0.5, 2.3]], alpha=[0.5, 0.2])
```
throws an error
```
Traceback (most recent call last):
  File ""/home/ulianych/anaconda3/envs/viziphant/lib/python3.7/site-packages/IPython/core/interactiveshell.py"", line 3319, in run_code
    exec(code_obj, self.user_global_ns, self.user_ns)
  File ""<ipython-input-2-fab7f3737c6e>"", line 1, in <module>
    plt.eventplot([[0, 1, 2], [0.5, 2.3]], alpha=[0.5, 0.2])
  File ""/home/ulianych/anaconda3/envs/viziphant/lib/python3.7/site-packages/matplotlib/pyplot.py"", line 2622, in eventplot
    **({""data"": data} if data is not None else {}), **kwargs)
  File ""/home/ulianych/anaconda3/envs/viziphant/lib/python3.7/site-packages/matplotlib/__init__.py"", line 1447, in inner
    return func(ax, *map(sanitize_sequence, args), **kwargs)
  File ""/home/ulianych/anaconda3/envs/viziphant/lib/python3.7/site-packages/matplotlib/axes/_axes.py"", line 1480, in eventplot
    coll.update(kwargs)
  File ""/home/ulianych/anaconda3/envs/viziphant/lib/python3.7/site-packages/matplotlib/artist.py"", line 998, in update
    ret.append(func(v))
  File ""/home/ulianych/anaconda3/envs/viziphant/lib/python3.7/site-packages/matplotlib/collections.py"", line 834, in set_alpha
    super().set_alpha(alpha)
  File ""/home/ulianych/anaconda3/envs/viziphant/lib/python3.7/site-packages/matplotlib/artist.py"", line 930, in set_alpha
    raise TypeError('alpha must be a float or None')
TypeError: alpha must be a float or None
```

matplotlib v3.3.3
Python 3.7.6",dizcza,open,2021-01-27 13:51:26,,,,2021-01-27 18:17:53,2,New feature,,
794947698,Don't composite path-clipped image; forward suppressComposite as needed.,"## PR Summary

Closes https://github.com/matplotlib/matplotlib/issues/18499.

## PR Checklist

<!-- Please mark any checkboxes that do not apply to this PR as [N/A]. -->

- [ ] Has pytest style unit tests (and `pytest` passes).
- [ ] Is [Flake 8](https://flake8.pycqa.org/en/latest/) compliant (run `flake8` on changed files to check).
- [ ] New features are documented, with examples if plot related.
- [ ] Documentation is sphinx and numpydoc compliant (the docs should [build](https://matplotlib.org/devel/documenting_mpl.html#building-the-docs) without error).
- [ ] Conforms to Matplotlib style conventions (install `flake8-docstrings` and run `flake8 --docstring-convention=all`).
- [ ] New features have an entry in `doc/users/next_whats_new/` (follow instructions in README.rst there).
- [ ] API changes documented in `doc/api/next_api_changes/` (follow instructions in README.rst there).

<!--
Thank you so much for your PR!  To help us review your contribution, please
consider the following points:

- A development guide is available at https://matplotlib.org/devdocs/devel/index.html.

- Help with git and github is available at
  https://matplotlib.org/devel/gitwash/development_workflow.html.

- Do not create the PR out of master, but out of a separate branch.

- The PR title should summarize the changes, for example ""Raise ValueError on
  non-numeric input to set_xlim"".  Avoid non-descriptive titles such as
  ""Addresses issue #8576"".

- The summary should provide at least 1-2 sentences describing the pull request
  in detail (Why is this change required?  What problem does it solve?) and
  link to any relevant issues.

- If you are contributing fixes to docstrings, please pay attention to
  http://matplotlib.org/devel/documenting_mpl.html#formatting.  In particular,
  note the difference between using single backquotes, double backquotes, and
  asterisks in the markup.

We understand that PRs can sometimes be overwhelming, especially as the
reviews start coming in.  Please let us know if the reviews are unclear or
the recommended next step seems overly demanding, if you would like help in
addressing a reviewer's comments, or if you have been waiting too long to hear
back on your PR.
-->
",anntzer,open,2021-01-27 09:55:58,,,,2021-01-27 10:00:09,0,topic: images,,
